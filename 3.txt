DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Add_ApplicationCategory`(IN APP_ID INT(11),IN CATEGORY_ID INT(11))
BEGIN
INSERT INTO app_categories_xref (app_id, category_id) VALUES(APP_ID,CATEGORY_ID);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `AddApplicationToAccount`(IN ACCOUNTS_ID INT(11),IN APP_ID INT(11))
BEGIN
INSERT INTO accounts_app_xref

(

accounts_id,

app_id

)

values

(

ACCOUNTS_ID,

APP_ID

);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `AddOrUpdateApplication`(
IN NAME varchar(100),

IN DESCRIPTION varchar(100),

IN IS_ACTIVE BIT(1),

IN CSS_CLASS_NAME varchar(45),

IN OBJECT_RELATIONS longtext,

IN APP_ID int(11),

OUT LASTINSERTEDID INT(11)
)
BEGIN
INSERT INTO app_info (app_id, name, description,is_active,css_class_name,object_relations) VALUES(APP_ID, NAME, DESCRIPTION,IS_ACTIVE,CSS_CLASS_NAME,OBJECT_RELATIONS) ON DUPLICATE KEY UPDATE
name=NAME, description=DESCRIPTION,is_active=IS_ACTIVE,css_class_name=CSS_CLASS_NAME,object_relations=OBJECT_RELATIONS;

SELECT LAST_INSERT_ID() INTO LASTINSERTEDID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `AddUsertoAccount`(

IN accountId int(11),

IN userID varchar(50))
BEGIN

	INSERT INTO accounts_users_xref

				(

					accounts_id,

                    Id

				) 

                values

                (

					accountId,

                    userID

                );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Approve_WorkFlow_Version`(

IN WORKFLOW_ID INT,

IN PARENT_WORKFLOW_ID INT,

IN APPROVAL_STATUS INT,

IN IS_DEFAULT_STATUS INT,

IN APROVER_COMMENTS VARCHAR(255), 

IN APPROVED_ON VARCHAR(255),

IN LAST_UPDATED_ON VARCHAR(255),

IN LAST_UPDATED_BY VARCHAR(255)

)
BEGIN

	IF (APPROVAL_STATUS=1) THEN  

		UPDATE 

				workflow_info WFI 

		SET		WFI.is_default_version=0,
				WFI.is_active=0

		WHERE 	WFI.parent_workflow_id = PARENT_WORKFLOW_ID;

	END IF;

    

	UPDATE 

			workflow_info WFI 

	SET		WFI.is_default_version=IS_DEFAULT_STATUS,

			WFI.parent_workflow_id=PARENT_WORKFLOW_ID,

			WFI.is_approved=APPROVAL_STATUS,

			WFI.approver_comments = APROVER_COMMENTS, 

			WFI.approved_on = APPROVED_ON,

			WFI.last_updated_on = LAST_UPDATED_ON,

			WFI.last_updated_by = LAST_UPDATED_BY

	WHERE 	WFI.workflow_id = WORKFLOW_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `AssignRoleToApplication`(IN ROLE_ID varchar(255),IN APP_ID INT(11))
BEGIN
INSERT INTO roles_app_xref (role_id, app_id) VALUES(ROLE_ID,APP_ID);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Attach_Beneficiary_To_Service_Request`(IN SERVICE_REQUEST_ID INT(11),IN BENEFICIARY_ID INT(11))
BEGIN

UPDATE servicerequest_info si

SET

si.benificiary_id = BENEFICIARY_ID

WHERE

si.service_request_id = SERVICE_REQUEST_ID;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Delete_APIKeyInfo`(IN AUTH_ID INT)
BEGIN
UPDATE application_auth_keys AAK 
SET 
    AAK.is_active = 0
WHERE
    AAK.auth_id = AUTH_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Delete_Application`(APP_ID int(11))
BEGIN
UPDATE APP_INFO AS AI
SET
AI.is_deleted = 1
WHERE
AI.APP_ID = APP_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_BatchInfo`(IN batchID int(11))
BEGIN

UPDATE batch_info 

SET 

    is_deleted = 1

WHERE

    batch_id = batchID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DELETE_DATAMAPPER`(IN SERVICE_TYPE_ID INT,IN DATA_MAPPER_ID INT)
BEGIN


 
UPDATE servicerequest_type_data_mapper_info AS SRTDM

  
SET 

    SRTDM.is_deleted = 1

WHERE

    SRTDM.data_mapper_id = DATA_MAPPER_ID AND SRTDM.servicerequest_type_id=SERVICE_TYPE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_DataObjectRecordById`(IN RECORD_ID INT)
BEGIN

UPDATE data_object_record_info 

SET 

    is_deleted = 1

WHERE

    data_object_record_id = RECORD_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_DataObjectWorkflowLifeCycle`(

IN DATA_OBJECT_ID INT  

)
BEGIN

	Delete FROM  `dataobject_lifecycle_workflows_xref` where `data_object_type_id`= DATA_OBJECT_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_DocumentTemplate`(IN DOCUMENTID int(11))
BEGIN

UPDATE document_template_info 

SET 

    is_deleted = 1

WHERE

    document_id = DOCUMENTID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_Object`(IN DATA_OBJECT_TYPEID INT)
BEGIN

UPDATE `data_object_type_lookup` dotl 
SET 
    dotl.is_deleted = 1
WHERE
    dotl.data_object_type_id = DATA_OBJECT_TYPEID;
    
UPDATE `field_info` fi 
SET 
    fi.is_deleted = 1
WHERE
    fi.target_object_type_id = DATA_OBJECT_TYPEID;
    
UPDATE `data_object_relation_lookup` dorl
SET 
    dorl.is_active = 0
WHERE
    dorl.source_object_id = DATA_OBJECT_TYPEID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Delete_Preset`(
IN PRESET_ID INT
)
BEGIN
	UPDATE `report_presets_xref` rpx
	SET 
		rpx.is_delete = 1
	WHERE rpx.preset_id = PRESET_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DELETE_Report`(
IN REPORT_ID INT
)
BEGIN
	UPDATE report_info RP 

	SET  
		RP.is_deleted = 1

	WHERE

		RP.report_id = REPORT_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_ReportType`(IN REPORT_TYPE_ID INT)
BEGIN
UPDATE report_types RT 

	SET 
		RT.is_deleted = 1

	WHERE

		RT.report_type_id = REPORT_TYPE_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_Service_Request`(IN SERVICE_REQUEST_ID long,IN LAST_UPDATED_ON datetime, 

	IN LAST_UPDATED_BY varchar(50)
)
BEGIN



UPDATE servicerequest_info as sri

SET 

    sri.is_delete = 1, sri.last_updated_on = LAST_UPDATED_ON, sri.last_updated_by = LAST_UPDATED_BY , sri.status = 0 

WHERE

   sri.service_request_id = SERVICE_REQUEST_ID ;
   
   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_ServiceRequestType`(IN SERVICE_REQUEST_TYPE_ID INT)
BEGIN

UPDATE servicerequest_type_info sti

SET

sti.deleted = 1

WHERE

sti.service_request_type_id = SERVICE_REQUEST_TYPE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_Tags`(IN TAG_ID INT,
IN APP_ID INT,
IN LAST_UPDATED_BY VARCHAR(50),
IN LAST_UPDATED_ON DATETIME
)
BEGIN

UPDATE tag_info TI , user_tags UT

	SET 
		TI.is_deleted = 1, 
        TI.last_updated_by = LAST_UPDATED_BY,
		TI.last_updated_on = LAST_UPDATED_ON

	WHERE

		TI.tag_id = TAG_ID AND TI.app_id = APP_ID; 
        
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_User_Comments`(
IN  COMMENT_ID INT(11),
IN LAST_UPDATED_BY VARCHAR(255),
IN LAST_UPDATED_ON DATETIME )
BEGIN
		UPDATE user_comments AS UC
		SET
		UC.is_delete = 1,
        UC.last_updated_by = LAST_UPDATED_BY,
		UC.last_updated_on = LAST_UPDATED_ON
		WHERE
		UC.id = COMMENT_ID;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_User_Tags`(IN USER_TAG_ID INT,
IN LAST_UPDATED_BY VARCHAR(50),
IN LAST_UPDATED_ON DATETIME
)
BEGIN

UPDATE user_tags UT 

	SET 
		UT.is_deleted = 1, 
        UT.last_updated_by = LAST_UPDATED_BY,
		UT.last_updated_on = LAST_UPDATED_ON

	WHERE

		 UT.id = USER_TAG_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_UserGroupUserById`(

IN UserGroupId varchar(255),

IN UserId varchar(255))
BEGIN

	UPDATE user_usergroup_xref 

	SET 

		is_deleted = 1

	WHERE

		user_group_id = UserGroupId

    AND

		user_id=UserId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Delete_Watch_List`(
IN APP_ID INT,
IN MAPPING_ID INT)
BEGIN

UPDATE servicerequest_watch_list swl 

	SET 
		swl.is_deleted = 1

	WHERE

		 swl.mapping_id = MAPPING_ID AND swl.app_id = APP_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DeleteAppsByRoleId`(IN roleId varchar(255))
BEGIN

Delete FROM  `roles_app_xref` where `role_id`=roleId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DeleteFlowById`(IN WORKFLOW_ID INT, OUT RESULT INT)
BEGIN



DECLARE pending_item_count INT;



SET pending_item_count = 

(SELECT COUNT(*) FROM workflow_step_stage_info WHERE

    workflow_step_id IN (SELECT 

            workflow_step_id

        FROM

            workflow_step_info

        WHERE

            workflow_id = WORKFLOW_ID)

        AND process_indicator = 0);

        

IF pending_item_count <> 0 THEN

	SET @RESULT = -1;

ELSE

	UPDATE workflow_info set deleted = 1 where workflow_id = WORKFLOW_ID;

    SET @RESULT = 1;



END IF;

    SELECT @RESULT;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DeleteRelatedFields`(

IN service_type_id int(11),

IN field_id int(11),

IN source_object_type_id int(11),

IN target_object_type_id int(11)

)
BEGIN 

DECLARE backward_field_id INT DEFAULT 0;

	/* Get backward field_id*/

            select fi.field_id  into backward_field_id 

			from   field_info fi 

			where fi.source_object_type_id = target_object_type_id AND

			fi.target_object_type_id = source_object_type_id and fi.type = 'relation'  ;

	/* Delete forward & backward fields */

		IF(backward_field_id > 0) THEN

				 DELETE FROM field_info  WHERE field_info.field_id  in ( field_id, backward_field_id) ;

                 #and  field_info.service_request_type_id = service_type_id;

			ELSE

				#DELETE FROM field_info  where field_info.type = 'relation' AND (field_info.field_id= field_id or field_info.target_object_type_id = source_object_type_id);

                DELETE FROM field_info  where  (field_info.field_id= field_id or field_info.target_object_type_id = source_object_type_id);

            END IF;    

    		

 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DeleteRelation`(

IN service_type_id int(11),

IN field_id int(11),

IN relation_id int(11),

IN source_object_type_id int(11),

IN target_object_type_id int(11)

)
BEGIN



DECLARE backward_relation_id INT DEFAULT 0;

IF service_type_id = source_object_type_id THEN


    /* Delete forward relation */

    		DELETE FROM service_type_object_relation_lookup  
            WHERE service_type_object_relation_lookup.relation_id = relation_id;

	/* Delete backward relation */    

		DELETE FROM service_type_object_relation_lookup 
WHERE
    target_object_id = source_object_type_id
        AND source_object_id = target_object_type_id;

ELSE

    /* Delete forward relation */

    		DELETE FROM data_object_relation_lookup  
            WHERE data_object_relation_lookup.relation_id = relation_id;

	/* Delete backward relation */  

DELETE FROM data_object_relation_lookup 
WHERE
    target_object_id = source_object_type_id
    AND source_object_id = target_object_type_id;

END IF;

 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DeleteUserAppsByUserId`(IN userId varchar(255),IN appId int(11))
BEGIN

 Delete FROM  `users_app_xref` where `user_id`=userId and `app_id`=appId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `DeleteUserGroup`(

in UserGroupId varchar(255)

)
BEGIN

UPDATE user_group_info 

SET 

    is_deleted = 1

WHERE

    user_group_id = UserGroupId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AccountsById`(

IN ACCOUNT_ID INT,

IN LOGGED_USER_ID VARCHAR(50),
 
IN APP_ID INT(11)

)
BEGIN
CASE 
	
    WHEN LOGGED_USER_ID <> -1 THEN
		SELECT  

			distinct

			b.`accounts_id` AccountId,

			b.`org_title` OrgTitle,

			b.`org_webiste_url` OrgWebisteUrl,

			b.`org_code` OrgCode,
			
			b.`org_currency_code` OrgCurrencyCode,
			
			 b.`ip_address` OrgIpAddress,

			b.`profile_image` ProfileImage,

			b.`email` Email,

			b.`phone_number` PhoneNumber,

			b.`fax_number` FaxNumber,

			b.`contact_person_firstname` ContactPersonFirstName,

			b.`contact_person_last_name` ContactPersonLastName,

			b.`contact_person_email` ContactPersonEmail,

			b.`address_line_1` AddressLine1,

			b.`address_line_2` AddressLine2,

			b.`city` City,

			b.`state` State,

			b.`country_code` CountryCode,

			b.`zipcode` ZipCode,

			b.`created_by` CreatedBy,

			concat(c.FirstName,' ', c.LastName) CreatedByName,

			concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

			b.`last_updated_by` LastUpdatedBy,

			b.`created_on` CreatedOn,

			b.`last_updated_on` LastUpdatedOn,

			b.`is_deleted` IsDeleted,

			b.`is_suspended` IsSuspended,

			AIS.`comments` Comments,

			AIS.`resume_on` Resumeon

		FROM  

			`accounts_info` b join

			aspnetusers c join

			aspnetusers l

		LEFT JOIN accounts_status AIS ON b.accounts_id=AIS.account_id 

		LEFT JOIN accounts_users_xref AUX ON b.accounts_id=AUX.accounts_id 

		WHERE 

			b.accounts_id = IF(ACCOUNT_ID <> -1, ACCOUNT_ID, b.accounts_id)
			
			AND
			
			AUX.Id = IF(LOGGED_USER_ID <> -1, LOGGED_USER_ID, AUX.Id)

			AND 

			b.created_by = c.Id

			AND

			b.last_updated_by = l.id

			AND

			b.is_deleted = 0;
            
	WHEN APP_ID <> -1 THEN
    
			SELECT            
				DISTINCT
                
					AI.`accounts_id` AccountId,

					AI.`org_title` OrgTitle,

					AI.`org_webiste_url` OrgWebisteUrl,

					AI.`org_code` OrgCode,
					
					AI.`org_currency_code` OrgCurrencyCode,
					
					 AI.`ip_address` OrgIpAddress,

					AI.`profile_image` ProfileImage,

					AI.`email` Email,

					AI.`phone_number` PhoneNumber,

					AI.`fax_number` FaxNumber,

					AI.`contact_person_firstname` ContactPersonFirstName,

					AI.`contact_person_last_name` ContactPersonLastName,

					AI.`contact_person_email` ContactPersonEmail,

					AI.`address_line_1` AddressLine1,

					AI.`address_line_2` AddressLine2,

					AI.`city` City,

					AI.`state` State,

					AI.`country_code` CountryCode,

					AI.`zipcode` ZipCode,

					AI.`created_by` CreatedBy,
 
					AI.`last_updated_by` LastUpdatedBy,

					AI.`created_on` CreatedOn,

					AI.`last_updated_on` LastUpdatedOn,

					AI.`is_deleted` IsDeleted,

					AI.`is_suspended` IsSuspended
                    
            FROM 	accounts_app_xref APX
               JOIN accounts_info AI on APX.accounts_id = AI.accounts_id
			WHERE 
				APX.app_id = APP_ID;
	ELSE
		SELECT 

			distinct

			b.`accounts_id` AccountId,

			b.`org_title` OrgTitle,

			b.`org_webiste_url` OrgWebisteUrl,

			b.`org_code` OrgCode,
			
			b.`org_currency_code` OrgCurrencyCode,
			
			 b.`ip_address` OrgIpAddress,

			b.`profile_image` ProfileImage,

			b.`email` Email,

			b.`phone_number` PhoneNumber,

			b.`fax_number` FaxNumber,

			b.`contact_person_firstname` ContactPersonFirstName,

			b.`contact_person_last_name` ContactPersonLastName,

			b.`contact_person_email` ContactPersonEmail,

			b.`address_line_1` AddressLine1,

			b.`address_line_2` AddressLine2,

			b.`city` City,

			b.`state` State,

			b.`country_code` CountryCode,

			b.`zipcode` ZipCode,

			b.`created_by` CreatedBy,

			concat(c.FirstName,' ', c.LastName) CreatedByName,

			concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

			b.`last_updated_by` LastUpdatedBy,

			b.`created_on` CreatedOn,

			b.`last_updated_on` LastUpdatedOn,

			b.`is_deleted` IsDeleted,

			b.`is_suspended` IsSuspended,

			AIS.`comments` Comments,

			AIS.`resume_on` Resumeon

		FROM  

			`accounts_info` b join

			aspnetusers c join

			aspnetusers l

		LEFT JOIN accounts_status AIS ON b.accounts_id=AIS.account_id 
		 

		WHERE 

			b.accounts_id = IF(ACCOUNT_ID <> -1, ACCOUNT_ID, b.accounts_id) 
			 

			AND 

			b.created_by = c.Id

			AND

			b.last_updated_by = l.id 
			
			AND

			b.is_deleted = 0;
		END CASE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ActionsByStepId`(IN STEP_ID INT)
BEGIN
SELECT
sai.step_action_id 'ActionId',
sai.name 'ActionName',
sai.description 'ActionDescription',
CONCAT(usr.FirstName, ' ', usr.LastName) AS 'LastUpdatedByName',
CONCAT(usr.FirstName, ' ', usr.LastName) AS 'CreatedByName',
COALESCE(sap.operation_type_id, 0) 'OperationTypeId',
COALESCE(sap.field_id, 0) 'OperationFieldId',
FI.source_object_type_id 'OperationSourceObjectTypeId',
FI.type 'OperationFieldType',
optl.name 'OperationName',
sap.value 'OperationValue',
sap.message_template_id 'OperationMessageTemplateId',
sap.assignee_id 'OperationAssigneeId',
sap.cc_list 'OperationCcList',
sap.to_field_id 'OperationToFieldId',
sap.aggregator_id 'AggregatorId'
FROM
step_action_info sai
LEFT JOIN
step_action_operation_xref sap ON (sai.step_action_id = sap.step_action_id)
LEFT JOIN
field_info FI ON (sap.field_id = FI.field_id)
LEFT JOIN
operation_type_lookup optl ON (sap.operation_type_id = optl.operation_type_id)
LEFT JOIN
aspnetusers usr ON (sai.last_updated_by = usr.Id)
WHERE
sai.step_id = STEP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_All_EmailNotificationsProcessInfo`(IN PROCESSIND BIT(1))
BEGIN

SELECT

ENP.notification_id NotificationId,

ENP.workflow_step_stage_id WorkflowStepStageId,

ENP.user_id UserId,

ENP.email_subject EmailSubject,

ENP.email_body EmailBody,

ENP.process_indicator ProcessIndicator,

u.Email Email,

ENP.created_by CreatedBy,

ENP.created_on CreatedOn,

ENP.last_updated_by LastUpdatedBy,

ENP.last_updated_on LastUpdatedOn,

CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

email_notification_process_info ENP

JOIN

aspnetusers u ON (u.Id = ENP.user_id)

JOIN

aspnetusers c ON (c.Id = ENP.created_by)

JOIN

aspnetusers l ON (l.Id = ENP.last_updated_by)

WHERE

ENP.process_indicator = PROCESSIND;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_All_ObjectsAndRelations`(IN APP_ID INT)
BEGIN

SELECT

dotl.data_object_type_id 'SourceObjectTypeId',

dotl.name 'SourceObjectName',

dotl.display_name 'SourceDisplayName',

dotl.plural_label 'SourcePluralLabel',

dotl.description 'SourceDescription',

dotl.css_class_name 'SourceCssClassName',

dotl.is_active 'SourceIsActive',

dotl.is_editable 'SourceIsEditable',

SUBSTRING(dorl.relation_type, 1, 1) 'RelationType',

fi.target_object_type_id 'TargetObjectTypeId',

dotl.display_name 'TargetObjectName',

fi.field_id 'FieldId',

fi.name 'FieldName',

(SELECT

COUNT(1)

FROM

field_info

WHERE

source_object_type_id = dotl.data_object_type_id) AS FieldCount

FROM

data_object_type_lookup dotl

LEFT JOIN

field_info fi ON (fi.source_object_type_id = dotl.data_object_type_id

AND fi.type = 'relation'

AND fi.source_object_type_id IS NOT NULL

AND fi.target_object_type_id IS NOT NULL

AND fi.service_request_type_id IS NULL)

LEFT JOIN

data_object_relation_lookup dorl ON (dorl.relation_id = fi.relation_id AND dorl.is_active = 1)

WHERE

dotl.app_id = APP_ID

AND dotl.is_active = 1 AND dotl.is_system != 1 AND dotl.is_deleted = 0

#GROUP BY fi.field_id
;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllAPIKeyInfos`(IN AUTH_ID INT(11),IN APP_ID int(11),IN SERVICE_TYPE_ID int(11))
BEGIN
SELECT 
    AAK.auth_id AS AuthId,
    AAK.application_name AS ApplicationName,
    AAK.auth_key AS AuthKey,
    AAK.expires_on AS ExpiresOn,
    AAK.created_on AS CreatedOn,
    AAK.created_by AS CreatedBy,
    AAK.is_active AS IsActive,
    AAK.app_id AS AppId,
    AAK.service_type_id AS ServiceTypeId,
    AAK.data_mapper_id AS DataMapperId,
    AAK.allowed_hosts AS AllowedHosts,
    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName
FROM
    application_auth_keys AAK
        LEFT JOIN
    aspnetusers c ON AAK.created_by = c.Id
WHERE
    CASE
        WHEN
            AUTH_ID <> - 1
        THEN
            AAK.auth_id = AUTH_ID
                AND AAK.created_by = c.Id
                AND AAK.is_active = 1
        ELSE AAK.app_id = IF(APP_ID <> - 1, APP_ID, AAK.app_id)
            AND AAK.service_type_id = IF(SERVICE_TYPE_ID <> - 1,
            SERVICE_TYPE_ID,
            AAK.service_type_id)
            AND AAK.created_by = c.Id
            AND AAK.is_active = 1
    END
ORDER BY AAK.auth_id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllAppCategories`(IN USER_ID varchar(255))
BEGIN
		SELECT
		ac.category_id AS CategoryId,
		ac.name AS Name,
		ac.is_active AS IsActive,
		(SELECT
		COUNT(acx.category_id)
		FROM 
		app_categories_xref acx
		LEFT JOIN
		users_app_xref uap ON uap.app_id = acx.app_id
		JOIN
		app_info ai ON ai.app_id = acx.app_id AND ai.is_deleted = 0
		WHERE
		acx.category_id = ac.category_id
		AND ac.is_active = '1'
		AND uap.user_id = USER_ID) AS AppCount
		FROM
		app_categories ac
		WHERE
		ac.is_active = '1';
		END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllApplications`()
BEGIN

SELECT 

    app_id AppId,

    `name` Name,

    description Description,

    css_class_name CssClassName,

    is_active IsActive

FROM

    app_info ai

WHERE

	ai.is_active = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllApplicationsByRoleId`(
IN ROLE_ID varchar(255),
IN ACCOUNT_ID INT
)
BEGIN

CASE WHEN ROLE_ID <> -1 THEN
SELECT 
   distinct
    ai.app_id AppId,

    ai.`name` Name,

    ai.description Description,

    ai.css_class_name CssClassName,

    ai.is_active IsActive

FROM

    app_info ai

        LEFT JOIN

    roles_app_xref ra ON ai.app_id = ra.app_id

WHERE

    ai.is_active = 1 AND ra.role_id = ROLE_ID; 

WHEN   ACCOUNT_ID <> -1 THEN
	SELECT 

		ai.app_id AppId,

		ai.`name` Name,

		ai.description Description,

		ai.css_class_name CssClassName,

		ai.is_active IsActive

	FROM

		app_info ai

			LEFT JOIN

		accounts_app_xref AAX ON ai.app_id = AAX.app_id

	WHERE

		(ai.is_active = 1 AND ai.is_deleted = 0) AND AAX.accounts_id = ACCOUNT_ID;
END CASE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllApplicationsByUserId`(
IN UserId varchar(255),
IN ACCOUNT_ID INT(11))
BEGIN

CASE WHEN ACCOUNT_ID = -1 THEN
SELECT
ai.app_id AppId,

ai.`name` Name,

ai.description Description,

ai.css_class_name CssClassName,

ai.is_active IsActive,

ua.is_default AS IsDefault,

ua.user_id AS UserId,

ua.role_id AS RoleId,

acx.category_id as CategoryId,

APC.name as CategoryName,

(SELECT

GROUP_CONCAT(anr.Name)

FROM

roles_app_xref rax

LEFT JOIN

users_app_xref uap ON uap.app_id = rax.app_id

LEFT JOIN

aspnetroles anr ON anr.Id = uap.role_id

WHERE

rax.app_id = ai.app_id

AND uap.app_id = ai.app_id

AND uap.user_id = UserId) AS 'Roles'

FROM app_info ai

LEFT JOIN

users_app_xref ua ON ai.app_id = ua.app_id

LEFT JOIN

app_categories_xref acx ON ai.app_id = acx.app_id

LEFT JOIN
app_categories APC ON acx.category_id=APC.category_id

WHERE

ai.is_active = 1 AND ua.user_id = UserId AND ai.is_deleted = 0;
ELSE
SELECT

distinct
AAX.accounts_id ,
ai.app_id AppId,

ai.`name` Name,

ai.description Description,

ai.css_class_name CssClassName,

ai.is_active IsActive,

ua.is_default AS IsDefault,

ua.user_id AS UserId,

ua.role_id AS RoleId,

acx.category_id as CategoryId,

APC.name as CategoryName,

(SELECT

GROUP_CONCAT(anr.Name)

FROM

roles_app_xref rax

LEFT JOIN

users_app_xref uap ON uap.app_id = rax.app_id

LEFT JOIN

aspnetroles anr ON anr.Id = uap.role_id

WHERE

rax.app_id = ai.app_id

AND uap.app_id = ai.app_id

AND uap.user_id = UserId) AS 'Roles'

FROM accounts_app_xref AAX

INNER JOIN

app_info ai ON ( AAX.app_id = ai.app_id)

LEFT JOIN

users_app_xref ua ON ai.app_id = ua.app_id

LEFT JOIN

app_categories_xref acx ON ai.app_id = acx.app_id

LEFT JOIN
app_categories APC ON acx.category_id=APC.category_id

WHERE

ai.is_active = 1

AND

AAX.accounts_id = ACCOUNT_ID 

AND

ua.user_id =IF(UserId <> -1,UserId,ua.user_id)


AND ai.is_deleted = 0;
END CASE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllBatchInfo`(IN BATCH_ID int(11),IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 

BI.`batch_id` BatchID,

BI.`document_id` DocumentID,

BI.`document_name` DocumentName,

BI.`document_path` DocumentPath,

BI.`document_type` DocumentType,

BI.`no_of_records` NoofRecords,

BI.`status` Status,

BI.`created_by` CreatedBy,

BI.`created_on` CreatedOn,

BI.`last_updated_by` LastUpdatedBy,

BI.`last_updated_on` LastUpdatedOn,

CONCAT(c.FirstName, ' ', c.LastName) AS 'CreatedByName',

CONCAT(l.FirstName, ' ', l.LastName) AS 'LastUpdatedByName'

FROM

`batch_info` BI

LEFT JOIN

aspnetusers c ON (c.id = BI.created_by)

LEFT JOIN

aspnetusers l ON (l.id = BI.last_updated_by)

WHERE

BI.`batch_id` = IF(BATCH_ID <> - 1,

BATCH_ID,

BI.`batch_id`) and BI.is_deleted = 0 AND Date(BI.created_on) >= FROM_DATE AND Date(BI.created_on) <= TO_DATE order by BI.created_on desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllBusinessRulesByWorkflowStepId`(

IN WORKFLOW_STEP_ID INT(11))
BEGIN
 
SET @CRITERIA_TYPE = -1;

SELECT  
	   distinct rpi.criteria_type 
		INTO @CRITERIA_TYPE  from  
		workflow_step_rule_xref wfsrx join     
		rule_info ri ON wfsrx.rule_id = ri.rule_id ,
		rule_parameter_info rpi 
 WHERE  wfsrx.workflow_step_id = WORKFLOW_STEP_ID   
	    AND ri.rule_id = rpi.rule_id
        AND ri.deleted = 0 ;
        
CASE 
	WHEN @CRITERIA_TYPE <> 'FN' THEN          
	SELECT 

		ri.rule_id AS RuleId,

		ri.name AS RuleName,

		ri.service_request_type_id AS ServiceRequestTypeId,

		ri.rule_type_id RuleTypeId,

		rtl.lookup_column RuleTypeName,

		ri.active_from ActiveFrom,

		ri.active_until ActiveUntil, 

		ri.is_active IsActive,

		ri.workflow_id WorkflowId,

		ri.update_fields UpdateFields,

		fi.field_id FieldId,

		fi.name AS FieldName,

		fi.type AS FieldTypeName,
        
        fi.service_request_type_id AS ServiceTypeId,
        
        fi.source_object_type_id AS SourceObjectTypeId,
        
        fi.target_object_type_id AS TargetObjectTypeId, 

		rpi.rule_parameter_id AS RuleParameterId, 

		rpi.rule_parameter_type_id AS RuleParameterTypeId,

		rpi.operator AS Operator,

		rpi.value AS Value,

		rpi.range_start AS RangeStart,

		rpi.range_end AS RangeEnd,

		rpi.conjunction AS Conjunction,
		
		rpi.criteria_type AS CriteriaType,
		
		rpi.function_value AS CriteriaTypeMaxValue,
		
		 rpi.function_type AS FunctionType

	FROM

		workflow_step_rule_xref wfsrx join 

		rule_info ri ON wfsrx.rule_id = ri.rule_id,

		rule_parameter_info rpi,

		rule_type_lookup rtl,

		field_info fi

	WHERE

	wfsrx.workflow_step_id = WORKFLOW_STEP_ID 

			AND ri.rule_id = rpi.rule_id

			AND ri.deleted = 0

			AND ri.rule_type_id = rtl.rule_type_id

			AND rpi.rule_parameter_type_id = IF(rpi.criteria_type <> 'FN',fi.field_id ,rpi.criteria_type);
  
  
  ELSE 

	 SELECT 

			ri.rule_id AS RuleId,

			ri.name AS RuleName,

			ri.service_request_type_id AS ServiceRequestTypeId,

			ri.rule_type_id RuleTypeId,

			ri.active_from ActiveFrom,

			ri.active_until ActiveUntil, 

			ri.is_active IsActive,

			ri.workflow_id WorkflowId,

			ri.update_fields UpdateFields,

			rpi.rule_parameter_id AS RuleParameterId,

			rpi.rule_parameter_type_id AS RuleParameterTypeId,

			rpi.operator AS Operator,

			rpi.value AS Value,

			rpi.range_start AS RangeStart,

			rpi.range_end AS RangeEnd,

			rpi.conjunction AS Conjunction,
			
			rpi.criteria_type AS CriteriaType,
			
			rpi.function_value AS CriteriaTypeMaxValue,
			
			rpi.function_type AS FunctionType 
		
		FROM 
				workflow_step_rule_xref wfsrx join     
				rule_info ri ON wfsrx.rule_id = ri.rule_id ,
				rule_parameter_info rpi ,
				rule_type_lookup rtl 

	WHERE 
			wfsrx.workflow_step_id = WORKFLOW_STEP_ID   
			AND ri.rule_id = rpi.rule_id
			AND ri.deleted = 0
			AND ri.rule_type_id = rtl.rule_type_id ; 

	END CASE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllChildObjectTypesByParentObjectTypeId`(

IN parent_object_type_id int,

IN isServiceRequestTypeIdEqualSourceObjectTypeId bit

)
BEGIN



IF (isServiceRequestTypeIdEqualSourceObjectTypeId) THEN



SELECT 

   dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.app_id AppId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable,

    IFNULL(dotl.created_on, '') CreatedOn,

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

    data_object_record_info dori LEFT JOIN

    data_object_type_lookup dotl ON dori.data_object_type_id = dotl.data_object_type_id

       JOIN

    aspnetusers c ON (c.Id = dotl.created_by)

        JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)

WHERE

    dori.data_object_type_id  IN (SELECT 

            fi.target_object_type_id

        FROM

            field_info fi JOIN service_type_object_relation_lookup dorl

            ON fi.source_object_type_id =dorl.source_object_id

        WHERE

            fi.source_object_type_id = parent_object_type_id

        AND fi.type = 'relation'

        AND dorl.relation_type='1-M'

        AND dori.is_deleted = 0

        AND dori.is_active = 1)

        group by dori.data_object_type_id;

        

 ELSE

 

SELECT 

   dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.app_id AppId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable,

    IFNULL(dotl.created_on, '') CreatedOn,

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

    data_object_record_info dori LEFT JOIN

    data_object_type_lookup dotl ON dori.data_object_type_id = dotl.data_object_type_id

       JOIN

    aspnetusers c ON (c.Id = dotl.created_by)

        JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)

WHERE

    dori.data_object_type_id  IN (SELECT 

            fi.target_object_type_id

        FROM

            field_info fi JOIN data_object_relation_lookup dorl

            ON fi.source_object_type_id =dorl.source_object_id

        WHERE

            fi.source_object_type_id = parent_object_type_id

        AND fi.type = 'relation'

        AND dorl.relation_type='1-M'

        AND dori.is_deleted = 0

        AND dori.is_active = 1)

        group by dori.data_object_type_id;

END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllDatabaseTypeLookup`()
BEGIN
	SELECT 
		DBTL.database_type_id 'DatabaseTypeID', 
        DBTL.name 'DatabaseName'
         FROM
		database_type_lookup DBTL; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllDataMapper_Info`(
DATA_MAPPER_ID INT,
SERVICEREQUEST_TYPE_ID INT
)
BEGIN
SELECT
STDM.data_mapper_id DataMapperID,
STDM.servicerequest_type_id ServiceRequestTypeID,
STDM.type_id TypeID,
STDM.name DataMapperName,
DMTL.name DataMapperTypeName,
STDM.config_json ConfigJSON,
STDM.parsed_text ParsedText,
STDM.status DataMapperStatus,
STDM.is_deleted IsDeleted,
STDM.created_by CreatedBy,
STDM.created_on CreatedOn,
STDM.last_updated_by LastUpdatedBy,
STDM.last_updated_on LastUpdatedOn,
CONCAT(c.FirstName,' ', c.LastName) CreatedByName,
CONCAT(l.FirstName,' ', l.LastName) LastUpdatedByName
FROM
servicerequest_type_data_mapper_info STDM
INNER JOIN data_mapper_type_lookup DMTL ON STDM.type_id = DMTL.type_id,
aspnetusers c,
aspnetusers l
WHERE
STDM.data_mapper_id =IF(DATA_MAPPER_ID <> -1, DATA_MAPPER_ID, STDM.data_mapper_id)
AND
STDM.servicerequest_type_id =IF(SERVICEREQUEST_TYPE_ID <> -1, SERVICEREQUEST_TYPE_ID, STDM.servicerequest_type_id)
AND
STDM.created_by = c.Id
AND
STDM.last_updated_by = l.id
AND
STDM.is_deleted = 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_AllDataObjectTypeByName`(
	IN APP_ID INT(11),
	IN DATA_OBJECT_NAME varchar(5000)
)
BEGIN
	SELECT  
			DOTL.data_object_type_id 'DataObjectTypeId',
            DOTL.name 'DataObjectName',
            DOTL.display_name 'DisplayName' 
    FROM 
			data_object_type_lookup DOTL
    WHERE   FIND_IN_SET(DOTL.name, DATA_OBJECT_NAME)
    AND 	DOTL.app_id = APP_ID 
    AND     DOTL.is_deleted=0;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllDataSources`(
IN DATASOURCE_ID INT ,  
IN APP_ID  INT)
BEGIN
	SELECT 
		DSST.datasource_id 'DataSourceID',
        DSST.server_location 'ServerLocation', 
        DSST.datasource_name 'DataSourceName', 
        DSST.app_id 'AppID',
        DSST.data_base_type_id 'DatabaseTypeID', 
        DSST.schema 'DBSchema',
        DSST.username 'UserName', 
		 
        DSST.connection_string 'ConnectionString',  
        DSST.is_active 'IsActive',
		DSST.is_delete 'IsDelete',
        DSST.created_by 'CreatedBy',
        DSST.created_on 'CreatedOn',
		DSST.updated_on 'LastUpdatedOn',
        DSST.updated_by 'LastUpdatedBy',
        concat(c.FirstName,' ', c.LastName) 'CreatedByName',
		concat(l.FirstName,' ', l.LastName) 'LastUpdatedByName'
    FROM
		datasources DSST join
        
        aspnetusers c join

		aspnetusers l
	WHERE 
		 
		DSST.datasource_id=IF(DATASOURCE_ID <> -1,DATASOURCE_ID,DSST.datasource_id)
    AND
		DSST.app_id=IF(APP_ID <> -1,APP_ID,DSST.app_id)
    AND 
		DSST.created_by = c.Id
    AND
		DSST.updated_by = l.id
    AND
		DSST.is_delete = 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllDatasourceTypeLookup`()
BEGIN
	SELECT 
				DSTL.datasource_type_lookup DataSourceTypeId,
				DSTL.name DataSourceTypeName
	FROM
				datasource_type_lookup DSTL;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllDocumentsByServiceTypeId`(IN SERVICE_TYPE_ID INT)
BEGIN



SELECT 

	sdx.service_type_id AS ServiceTypeId, 

	sdx.document_id AS DocumentId, 

	d.name AS Name, 

	dfx.file_type_id AS FileTypeId, 

	ft.type AS Type,

    d.created_on AS CreatedOn,

    d.created_by AS CreatedBy,

    d.last_updated_by AS LastUpdatedBy,

    d.last_updated_on AS LastUpdatedOn

FROM servicetype_documents_xref sdx 

JOIN documents d 

	ON sdx.document_id = d.document_id 

JOIN document_filetypes_xref dfx 

	ON sdx.document_id = dfx.document_id

JOIN file_types ft 

	ON dfx.file_type_id = ft.file_type_id

where sdx.service_type_id = SERVICE_TYPE_ID;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllDocumentTemplates`(IN APP_ID INT(11))
BEGIN

SELECT 

    dti.document_id AS DocumentId,

    dti.name AS Name,

    dti.description AS Description,

    ft.type AS Type,

    dti.path AS Path,

    dti.file_type_id AS FileTypeId,

    dti.app_id AS AppId,

    dti.created_on AS CreatedOn,

    dti.created_by AS CreatedBy,

    dti.last_updated_by AS LastUpdatedBy,

    dti.last_updated_on AS LastUpdatedOn,

    CONCAT(c.FirstName, ' ', c.LastName) AS 'CreatedByName',

    CONCAT(c.FirstName, ' ', c.LastName) AS 'LastUpdatedByName'

FROM

  document_template_info dti

        LEFT JOIN

    file_types ft ON (ft.file_type_id = dti.file_type_id)

        LEFT JOIN

    aspnetusers c ON (c.id = dti.created_by

        AND c.id = dti.last_updated_by)

WHERE

    dti.app_id= APP_ID AND dti.is_deleted = 0

ORDER BY dti.last_updated_on DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllEmailFields`(

IN SERVICE_TYPE_ID INT)
BEGIN

SELECT CONCAT(COALESCE(dotl.display_name,''),'->',st.display_name) AS label,st.field_id AS id,st.source_object_type_id as sourceObjectTypeId from 

(select  fi.display_name,fi.field_id,fi.type,fi.source_object_type_id from field_info fi 

where fi.service_request_type_id=SERVICE_TYPE_ID or  fi.source_object_type_id in (

SELECT distinct target_object_id FROM  service_type_object_relation_lookup storl WHERE storl.source_object_id = SERVICE_TYPE_ID )) st

LEFT JOIN data_object_type_lookup dotl ON dotl.data_object_type_id= st.source_object_type_id 

where st.type='email';



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllEmailFieldsByServiceTypeId`(

IN SERVICE_TYPE_ID INT)
BEGIN

	SELECT 

		CONCAT(COALESCE(dotl.display_name,''),'->',st.display_name) AS label,

		st.field_id AS id,

		st.source_object_type_id as sourceObjectTypeId 

	FROM

		(

			SELECT  

				fi.display_name,

				fi.field_id,

				fi.type,

				fi.source_object_type_id 

			FROM field_info fi 

			WHERE 

				fi.service_request_type_id=SERVICE_TYPE_ID or  fi.source_object_type_id in (

					SELECT 

						distinct target_object_id  

					FROM  service_type_object_relation_lookup storl 

					WHERE storl.source_object_id = SERVICE_TYPE_ID )

		) st

	LEFT JOIN data_object_type_lookup dotl ON dotl.data_object_type_id= st.source_object_type_id 

	WHERE st.type='email'; 



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllEmailTemplateInfos`( 
	IN APP_ID INT(11),
    
	IN _PageIndex INT, 

   IN _PageSize INT,

   OUT _RecordCount INT)
BEGIN



SET @RowNumber:=0;

       

       CREATE TEMPORARY TABLE Results

       SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

			et.email_template_id,

			et.email_name,

			et.email_body,

			et.subject_line,

			et.is_active,

			et.deleted,

			et.created_by,

			et.last_updated_by,

			CONCAT(c.FirstName, ' ', c.LastName) AS CreatedByUserName,

			CONCAT(l.FirstName, ' ', l.LastName) AS LastUpdatedByUserName

		FROM

			email_template_info et

			JOIN

			aspnetusers c ON (c.id = et.created_by)

			JOIN

			aspnetusers l ON (l.id = et.last_updated_by)

		WHERE 
        et.app_id = APP_ID
        AND
        
        et.deleted = '0'

		ORDER BY et.created_on DESC;



SET _RecordCount =(SELECT COUNT(*) FROM Results);

 

		CASE WHEN 

        _pageSize <> -1 THEN

        

       SELECT * FROM Results

       WHERE RowNumber BETWEEN(_PageIndex -1) * _PageSize + 1 AND(((_PageIndex -1) * _PageSize + 1) + _PageSize) - 1;

		WHEN 

		 _pageSize = -1

         THEN

         SELECT * FROM Results;

     END CASE;

       DROP TEMPORARY TABLE Results;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllExecuteSteps`(
IN LIMIT_VALUE INT
)
BEGIN

SELECT
wssi.`workflow_step_stage_id` WorkflowStepStageId,
wssi.`service_request_id` ServiceRequestId,
wssi.`workflow_step_id` WorkflowStepId,
si.`name` StepName,
wssi.`service_request_json` ServiceRequestJson,
wssi.`process_time` ProcessTime
FROM
`workflow_step_stage_info` wssi,
workflow_step_info wsi
JOIN
step_info si ON (wsi.step_id = si.step_id AND si.step_type = 1 AND si.is_active = 1)
WHERE
wssi.process_time < NOW() AND
wssi.process_indicator = 1 AND
wssi.workflow_step_id = wsi.workflow_step_id AND
wssi.service_request_json IS NOT NULL
ORDER BY
wssi.created_by ASC
LIMIT LIMIT_VALUE;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllFieldsByServiceRequestID`(

IN SERVICE_REQUEST_TYPE_ID INT,

IN SOURCE_OBJECT_TYPE_ID VARCHAR(255),

IN FIELD_TYPE VARCHAR(255))
BEGIN

 CASE 

    WHEN SERVICE_REQUEST_TYPE_ID <> -1 THEN

	SELECT 

					fi.`field_id` Id,

					fi.`service_request_type_id` ServiceRequestTypeId,

					fi.`name` 'Name',

					fi.`display_name` DisplayName,

					fi.`type` TypeName,

					fi.`readonly` IsReadonly,

					fi.`unique` IsUnique,

					fi.`parent_field_id` ParentFieldId,

					fi.`cascading_parent_field_id` CascadingParentFieldId,

					fi.`display_type` DisplayType,

					fi.`created_by` CreatedBy,

					fi.`created_on` CreatedOn,

					fi.`last_updated_by` LastUpdatedBy,

					fi.`last_updated_on` LastUpdatedOn,

					fi.`random_key` RandomKey,

					fi.`formula_expression` FormulaExpression,

					fi.`formula_result_type` FormulaResultType,

					lvi.lookup_value_id 'LookupId',

					lvi.values 'Values',

					lvi.name LookupName,

					lvi.is_global LookupIsGlobal,

					CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

					CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName,

					COALESCE(fi.relation_id, 0) RelationId,

					COALESCE(dorl.relation_type, '') RelationshipType,

					COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,

					COALESCE(sdotl.display_name, '') SourceObjectTypeName,

					COALESCE(sdotl.plural_label, '') SourceObjectTypePluralLabel,

					COALESCE(tdotl.display_name, '') TargetObjectTypeName,

					COALESCE(tdotl.plural_label, '') TargetObjectTypePluralLabel,

					COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId 

				FROM

					field_info fi

				JOIN  aspnetusers c ON (c.Id = fi.created_by)

				JOIN  aspnetusers l ON (l.Id = fi.last_updated_by)

				LEFT JOIN field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id AND (fi.type = 'lookup' || fi.type = 'cascadinglookup'))

				LEFT JOIN lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)

				LEFT JOIN service_type_object_relation_lookup dorl ON (fi.relation_id = dorl.relation_id)

				LEFT JOIN data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id)

				LEFT JOIN data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id)

				WHERE

						fi.service_request_type_id = IF(SERVICE_REQUEST_TYPE_ID<>-1,SERVICE_REQUEST_TYPE_ID,fi.service_request_type_id) 

					AND

						fi.source_object_type_id = IF(SOURCE_OBJECT_TYPE_ID<>-1,SOURCE_OBJECT_TYPE_ID,fi.source_object_type_id) 

                    AND

						fi.type=IF(FIELD_TYPE<>-1,FIELD_TYPE,fi.type);

	ELSE

    SELECT 

					fi.`field_id` Id,

					fi.`service_request_type_id` ServiceRequestTypeId,

					fi.`name` 'Name',

					fi.`display_name` DisplayName,

					fi.`type` TypeName,

					fi.`readonly` IsReadonly,

					fi.`unique` IsUnique,

					fi.`parent_field_id` ParentFieldId,

					fi.`cascading_parent_field_id` CascadingParentFieldId,

					fi.`display_type` DisplayType,

					fi.`created_by` CreatedBy,

					fi.`created_on` CreatedOn,

					fi.`last_updated_by` LastUpdatedBy,

					fi.`last_updated_on` LastUpdatedOn,

					fi.`random_key` RandomKey,

					fi.`formula_expression` FormulaExpression,

					fi.`formula_result_type` FormulaResultType,

					lvi.lookup_value_id 'LookupId',

					lvi.values 'Values',

					lvi.name LookupName,

					lvi.is_global LookupIsGlobal,

					CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

					CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName,

					COALESCE(fi.relation_id, 0) RelationId,

					COALESCE(dorl.relation_type, '') RelationshipType,

					COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,

					COALESCE(sdotl.display_name, '') SourceObjectTypeName,

					COALESCE(sdotl.plural_label, '') SourceObjectTypePluralLabel,

					COALESCE(tdotl.display_name, '') TargetObjectTypeName,

					COALESCE(tdotl.plural_label, '') TargetObjectTypePluralLabel,

					COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId 

				FROM

					field_info fi

				JOIN  aspnetusers c ON (c.Id = fi.created_by)

				JOIN  aspnetusers l ON (l.Id = fi.last_updated_by)

				LEFT JOIN field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id AND (fi.type = 'lookup' || fi.type = 'cascadinglookup'))

				LEFT JOIN lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)

				LEFT JOIN service_type_object_relation_lookup dorl ON (fi.relation_id = dorl.relation_id)

				LEFT JOIN data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id)

				LEFT JOIN data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id)

				WHERE 

						FIND_IN_SET(fi.source_object_type_id, SOURCE_OBJECT_TYPE_ID) 

                    AND

						fi.type=IF(FIELD_TYPE<>-1,FIELD_TYPE,fi.type);

    

    END CASE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllFileTypes`()
BEGIN



SELECT  

	ft.file_type_id AS FileTypeId, 

	ft.type AS Type,

    ft.created_on AS CreatedOn,

    ft.created_by AS CreatedBy,

    ft.last_updated_by AS LastUpdatedBy,

    ft.last_updated_on AS LastUpdatedOn

FROM file_types ft;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllJobs`(
IN IS_PROCESS INT(1),
IN JOB_STATUS INT(1))
BEGIN
	
    SELECT  
			JEI.scheduler_id SchedulerId,
            JEI.execution_timestamp ExectutionTimestamp,
            JEI.last_run_time LastRunTime,
            JEI.last_run_results LastRunResults,
            JEI.status Jobstatus,
            JEI.is_process IsProcess
    FROM job_execution_info JEI
    WHERE 
		JEI.is_process = IF(IS_PROCESS <> -1,IS_PROCESS,JEI.is_process) 
    AND	JEI.status =IF(JOB_STATUS <> -1 ,JOB_STATUS,JEI.status) ; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllJobTypes`()
BEGIN
	SELECT
				JTL.job_type_id JobTypeId,
				JTL.name 	JobName
	FROM 
				job_type_lookup JTL;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllMenus`()
BEGIN

SELECT 

    mcx.menu_id AS MenuId,

    ml.name AS MenuName,

    ml.display_name AS MenuDisplayName,

    ml.url AS MenuURL,

    ml.css_class_name AS MenuCssClassName,

    mcx.component_id AS ComponentId,

    cl.name AS ComponentName,

    cl.display_name AS ComponentDisplayName,

    cl.url AS ComponentURL,

    cl.type AS ComponentType,

    cl.css_class_name AS ComponentCssClassName,

    mcx.menu_component_id AS MenuComponentId,

    mcx.sequence AS ComponentSequence,

     pl.permission_id AS PermissionId 

FROM

    menu_component_xref mcx

        JOIN

    component_lookup cl ON cl.component_id = mcx.component_id

        JOIN

    menu_lookup ml ON ml.menu_id = mcx.menu_id

    JOIN

	permission_lookup pl ON (pl.source_id = mcx.component_id AND pl.type = 'P');



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllMenusByRoleId`(IN ROLE_ID varchar(128))
BEGIN

SELECT 

    mcx.menu_id AS MenuId,

    ml.name AS MenuName,

    ml.display_name AS MenuDisplayName,

    ml.url AS MenuURL,

    ml.css_class_name AS MenuCssClassName,

    mcx.component_id AS ComponentId,

    cl.name AS ComponentName,

    cl.display_name AS ComponentDisplayName,

    cl.url AS ComponentURL,

    cl.type AS ComponentType,

    cl.css_class_name AS ComponentCssClassName,

    mcx.menu_component_id AS MenuComponentId,

    mcx.sequence AS ComponentSequence

FROM

    menu_component_access mca

        JOIN

    menu_component_xref mcx ON mca.menu_component_id = mcx.menu_component_id

        JOIN

    component_lookup cl ON cl.component_id = mcx.component_id

        JOIN

    menu_lookup ml ON ml.menu_id = mcx.menu_id

WHERE

    mca.role_id = ROLE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllMenusByUserName`(IN USERNAME varchar(150))
BEGIN



SELECT 

    urs.roleid

INTO @RoleID FROM

    users us

        JOIN

    userroles urs ON us.id = urs.userid

WHERE

    us.username = USERNAME;







SELECT 

    mcx.menu_id AS MenuId,

    ml.name AS MenuName,

    ml.display_name AS MenuDisplayName,

    ml.url AS MenuURL,

    ml.css_class_name AS MenuCssClassName,

    mcx.component_id AS ComponentId,

    cl.name AS ComponentName,

    cl.display_name AS ComponentDisplayName,

    cl.url AS ComponentURL,

    cl.type AS ComponentType,

    cl.css_class_name AS ComponentCssClassName,

    mcx.menu_component_id AS MenuComponentId,

    mcx.sequence AS ComponentSequence

FROM

    menu_component_access mca

        JOIN

    menu_component_xref mcx ON mca.menu_component_id = mcx.menu_component_id

        JOIN

    component_lookup cl ON cl.component_id = mcx.component_id

        JOIN

    menu_lookup ml ON ml.menu_id = mcx.menu_id

WHERE

    mca.role_id = @RoleID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllNotifications`(

IN USER_ID VARCHAR(100),

IN APP_ID INT(11)

)
BEGIN



	SET @WORKFLOW_SOURCE_TYPE_ID=-1; -- GET WORKFLOW REQUESTS 

    SET @STEPS_SOURCE_TYPE_ID=-1; -- GET STEPS REQUESTS 

    

	SELECT distinct NI.source_type_id INTO @WORKFLOW_SOURCE_TYPE_ID 

    FROM notification_info NI 

    WHERE NI.source_type_id=1 AND NI.user_id=USER_ID AND NI.status=1;

    

CASE WHEN (@WORKFLOW_SOURCE_TYPE_ID = 1) THEN    

		SELECT 

				NFI.notification_id 'NotificationId',

                NFI.user_id 'UserID',

                NFI.unread 'Unread',

                NFI.status 'NotificationStatus',

                NFI.source_type_id 'SourceTypeId' ,

                NFI.created_on 'CreatedOn' ,

                STL.message 'SourceTypeMessage',

                STL.source_url 'SourceTypeURL',

                WFI.name 'RequestName',

                WFI.workflow_id 'WorkFlowID',

                WFI.service_request_type_id 'ServiceRequestTypeID'

		FROM notification_info NFI 

        JOIN source_type_lookup STL ON(NFI.source_type_id=STL.source_type_id)

        JOIN workflow_info WFI ON(NFI.source_id=WFI.workflow_id 

		AND NFI.user_id=WFI.approver AND WFI.is_approved=0 AND WFI.is_default_version=0 AND WFI.deleted = 0)

        JOIN servicerequest_type_info SRTI ON(WFI.service_request_type_id=SRTI.service_request_type_id AND SRTI.app_id=APP_ID)

		WHERE  NFI.user_id=USER_ID AND NFI.status=1 

        ORDER BY  NFI.last_updated_on DESC;

ELSE

			SELECT 

				NFI.notification_id 'NotificationId',

                NFI.user_id 'UserID',

                NFI.unread 'Unread',

                NFI.status 'NotificationStatus',

                NFI.source_type_id 'SourceTypeId' ,

                NFI.created_on 'CreatedOn' ,

                STL.message 'SourceTypeMessage',

                STL.source_url 'SourceTypeURL',

                WFI.name 'RequestName',

                WFI.workflow_id 'WorkFlowID',

                WFI.service_request_type_id 'ServiceRequestTypeID'

		FROM notification_info NFI 

        JOIN source_type_lookup STL ON(NFI.source_type_id=STL.source_type_id)

        JOIN workflow_info WFI ON(NFI.source_id=WFI.workflow_id 

		AND NFI.user_id=WFI.approver AND WFI.is_approved=0 AND WFI.is_default_version=0 AND WFI.deleted = 0)

        JOIN servicerequest_type_info SRTI ON(WFI.service_request_type_id=SRTI.service_request_type_id AND SRTI.app_id=APP_ID)

		WHERE  NFI.user_id=USER_ID AND NFI.status=1

        ORDER BY  NFI.last_updated_on DESC;

    

END CASE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllObjectPermissions`(IN ROLE_ID varchar(200))
BEGIN

SELECT 

    pl.permission_id,

    pl.name,

    pl.permission_type_id,

    pl.display_name,

    pl.source_id,

    pl.type

FROM

     menu_component_access mca

        JOIN

     permission_lookup pl ON (mca.menu_component_id = pl.source_id AND pl.type = 'O')

WHERE

    mca.role_id = ROLE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllPermissionByRoleId`(IN ROLE_ID VARCHAR(128))
BEGIN

SELECT 

		rpx.role_id As RoleId,

		rpx.permission_id AS PermissionId,

		rpx.access_level AS AccessLevel

	FROM

		role_permission_xref rpx

	WHERE

		rpx.role_id = ROLE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllPermissionByType`(
IN P_TYPE char,
IN APP_IDS  LONGTEXT,
IN SOURCE_ID INT(11)
)
BEGIN

SELECT 

	 PL.permission_id AS PermissionId,
       
	 PL.permission_type_id AS PermissionTypeId,
     
     PL.name AS Name,

     PL.display_name AS DisplayName,

     PL.source_id AS SourceId,

     PL.type AS Type,

	 PL.is_system AS IsSystem 

FROM
    permission_lookup  PL
    
    JOIN data_object_type_lookup DOTL ON(( PL.source_id=DOTL.data_object_type_id and FIND_IN_SET(DOTL.app_id, APP_IDS)) OR PL.is_system=1 )
    
WHERE

    PL.type = P_TYPE
    
    AND 
    
    PL.source_id = IF(SOURCE_ID <> -1,SOURCE_ID,PL.source_id)
    
    GROUP BY PL.name;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllPermissionByUserName`(IN USER_NAME varchar(128))
BEGIN



SELECT 

    mcx.menu_id AS MenuId,

    ml.name AS MenuName,

    ml.display_name AS MenuDisplayName,

    ml.url AS MenuURL,

    ml.css_class_name AS MenuCssClassName,

    mcx.component_id AS ComponentId,

    cl.name AS ComponentName,

    cl.display_name AS ComponentDisplayName,

    cl.url AS ComponentURL,

    cl.type AS ComponentType,

    cl.css_class_name AS ComponentCssClassName,

    mcx.menu_component_id AS MenuComponentId,

    mcx.sequence AS ComponentSequence

FROM

    menu_component_access mca

        JOIN

    menu_component_xref mcx ON mca.menu_component_id = mcx.menu_component_id

        JOIN

    component_lookup cl ON cl.component_id = mcx.component_id

        JOIN

    menu_lookup ml ON ml.menu_id = mcx.menu_id

WHERE

    mca.role_id IN (SELECT 

            urs.roleid

        FROM

            users us

                JOIN

            userroles urs ON us.id = urs.userid

        WHERE

            us.UserName = USER_NAME)

GROUP BY mcx.menu_id , ml.name , ml.display_name , ml.url , ml.css_class_name , mcx.component_id , cl.name , cl.display_name , cl.url , cl.type , cl.css_class_name , mcx.menu_component_id , mcx.sequence;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllReports`(

 IN APP_ID INT(11),
 
 IN REPORT_ID INT,

 IN STATUS_ID INT

)
BEGIN

	 SELECT 
		RT.app_id AS AppId, 
		RT.report_type_id AS ReportTypeID, 
		RP.report_id AS ReportID,
		RT.name AS ReportTypeName,
        RT.description AS ReportTypeDescription, 
        RP.name AS ReportName, 
        RP.description AS ReportDescription,
		RT.data_object_type_id AS DataObjectTypeID,
		RP.config_json AS Config_json,
		RP.query_string AS QueryString,
		RP.datasource_id AS DataSourceId, 
        DS.connection_string AS ConnectionString,
        RP.is_Active AS IsActive
	FROM report_types RT
	JOIN report_info RP ON RT.report_type_id = RP.report_type_id AND RP.is_deleted = 0
    LEFT JOIN datasources DS ON RP.datasource_id = DS.datasource_id
    WHERE RT.app_id = IF(APP_ID <> -1, APP_ID,RT.app_id) 
    AND	RP.report_id = IF(REPORT_ID <> -1, REPORT_ID,RP.report_id)
    AND RT.is_deleted = 0
	AND RP.is_active = IF(STATUS_ID <> -1, STATUS_ID,RP.is_active) 
    AND RT.is_active = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllRoles`()
BEGIN

SELECT 

    role.Id as RoleId,

    role.Name as Name,

    role.Description as Description

FROM

    roles role;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllRolesByAppIds`(
IN AppIds longtext,
IN CREATED_BY lONGTEXT,
IN ACCOUNT_ID INT(11)
)
BEGIN

CASE WHEN ACCOUNT_ID = -1 THEN
			SELECT 
				distinct
				ra.role_id RoleId,

				ar.`Name` Name,

				ar.Description Description

			FROM
				roles_app_xref ra
			LEFT JOIN  	aspnetroles ar ON  ra.role_id = ar.Id 

			WHERE 
						ar.CreatedBy =IF(CREATED_BY <> -1,CREATED_BY,ar.CreatedBy) 
			AND
						FIND_IN_SET(ra.app_id, AppIds);  

   ELSE
		SELECT  distinct
				RA.role_id RoleId,

				ANR.`Name` Name,

				ANR.Description Description

			FROM
            accounts_app_xref	AAX
            INNER JOIN  roles_app_xref RA ON  AAX.app_id = RA.app_id   
			LEFT JOIN  	aspnetroles ANR ON  RA.role_id = ANR.Id              
 
			WHERE 
						AAX.accounts_id = ACCOUNT_ID
			AND          
						ANR.CreatedBy =IF(CREATED_BY <> -1,CREATED_BY,ANR.CreatedBy); 
			 
   END CASE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllRolesByStepId`(IN STEP_ID INT)
BEGIN

	SELECT 

		role.Id as RoleId,

		role.Name as Name,

		role.Description as Description

	FROM

		roles role,

		step_roles_xref srx

	where role.Id = srx.role_id  and srx.step_id = STEP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllRules`()
BEGIN

SELECT 

    ri.rule_id AS RuleId,

    ri.name AS RuleName,

    ri.service_request_type_id AS ServiceRequestTypeId,

    ri.rule_type_id RuleTypeId,

    rtl.lookup_column RuleTypeName,

    ri.active_from ActiveFrom,

    ri.active_until ActiveUntil,

    ri.is_active IsActive,

    ri.workflow_id WorkflowId,

    wi.name WorkflowName,

    fi.field_id FieldId,

    fi.name AS FieldName,

    fi.type AS FieldType,

    rpi.rule_parameter_id AS RuleParameterId,

    rpi.rule_parameter_type_id AS RuleParameterTypeId,

    rpi.operator AS Operator,

    rpi.value AS Value,

    rpi.range_start AS RangeStart,

    rpi.range_end AS RangeEnd,

    rpi.conjunction AS Conjunction

FROM

    rule_info ri,

    rule_parameter_info rpi,

    rule_type_lookup rtl,

    workflow_info wi,

    field_info fi

WHERE

        ri.rule_id = rpi.rule_id

        AND ri.deleted = 0

        AND ri.rule_type_id = rtl.rule_type_id

        AND ri.workflow_id = wi.workflow_id

        AND rpi.rule_parameter_type_id = fi.field_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllSchedulers`(
IN SCHEDULER_INFO_ID  INT(11),
IN APP_ID  INT(11)  
)
BEGIN
	SELECT
				SI.scheduler_id 	SchedulerId,
				SI.app_id 	AppId,
				SI.name 	SchedulerName,  
                SI.description 	SchedulerDescription,  
				SI.job_type 	JobType,  
                SI.service_request_type_id 	ServiceRequestTypeId,
                SI.config_json 	ConfigJson,
                SI.schedule_type_id  SchedulerTypeId,
                SI.weekdays 		Weekdays,                   
                SI.occurance_number 	OccuranceNumber,
				SI.repeat_after 	RepeatAfter,  
                SI.repeat_after_units 	RepeatAfterUnits,  
				SI.start_time 	StartTime,  
                SI.time_zone 	Timezone,  
                SI.data_source_type_id 	DatasourceTypeId,
                
				SI.is_active 	IsActive,
				SI.is_delete 	IsDelete, 
				SI.created_by 	CreatedBy,
				SI.created_on 	CreatedOn,
				SI.last_updated_by 	LastUpdatedBy,
				SI.last_updated_on 	LastUpdatedOn,
				CONCAT(c.FirstName,' ', c.LastName) CreatedByName,
				CONCAT(l.FirstName,' ', l.LastName) LastUpdatedByName
			FROM
				schedulers_info SI,
                aspnetusers c, 
				aspnetusers l
		 WHERE
				SI.app_id =IF(APP_ID <> -1, APP_ID, SI.app_id) 
			AND
				SI.scheduler_id =IF(SCHEDULER_INFO_ID <> -1, SCHEDULER_INFO_ID, SI.scheduler_id)
			AND
				SI.created_by = c.Id
			AND
				SI.last_updated_by = l.id
            AND
				SI.is_active = 1    
			AND
				SI.is_delete = 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllScheduleTypes`()
BEGIN
	SELECT
				STL.schedule_type_id ScheduleTypeId, 
				STL.name ScheduleTypeName
	FROM
				schedule_type_lookup STL;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllServiceTypes`(IN APP_ID int)
BEGIN

SELECT 

    service_request_type_id,

    name,

    description,

    created_by,

    app_id,

    created_on,

    last_updated_on,

    last_updated_by,

    deleted,

    css_class_name,

    is_active,

    short_name,

    CONCAT(FirstName, LastName) AS CreatedByUserName

FROM

    servicerequest_type_info si,

    aspnetusers usr

WHERE

	si.app_id = APP_ID

    AND

    si.created_by = usr.id

    

        AND si.deleted = '0'

ORDER BY si.created_on DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllServiceTypesByUserId`(IN APP_ID int,IN USER_ID VARCHAR(255),IN ROW_COUNT INT)
BEGIN
SELECT 
    service_request_type_id,
    name,
    description,
    created_by,
    app_id,
    created_on,
    last_updated_on,
    last_updated_by,
    deleted,
    css_class_name,
    is_active,
    short_name,
    CONCAT(FirstName, LastName) AS CreatedByUserName
FROM
    servicerequest_type_info si,
    aspnetusers usr
WHERE
    si.app_id = APP_ID
        AND si.last_updated_by = USER_ID
        AND si.deleted = '0'
        GROUP BY si.service_request_type_id
ORDER BY si.last_updated_on DESC LIMIT 6;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllSMSNotificationsProcessInfo`(

IN PROCESSIND INT(1))
BEGIN

	SELECT

		SNP.notification_id NotificationId,

		SNP.workflow_step_stage_id WorkflowStepStageId,

		SNP.user_id UserId, 

		SNP.sms_body SMSBody,

		SNP.process_indicator ProcessIndicator,

		u.PhoneNumber PhoneNumber,

		SNP.created_by CreatedBy,

		SNP.created_on CreatedOn,

		SNP.last_updated_by LastUpdatedBy,

		SNP.last_updated_on LastUpdatedOn,

		CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

		CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

	FROM

		sms_notification_process_info SNP

		JOIN

		aspnetusers u ON (u.Id = SNP.user_id)

		JOIN

		aspnetusers c ON (c.Id = SNP.created_by)

		JOIN

		aspnetusers l ON (l.Id = SNP.last_updated_by)

	WHERE

		SNP.process_indicator = PROCESSIND;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllStagingRecords`(IN RECORD_LIMIT int)
BEGIN

 SELECT 

 wssi.workflow_step_stage_id WorkflowStepStageId,

    wssi.service_request_id  ServiceRequestId, 

    wssi.workflow_step_id WorkflowStepId,

    wssi.process_indicator ProcessorIndicator,

    wssi.created_on CreatedOn,

    wssi.last_updated_on LastUpdatedOn,

	wssi.role_id RoleId,

    si.name StepName

FROM 

 workflow_step_stage_info wssi, step_info si, workflow_step_info wsi

where 

 si.step_id = wsi.step_id

 AND

 wsi.workflow_step_id = wssi.workflow_step_id

    AND

    wssi.process_indicator = 1

ORDER BY

	wssi.created_on desc 

LIMIT RECORD_LIMIT;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllStagingRecordsByUserID`(

IN APP_ID int(11),IN USER_ID_VALUE varchar(255))
BEGIN



SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





SELECT 

    asur.RoleId

INTO @USER_ROLE_ID FROM

    aspnetuserroles asur

WHERE

    asur.UserId = USER_ID_VALUE;



SELECT 

    asr.Name

INTO @USER_ROLE_NAME FROM

    aspnetroles asr

WHERE

    asr.Id = @USER_ROLE_ID;



SELECT 

    permission_id

INTO @VIEW_ALL_PERMISSION_ID FROM

    permission_lookup

WHERE

    name IN ('VIEW_ALL');

 

-- select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



SELECT 

    COUNT(rpx.role_id)

INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

    role_permission_xref rpx

WHERE

    rpx.permission_id = @VIEW_ALL_PERMISSION_ID

        AND rpx.role_id = @USER_ROLE_ID

GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;



SELECT 

    COUNT(upx.User_Id)

INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

    user_permission_xref upx

WHERE

    (upx.permission_id = @VIEW_ALL_PERMISSION_ID

        AND upx.User_Id = USER_ID_VALUE)

GROUP BY upx.User_Id;







SELECT

	sri.service_request_type_id 'ServiceRequestTypeID',

	srti.app_id appId,

	wssi.workflow_step_stage_id WorkflowStepStageId,

	wssi.service_request_id ServiceRequestId,

	wssi.workflow_step_id WorkflowStepId,

	wssi.process_indicator ProcessorIndicator,

	wssi.created_on CreatedOn,

	wssi.last_updated_on LastUpdatedOn,

	wssi.role_id RoleId,

	wsi.name StepName,

	si.is_dynamic_view IsDynamic,

	wsai.action_id 'StepActionId',

	sai.name 'ActionName',

	bi.benificiary_id 'BeneficiaryId',

	bi.first_name 'FirstName',

	bi.middile_initial 'MiddleInitial',

	bi.last_name 'LastName',

	bi.email 'Email'

FROM

	permission_lookup pl

	LEFT JOIN

	workflow_step_stage_info wssi ON (pl.source_id = wssi.workflow_step_id  AND wssi.process_indicator = 1 AND wssi.process_time < NOW())

	LEFT JOIN

	workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)

	LEFT JOIN

	workflow_step_action_info wsai ON (wsai.workflow_step_id = wsi.workflow_step_id)

	LEFT JOIN

	step_action_info sai ON (sai.step_action_id = wsai.action_id)

	LEFT JOIN

	step_info si ON (si.step_id = wsi.step_id)

	LEFT JOIN

	servicerequest_info sri ON (sri.service_request_id = wssi.service_request_id AND sri.status = 1)

	LEFT JOIN

	benificiary_info bi ON(sri.benificiary_id=bi.benificiary_id)

	LEFT JOIN

	servicerequest_type_info srti ON (srti.service_request_type_id = sri.service_request_type_id)

WHERE

CASE 

				WHEN @USER_HAS_VIEW_ALL_PERMISSION = 0 THEN 

			(pl.permission_id IN (

			SELECT 

				ugPermissions.permission_id

			FROM

				usergroup_permission_xref ugPermissions

			WHERE

				ugPermissions.user_group_id IN (SELECT 

						user_group_id

					FROM

						user_usergroup_xref

					WHERE

						user_id = USER_ID_VALUE)

						

				UNION ALL

				

				SELECT 

				upx.permission_id

			FROM

				user_permission_xref upx

			WHERE

				upx.User_Id = USER_ID_VALUE

				

			UNION ALL

			

			SELECT 

				rpx.permission_id

			FROM

				role_permission_xref rpx

			WHERE

				rpx.role_id IN (SELECT asur.RoleId FROM aspnetuserroles asur WHERE asur.UserId = USER_ID_VALUE)))

			ELSE 

				TRUE

			END

AND srti.app_id = APP_ID

ORDER BY wssi.created_on DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllStagingRecordsForWorkflowStepIdByUserID`(IN userId varchar(128), IN workflowStepId INT)
BEGIN

	SELECT 

	wssi.workflow_step_stage_id WorkflowStepStageId,

    wssi.service_request_id  ServiceRequestId, 

    wssi.workflow_step_id WorkflowStepId,

    wssi.process_indicator ProcessorIndicator,

    wssi.created_on CreatedOn,

    wssi.last_updated_on LastUpdatedOn,

	wssi.role_id RoleId,

    wssi.created_by CreatedBy,

    wssi.last_updated_by LastUpdatedBy,

    si.name StepName,

    wi.name WorkflowName,

    CONCAT_WS(' ', u.FirstName, u.LastName) AS CreatedByName

    

	FROM 

		workflow_step_stage_info wssi, step_info si, workflow_step_info wsi, 

        workflow_info wi, users u

	WHERE 

		si.step_id = wsi.step_id

	AND

		wsi.workflow_step_id = wssi.workflow_step_id

	AND

		wsi.workflow_step_id = workflowStepId

    AND  

		wi.workflow_id = wsi.workflow_id

    AND 

		u.Id = wssi.created_by

    AND    

		wssi.process_indicator = 1

	AND

		wssi.workflow_step_id in 

			(SELECT pl.source_id AS workflow_step_id FROM permission_lookup pl

			JOIN role_permission_xref rpx

			ON (pl.permission_id = rpx.permission_id)

				WHERE rpx.role_id IN

				( SELECT ur.RoleId FROM userroles ur WHERE ur.UserId = userId)

			AND pl.type = "R")   

	ORDER BY wssi.created_on desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllStepInfo`()
BEGIN

	SELECT * FROM `xproc`.`step_info` si

    ORDER BY si.name;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllStepsAndStepActions`(

	IN SERVICE_TYPE_ID INT,

	IN STEP_CATEGORY_ID INT,

	IN _PageIndex INT, 

    IN _PageSize INT,

    OUT _RecordCount INT 

)
BEGIN

SET @RowNumber:=0;



DROP TEMPORARY TABLE IF EXISTS Results;

CREATE TEMPORARY TABLE Results

SELECT 

	@RowNumber:=@RowNumber+1 AS RowNumber,

    s.step_id,

    s.name AS step_name,

    s.short_name,

    s.implentor_class,

    s.namespace,

    s.css_class_name,

    s.short_description,

    s.long_description,

    s.sequence,

    s.step_type,

    s.is_global,

    s.is_active,

    s.is_dynamic_view,

    s.is_custom,

    s.is_disable_sla,

    s.show_document,

    s.show_contact,

    s.created_on,

    s.last_updated_on,

    s.created_by,

    s.last_updated_by,

    s.sla,

    s.sla_unit,

    s.is_system,

    s.sys_step_type,

    a.step_action_id,

    a.name AS step_action_name,

    a.description AS step_action_desctiption,

    s.service_request_type_id AS service_type_id,

    concat(c.FirstName, ' ', c.LastName) 'CreatedByName',

    concat(l.FirstName, ' ', l.LastName) 'LastUpdatedByName',

    scl.step_category_id 'StepCategoryId',

    scl.name  'StepCategoryName'

FROM

    step_info s

       LEFT JOIN

    step_action_info a ON s.step_id = a.step_id

    LEFT JOIN aspnetusers c ON (s.created_by = c.Id)

    LEFT JOIN aspnetusers l ON (s.last_updated_by = l.Id)

    LEFT JOIN step_category_lookup scl on scl.step_category_id= s. step_category_id 

WHERE

    (s.is_global = 1       

        OR s.service_request_type_id = SERVICE_TYPE_ID ) 

        AND 

			s.is_deleted = 0 

		AND

        CASE WHEN  STEP_CATEGORY_ID = -1 

			THEN s.step_category_id  IS NOT NULL   /*Expecting all the steps should have the category specified*/

            ELSE s.step_category_id = STEP_CATEGORY_ID

		END;

		

SET _RecordCount =(SELECT COUNT(*) FROM Results);

	

		CASE WHEN 

        _pageSize <> -1 THEN

        

       SELECT * FROM Results

       WHERE RowNumber BETWEEN(_PageIndex -1) * _PageSize + 1 AND(((_PageIndex -1) * _PageSize + 1) + _PageSize) - 1;

		WHEN 

		 _pageSize = -1

         THEN

         SELECT * FROM Results;

       

       END CASE;

       DROP TEMPORARY TABLE Results;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllTypePermissionsByUser`(IN USER_ID  varchar(128), IN ROLE_ID varchar(128))
BEGIN



SELECT 

	

    pl.permission_id,

    pl.name,

    pl.permission_type_id,

    pl.display_name,

    pl.source_id,

    pl.`type`

    

FROM

	user_permission_xref upx JOIN permission_lookup pl ON (pl.permission_id = upx.permission_id)

WHERE 

	upx.User_Id = @USER_ID

GROUP BY upx.permission_id

    

UNION



SELECT 

    pl.permission_id,

    pl.name,

    pl.permission_type_id,

    pl.display_name,

    pl.source_id,

    pl.`type`

FROM

	role_permission_xref rpx JOIN permission_lookup pl ON (pl.permission_id = rpx.permission_id)

WHERE 

	rpx.role_id = @ROLE_ID

GROUP BY rpx.permission_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllUnAssignedRolesByStepId`(IN STEP_ID INT)
BEGIN

	SELECT 

    role.Id as RoleId,

    role.Name as Name,

    role.Description as Description

FROM

    roles role

WHERE role.Id NOT IN 

( SELECT role_id FROM step_roles_xref srx WHERE srx.step_id = STEP_ID);



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllUser_Preferences`(
IN USER_ID VARCHAR(100),
IN SOURCE_TYPE VARCHAR(10),
IN SOURCE_TYPE_ID INT    
)
BEGIN

	SELECT 
		UP.user_preference_id 'UserPrefrenceID',
        UP.user_id 'UserID', 
        UP.source_type_id 'SourceTypeID',
        UP.grid_view_display_type 'GridviewDisplaytypeID',
        UP.field_id 'FieldID',
        UP.source_type 'SourceType'
    FROM
		user_preference UP
	WHERE 
		UP.user_id = USER_ID
    AND
		UP.source_type=IF(SOURCE_TYPE <> -1,SOURCE_TYPE,UP.source_type)
    AND
		UP.source_type_id=IF(SOURCE_TYPE_ID <> -1,SOURCE_TYPE_ID,UP.source_type_id);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllUserComments`(
IN USER_ID VARCHAR(100),
IN SOURCE_ID INT ,  
IN ID  INT,
IN SOURCE_TYPE_ID  INT )
BEGIN
	SELECT 
		UC.id 'CommentID',
        UC.source_id 'SourceID', 
        UC.source_type_id 'SourceTypeID',
        UC.message 'Comments',
        UC.created_by 'CreatedBy',
        UC.created_on 'CreatedOn',
		UC.last_updated_on 'LastUpdatedOn',
        UC.last_updated_by 'LastUpdatedBy',
        UC.is_delete 'IsDelete',
        concat(c.FirstName,' ', c.LastName) 'CreatedByName',
		concat(l.FirstName,' ', l.LastName) 'LastUpdatedByName'
    FROM
		user_comments UC join
        
        aspnetusers c join

		aspnetusers l
	WHERE 
		 UC.created_by = IF(USER_ID <> -1,USER_ID,UC.created_by)
	AND
		UC.id=IF(ID <> -1,ID,UC.id)
    AND
		UC.source_id=IF(SOURCE_ID <> -1,SOURCE_ID,UC.source_id)
    AND 
		UC.source_type_id=IF(SOURCE_TYPE_ID <> -1,SOURCE_TYPE_ID,UC.source_type_id)
    AND
		 UC.created_by = c.Id
    AND
		 UC.last_updated_by = l.id
    AND
		 UC.is_delete = 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllUsersByAccountId`(

IN accountId int(11),

IN loggedUserID varchar(100)  

)
BEGIN

SELECT 
	distinct
	aux.accounts_id AccountId,

    ai.org_title  AccountName,

    ai.primary_database_identifier OrgPrimaryIdentifier, 
    
     ai.secondary_database_identifier OrgSecondaryIdentifier, 

    ai.profile_image ProfileImage,

    au.Id UserId,

    au.UserName UserName,

    au.FirstName FirstName,

    au.LastName LastName,

    au.Email Email,

	ai.is_deleted IsDeleted,
    
    ai.is_suspended IsSuspended,
    
    COALESCE(au.PhoneNumber,'N\A') PhoneNumber,

	COALESCE((SELECT CONCAT(ANU.FirstName,' ',ANU.LastName)  from aspnetusers ANU where ANU.Id=au.ReportingTo),'N\A') ReportingTo,

    (SELECT 

            GROUP_CONCAT(anr.Name)

        FROM

            aspnetroles anr

                INNER JOIN

            users_app_xref uax ON anr.id = uax.role_id

        WHERE

            uax.user_id = ua.user_id) AS 'Roles'

FROM

    aspnetusers au

		INNER JOIN

	accounts_users_xref aux ON au.Id = aux.Id 

		INNER JOIN

    accounts_info ai ON aux.accounts_id = ai.accounts_id    

        LEFT JOIN

    users_app_xref ua ON au.Id = ua.user_id

WHERE

    aux.accounts_id =IF(accountId <> -1, accountId, aux.accounts_id)  

    AND

    AUX.Id = IF(loggedUserID <> -1, loggedUserID, AUX.Id);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllUsersByAppId`(

IN AppId int(11),

IN USER_IDS VARCHAR(500)

)
BEGIN

SELECT

	au.Id UserId,

	au.UserName UserName,

	au.FirstName FirstName,

	au.LastName LastName,

	au.Email Email,

	COALESCE(au.PhoneNumber,'N\A') PhoneNumber,

	COALESCE((SELECT CONCAT(ANU.FirstName,' ',ANU.LastName)    from aspnetusers ANU where ANU.Id=au.ReportingTo),'N\A') ReportingTo,

	(SELECT

	GROUP_CONCAT(anr.Name)

	FROM

	aspnetroles anr

	INNER JOIN

	users_app_xref uax ON anr.id = uax.role_id

	WHERE

	uax.user_id = ua.user_id and uax.app_id = AppId) AS 'Roles'



FROM

	aspnetusers au

	LEFT JOIN

	users_app_xref ua ON au.Id = ua.user_id

WHERE



  CASE WHEN AppId <> -1 THEN

	ua.app_id = IF(AppId <> -1, AppId, ua.app_id) 

  ELSE

	FIND_IN_SET(au.Id, USER_IDS)

  END;  

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllWatchList`(
IN WATCH_LIST_ID INT(11),
IN DATA_OBJECT_TYPE_ID INT(11),
IN APP_ID INT(11)
)
BEGIN  
		SELECT
				WLI.watch_list_id WatchListID,
				WLI.name WatchListName,  
                WLI.css_class_name CssClassName,  
				WLI.report_config ReportConfig,  
                DOTL.data_object_type_id DataObjectTypeID,
                DOTL.data_source_id DataSourceID,
                DOTL.schema_name DataSourceSchemaName,
                DOTL.name DataObjectName,                
				WLI.is_active IsActive,
				WLI.is_delete IsDelete, 
				WLI.created_by CreatedBy,
				WLI.created_on CreatedOn,
				WLI.last_updated_by LastUpdatedBy,
				WLI.last_updated_on LastUpdatedOn,
				CONCAT(c.FirstName,' ', c.LastName) CreatedByName,
				CONCAT(l.FirstName,' ', l.LastName) LastUpdatedByName
			FROM
				watch_list_info WLI
				JOIN 
                data_object_type_lookup DOTL 
					ON (WLI.source_object_type_id = DOTL.data_object_type_id AND DOTL.app_id = APP_ID),
				aspnetusers c,
				aspnetusers l
		 WHERE
				WLI.watch_list_id =IF(WATCH_LIST_ID <> -1, WATCH_LIST_ID, WLI.watch_list_id)
			AND
				WLI.source_object_type_id =IF(DATA_OBJECT_TYPE_ID <> -1, DATA_OBJECT_TYPE_ID, WLI.source_object_type_id)
			AND
				WLI.created_by = c.Id
			AND
				WLI.last_updated_by = l.id
			AND
				WLI.is_delete = 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllWorkflows`()
BEGIN

SELECT 

    w.workflow_id as 'WorkflowId',

    w.name as 'Name',

    w.short_description as 'ShortDescription',

    w.long_description as 'LongDescription',

    w.is_active as 'IsActive',

    w.service_request_type_id as 'ServiceTypeId',

    w.active_from as 'ActiveFrom',

    w.active_until as 'ActiveUntil',

    w.created_by as 'CreatedBy',

    u.username as 'CreatedUserName',

    w.created_on as 'CreatedOn',

    w.last_updated_on as 'LastUpdatedOn',

    w.last_updated_by as 'LastUpdatedBy',

    u.username AS 'LastUpdatedUserName',

    w.deleted as 'Deleted'

FROM

    `xproc`.`workflow_info` w,

    `xproc`.`users` u

WHERE

		w.deleted = 0

        AND u.id = w.created_by

        AND u.id = w.last_updated_by

ORDER BY w.last_updated_on DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllWorkflowsByServiceTypeId`(

IN SERVICE_TYPE_ID INT,

IN DEFAULT_VERSION INT,

IN IS_APPROVED INT,

IN APPROVER_ID VARCHAR(255),

IN WORKFLOW_TYPE_ID INT

)
BEGIN

SELECT

w.workflow_id AS 'Id',

w.parent_workflow_id 'ParentWorkFlowID',

w.name AS 'Name',

w.short_description AS 'ShortDescription',

w.long_description AS 'LongDescription',

w.is_active AS 'Active',

w.service_request_type_id AS 'ServiceTypeId',

w.active_from AS 'ActiveFrom',

w.active_until AS 'ActiveUntil',

w.created_by AS 'CreatedBy',

CONCAT(C.FirstName, ' ', C.LastName) AS 'CreatedByName',

CONCAT(L.FirstName, ' ', L.LastName) AS 'LastUpdatedByName',

w.created_on AS 'CreatedOn',

w.last_updated_on AS 'LastUpdatedOn',

w.last_updated_by AS 'LastUpdatedBy',

w.deleted AS 'Deleted',

w.is_default_version AS 'IsDefaultVersion',

w.is_approved AS 'IsApproved',

w.approver AS 'Approver',

w.requested_by 'RequestedBy',

w.is_default 'IsDefault'

FROM

workflow_info w

LEFT JOIN

aspnetusers C ON (c.id = w.created_by)

LEFT JOIN

aspnetusers L ON (l.id = w.last_updated_by)

WHERE

w.deleted = 0

AND w.service_request_type_id = IF(SERVICE_TYPE_ID <> -1, SERVICE_TYPE_ID , w.service_request_type_id)

AND w.is_default_version = IF(DEFAULT_VERSION <> -1, DEFAULT_VERSION , w.is_default_version)

AND w.is_approved = IF(IS_APPROVED <> -1, IS_APPROVED , w.is_approved)

AND w.approver = IF(APPROVER_ID <> -1, APPROVER_ID , w.approver)

AND w.workflow_type_id = IF(WORKFLOW_TYPE_ID <> -1, WORKFLOW_TYPE_ID , w.workflow_type_id)

UNION



SELECT

w.workflow_id AS 'Id',

w.parent_workflow_id 'ParentWorkFlowID',

w.name AS 'Name',

w.short_description AS 'ShortDescription',

w.long_description AS 'LongDescription',

w.is_active AS 'Active',

w.service_request_type_id AS 'ServiceTypeId',

w.active_from AS 'ActiveFrom',

w.active_until AS 'ActiveUntil',

w.created_by AS 'CreatedBy',

CONCAT(C.FirstName, ' ', C.LastName) AS 'CreatedByName',

CONCAT(L.FirstName, ' ', L.LastName) AS 'LastUpdatedByName',

w.created_on AS 'CreatedOn',

w.last_updated_on AS 'LastUpdatedOn',

w.last_updated_by AS 'LastUpdatedBy',

w.deleted AS 'Deleted',

w.is_default_version AS 'IsDefaultVersion',

w.is_approved AS 'IsApproved',

w.approver AS 'Approver',

w.requested_by 'RequestedBy',

w.is_default 'IsDefault'

FROM

workflow_info w

LEFT JOIN

aspnetusers C ON (c.id = w.created_by)

LEFT JOIN

aspnetusers L ON (l.id = w.last_updated_by)

WHERE

w.deleted = 0

AND w.parent_workflow_id=w.workflow_id

AND w.service_request_type_id = IF(SERVICE_TYPE_ID <> -1, SERVICE_TYPE_ID , w.service_request_type_id)

AND w.is_default_version = 0

AND w.is_approved = -1

AND w.approver = IF(APPROVER_ID <> -1, APPROVER_ID , w.approver)

AND w.workflow_type_id = IF(WORKFLOW_TYPE_ID <> -1, WORKFLOW_TYPE_ID , w.workflow_type_id);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_AllWorkFlowVersionByWorkFlowID`(

IN WORK_FLOW_ID INT(11))
BEGIN

	SELECT 

			WFI.workflow_id 'Id', 

            WFI.parent_workflow_id 'ParentWorkFlowID',

            WFI.NAME 'Name',

            WFI.long_description 'LongDescription',

            WFI.version_name 'VersionName',

            WFI.version_notes 'VersionNotes',

			WFI.is_default_version 'IsDefaultVersion',

            WFI.is_approved 'IsApproved', 

            WFI.approver_comments 'ApproverComments', 

            WFI.created_by 'CreatedBy', 

            WFI.created_on 'CreatedOn', 

            WFI.last_updated_on 'LastUpdatedOn', 

			WFI.last_updated_by 'LastUpdatedBy'

	FROM 

			workflow_info WFI 

    WHERE WFI.parent_workflow_id=WORK_FLOW_ID AND WFI.deleted=0;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ApplicationUsers`(Appid INT(11))
BEGIN

SELECT  

	ANU.id as 'UserId', 

    CONCAT(ANU.FirstName ,' ', ANU.LastName) as 'FullName',

    UAX.app_id as 'AppId',

	AI.name  as 'Name'

FROM users_app_xref UAX

INNER JOIN aspnetusers ANU ON UAX.user_id=ANU.Id

INNER JOIN app_info AI ON UAX.app_id=AI.app_id

WHERE UAX.app_id=@Appid;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_BatchInfoById`(IN BATCH_ID INT)
BEGIN

SELECT 

	SRI.`service_request_id` ServiceRequestID ,

    SRI.`service_request_type_id` ServiceRequestTypeID , 

	BI.`batch_id` BatchID,

    BI.`account_id` AccountID,
    
	COALESCE(0,BI.`mapper_id`) MapperId,
    
	COALESCE(null,STDM.`name`) MapperName,

	BI.`document_id` DocumentID,

    BI.`document_name` DocumentName,    

	BI.`document_path` DocumentPath,

	BI.`document_type` DocumentType,

	BI.`status` Status,
    
    BI.`errors` Errors,

	BI.`created_by` CreatedBy,

	BI.`created_on` CreatedOn,

	BI.`last_updated_by` LastUpdatedBy,

	BI.`last_updated_on` LastUpdatedOn,

	concat(c.FirstName,' ', c.LastName) CreatedByName,

    concat(l.FirstName,' ', l.LastName) LastUpdatedByName

FROM `batch_info` BI

	INNER JOIN `servicerequest_info` SRI ON BI.batch_id=SRI.batch_id
	
    LEFT JOIN  `servicerequest_type_data_mapper_info` STDM ON BI.mapper_id = STDM.data_mapper_id,
    
    aspnetusers c,

    aspnetusers l
    

WHERE 

	 BI.`batch_id` = IF(BATCH_ID <> -1, BATCH_ID, BI.`batch_id`)

AND

    BI.created_by = c.Id

AND

    BI.last_updated_by = l.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_BeneficiariesByLimit`(IN LIMIT_COUNT int)
BEGIN

SELECT `benificiary_id` BenificiaryId,

    `benificiary_type` BenificiaryType,

    `first_name` FirstName,

    `last_name` LastName,

    `middile_initial` MiddleInitial,

    `address_line_1` AddressLine1,

    `address_line_2` AddressLine2,

    `city` City,

    `state` State,

    `country_code` CountryCode,

    `zipcode` ZipCode,

    `phone_number` PhoneNumber,

    `fax_number` FaxNumber,

     b.`email` Email,

    `date_of_birth` DateOfBirth,

    `gender` Gender,

    `additional_fields` AdditionalFields,

    `org_title` OrgTitle,

    `created_by` CreatedBy,

    concat(c.FirstName,' ', c.LastName) CreatedByName,

    concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

    `last_updated_by` LastUpdatedBy,

    `created_on` CreatedOn,

    `last_updated_on` LastUpdatedOn,

    `is_deleted` IsDeleted

FROM 

	`benificiary_info` b,

    aspnetusers c,

    aspnetusers l

WHERE 

	b.created_by = c.Id

    AND

    b.last_updated_by = l.id

    AND

    b.is_deleted = 0

LIMIT LIMIT_COUNT;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_BenificiaryById`(IN BENIF_ID INT)
BEGIN

SELECT `benificiary_id` BenificiaryId,

    `benificiary_type` BenificiaryType,

    `first_name` FirstName,

    `last_name` LastName,

    `middile_initial` MiddleInitial,

    `address_line_1` AddressLine1,

    `address_line_2` AddressLine2,

    `city` City,

    `state` State,

    `country_code` CountryCode,

    `zipcode` ZipCode,

    `phone_number` PhoneNumber,

    `fax_number` FaxNumber,

    b.`email` Email,

    `date_of_birth` DateOfBirth,

    `gender` Gender,

    `additional_fields` AdditionalFields,

    `org_title` OrgTitle,

    `created_by` CreatedBy,

    concat(c.FirstName,' ', c.LastName) CreatedByName,

    concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

    `last_updated_by` LastUpdatedBy,

    `created_on` CreatedOn,

    `last_updated_on` LastUpdatedOn,

    `is_deleted` IsDeleted

FROM 

	`benificiary_info` b,

    aspnetusers c,

    aspnetusers l

WHERE 

	benificiary_id = IF(BENIF_ID <> -1, BENIF_ID, benificiary_id)

    AND

    b.created_by = c.Id

    AND

    b.last_updated_by = l.id

    AND

    b.is_deleted = IF(BENIF_ID <> -1, is_deleted, 0);

	

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ChildObjectDetailsByParentObjectTypeID`(

IN SOURCE_ID INT(11), 

IN SOURCE_TYPE_ID INT(1),

IN DATA_OBJECT_RELATION_TYPE VARCHAR(45)

)
BEGIN

CASE 
	WHEN SOURCE_TYPE_ID = 3 THEN

			SELECT

				DOTL.data_object_type_id DataObjectTypeId,

				DOTL.name DataObjectName,

				DOTL.plural_label PluralLabel,

				DOTL.display_name DisplayName,

				DOTL.css_class_name CssClassName,

				DOTL.description Description,

				DOTL.app_id AppId,

				DOTL.is_active IsActive,

				DOTL.is_editable IsEditable,

				DORL.target_object_id TargetObjectTypeId,

				DORL.source_object_id SourceObjectTypeId,

				DORL.relation_type RelationType

				FROM data_object_type_lookup DOTL

				JOIN data_object_relation_lookup DORL ON DOTL.data_object_type_id = DORL.target_object_id

			WHERE

				DORL.source_object_id= SOURCE_ID AND FIND_IN_SET(DORL.relation_type, DATA_OBJECT_RELATION_TYPE) group by DOTL.data_object_type_id;
ELSE
		SELECT

				DOTL.data_object_type_id DataObjectTypeId,

				DOTL.name DataObjectName,

				DOTL.plural_label PluralLabel,

				DOTL.display_name DisplayName,

				DOTL.css_class_name CssClassName,

				DOTL.description Description,

				DOTL.app_id AppId,

				DOTL.is_active IsActive,

				DOTL.is_editable IsEditable,

				STORL.target_object_id TargetObjectTypeId,

				STORL.source_object_id SourceObjectTypeId,

				STORL.relation_type RelationType

				FROM data_object_type_lookup DOTL

				JOIN service_type_object_relation_lookup STORL ON DOTL.data_object_type_id = STORL.target_object_id

			WHERE

				STORL.source_object_id= SOURCE_ID AND FIND_IN_SET(STORL.relation_type, DATA_OBJECT_RELATION_TYPE) group by DOTL.data_object_type_id;
END CASE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ChildRecordsByParentTypeId`(

IN SOURCE_OBJECT_TYPE_ID INT, 

IN SOURCE_RECORD_ID INT,

IN TARGET_OBJECT_TYPE_ID INT,

IN _PageIndex INT, 

IN _PageSize INT,

IN PROCESS_INDICATOR INT,

OUT _RecordCount INT

)
BEGIN

SET @RowNumber:=0; 



#DROP TEMPORARY TABLE Results;



CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

	dori.name 'Name',

	dori.description 'Description',

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

	dori.created_on 'CreatedOn',

    dori.last_updated_on 'LastUpdatedOn',

    dori.created_on 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id = TARGET_OBJECT_TYPE_ID

    AND

		(dori.`values` LIKE CONCAT('%','_',SOURCE_OBJECT_TYPE_ID,'_r":',SOURCE_RECORD_ID, '%')    OR

         dori.`values` LIKE CONCAT('%','_',SOURCE_OBJECT_TYPE_ID,'_r":','"',SOURCE_RECORD_ID, '"','%'))

    AND

		dori.is_deleted = 0

    AND 

		dori.process_indicator_id = IF(PROCESS_INDICATOR <> -1, PROCESS_INDICATOR,dori.process_indicator_id)

    ORDER BY dori.created_on DESC;

      SET _RecordCount =(SELECT COUNT(*) FROM Results);

SELECT 

    *

FROM

    Results

WHERE

    CASE

        WHEN _PageSize <> - 1 THEN RowNumber BETWEEN (_PageIndex - 1) * _PageSize + 1 AND (((_PageIndex - 1) * _PageSize + 1) + _PageSize) - 1

        ELSE 1 = 1

    END;

    

 

DROP TEMPORARY TABLE Results;         

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_CompleteServiceTypeDetails`(IN SERVICE_TYPE_ID int)
BEGIN

SELECT 

    srti.service_request_type_id,

    srti.name,

    srti.description,

    srti.created_on,

    srti.created_by,

    COUNT(DISTINCT (sri.service_request_id)) AS COUNT

FROM

    servicerequest_type_info srti

        LEFT JOIN

    servicerequest_info sri ON sri.service_request_type_id = srti.service_request_type_id

WHERE

    srti.service_request_type_id = SERVICE_TYPE_ID

GROUP BY srti.service_request_type_id;



-- No. of Service Requests that are staged in the initial step 

SELECT 

    COUNT(DISTINCT (wssi.service_request_id)) AS 'New'

FROM

    workflow_step_stage_info wssi,

    workflow_step_info wsi,

    workflow_info wi

WHERE

    wi.workflow_id = wsi.workflow_id

        AND (wssi.workflow_step_id = wsi.workflow_step_id

        AND wsi.initial_step = 1)

        AND wssi.process_indicator = 1

        AND wi.service_request_type_id = SERVICE_TYPE_ID;



-- No. Of Service Request Per Workflow (Includes all workflow steps)

SELECT 

    wi.name,

    wsi.workflow_id,

    COUNT(*) AS 'ServiceRequestCount'

FROM

    workflow_step_info wsi

        JOIN

    workflow_info wi ON wi.workflow_id = wsi.workflow_id

        JOIN

    workflow_step_stage_info wssi ON wssi.workflow_step_id = wsi.workflow_step_id

WHERE

    wi.service_request_type_id = SERVICE_TYPE_ID

GROUP BY wssi.workflow_step_id AND wi.workflow_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DataObjectRecordsByTypeId`(

IN OBJECT_TYPE_ID INT,

IN APP_ID INT,

IN _PageIndex INT,

IN _PageSize INT,

OUT _RecordCount INT

)
BEGIN

SET @RowNumber:=0;


CASE
WHEN OBJECT_TYPE_ID <> -99 THEN

CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

dori.data_object_record_id 'DataRecordId',

OBJECT_TYPE_ID 'DataObjectTypeId',

dotl.name 'ObjectName',

dori.name 'Name',

dori.description 'Description',

dotl.object_prefix 'Prefix',

dori.image_url 'ImageUrl',

dori.assigned_to 'AssignedTo',

dori.is_active 'IsActive',

dori.`values` 'Values'

FROM

data_object_record_info dori

JOIN

data_object_type_lookup dotl ON (dotl.data_object_type_id = dori.data_object_type_id)

WHERE

dotl.data_object_type_id = OBJECT_TYPE_ID AND dori.is_deleted = 0 AND dori.process_indicator_id=0

AND dotl.app_id = APP_ID;

ELSE

CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

ANU.Id 'sDataRecordId',

CONCAT(ANU.FirstName,' ',ANU.LastName) 'Name',

CONCAT(ANU.FirstName,' ',ANU.LastName) 'Description',

OBJECT_TYPE_ID 'DataObjectTypeId'

FROM

aspnetusers ANU

LEFT JOIN

users_app_xref UA ON ANU.Id = UA.user_id

WHERE

ua.app_id = APP_ID;

END CASE;

SET _RecordCount =(SELECT COUNT(*) FROM Results);



SELECT

*

FROM

Results

WHERE

CASE

WHEN _PageSize <> - 1 THEN RowNumber BETWEEN (_PageIndex - 1) * _PageSize + 1 AND (((_PageIndex - 1) * _PageSize + 1) + _PageSize) - 1

ELSE 1 = 1

END;



DROP TEMPORARY TABLE Results;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DataRecordById`(

IN DATA_RECORD_ID INT)
BEGIN

SELECT 

	dori.name 'Name',

    dori.description 'Description',

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori 

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

   dori.data_object_record_id = DATA_RECORD_ID;

        

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DataRecordsByParentTypeId`(

IN SOURCE_OBJECT_TYPE_ID INT, 

IN SOURCE_RECORD_ID INT,

IN TARGET_OBJECT_TYPE_ID INT,

IN _PageIndex INT, 

IN _PageSize INT,

OUT _RecordCount INT

)
BEGIN

SET @RowNumber:=0;



#DROP TEMPORARY TABLE Results;



CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id IN (SELECT 

            fi.target_object_type_id

        FROM

            field_info fi

        WHERE

            fi.source_object_type_id = SOURCE_OBJECT_TYPE_ID

        AND fi.type = 'relation'

        AND dori.is_active = 1 AND 

        CASE 

        WHEN SOURCE_RECORD_ID <> 0 THEN

          dori.`values` LIKE CONCAT('%','"',SOURCE_OBJECT_TYPE_ID,'_r":',SOURCE_RECORD_ID, '%') 

         ELSE 1=1

        END AND

        CASE 

        WHEN TARGET_OBJECT_TYPE_ID <> 0 THEN

          fi.target_object_type_id = TARGET_OBJECT_TYPE_ID

         ELSE 1=1

        END

        );

     	 SET _RecordCount =(SELECT COUNT(*) FROM Results);

SELECT 

    *

FROM

    Results

WHERE

    RowNumber BETWEEN (_PageIndex - 1) * _PageSize + 1 AND (((_PageIndex - 1) * _PageSize + 1) + _PageSize) - 1;

 

DROP TEMPORARY TABLE Results;         

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DataRecordsBySearchValues`(

IN DATA_OBJECT_TYPE_ID INT,

IN APP_ID INT,

IN SEARCH_KEY VARCHAR(100)

)
BEGIN



CASE

WHEN DATA_OBJECT_TYPE_ID <> -99 THEN



SELECT

dori.data_object_record_id 'DataRecordId',

dori.data_object_type_id 'DataObjectTypeId',

dori.assigned_to 'AssignedTo',

dori.is_active 'IsActive',

dori.`values` `Values`,

dori.created_by 'CreatedBy',

dori.name 'Name',

dori.description 'Description',

dori.image_url 'ImageUrl',

dori.last_updated_by 'LastUpdatedBy'

FROM

data_object_record_info dori

WHERE

dori.is_deleted =0

AND dori.process_indicator_id =0

AND dori.data_object_type_id=DATA_OBJECT_TYPE_ID

AND (dori.data_object_record_id LIKE CONCAT('%',SEARCH_KEY, '%') OR dori.name LIKE CONCAT('%',SEARCH_KEY, '%'));

ELSE

SELECT

ANU.Id 'sDataRecordId',

CONCAT(ANU.FirstName,' ',ANU.LastName) 'Name',

CONCAT(ANU.FirstName,' ',ANU.LastName) 'Description',

DATA_OBJECT_TYPE_ID 'DataObjectTypeId'

FROM

aspnetusers ANU

LEFT JOIN

users_app_xref UA ON ANU.Id = UA.user_id

WHERE

ua.app_id = APP_ID

AND (ANU.FirstName LIKE CONCAT('%',SEARCH_KEY, '%') OR ANU.LastName LIKE CONCAT('%',SEARCH_KEY, '%') OR ANU.Id LIKE CONCAT('%',SEARCH_KEY, '%'));

END CASE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DataRecordsBySourceRecordId`(IN SOURCE_OBJECT_TYPE_ID INT, IN SOURCE_RECORD_ID INT)
BEGIN

SELECT 

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id IN (SELECT 

            fi.target_object_type_id

        FROM

            field_info fi

        WHERE

            fi.source_object_type_id = SOURCE_OBJECT_TYPE_ID

        AND fi.type = 'relation'

        AND dori.is_active = 1 and 

        CASE 

        WHEN SOURCE_RECORD_ID <> 0 THEN

          dori.`values` LIKE CONCAT('%','"',SOURCE_OBJECT_TYPE_ID,'_r":',SOURCE_RECORD_ID, '%') 

         ELSE 1=1

        END);

        

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GET_DataRecordsByTypeId`()
BEGIN

SELECT 

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id = SOURCE_TYPE_ID

   AND

    dori.is_active = 1;

      

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DefaultView`(IN SERVICE_REQUEST_TYPE_ID int)
BEGIN

SELECT sri.layout_config_json FROM servicerequest_type_info sri where sri.service_request_type_id = SERVICE_REQUEST_TYPE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DefaultWorkflowInitialStepByServiceTypeId`(
IN SERVICE_TYPE_ID INT(11))
BEGIN

SELECT
wsi.workflow_step_id AS WorkflowStepId, 
wsi.step_id AS StepId,
wsi.name StepName,
wi.workflow_id WorkflowId,
wi.name WorkflowName,
wsi.config_details,
wsi.assignment_type,
si.step_type AS StepTypeId,
si.sys_step_type AS SysStepType,
si.implentor_class AS ImplementorClass
FROM
workflow_info WI
LEFT JOIN workflow_step_info WSI ON (WSI.workflow_id = wi.workflow_id AND wsi.initial_step = 1)
LEFT JOIN step_info SI ON (si.step_id = wsi.step_id)
WHERE
wi.service_request_type_id = SERVICE_TYPE_ID
AND wi.deleted = 0
AND wi.is_default = 1
AND wi.is_active = 1  limit 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DocumentPath`(IN DocumentId varchar(128))
BEGIN

SELECT 

    account_id AS AccountID,

    document_name AS DocumentName,

    document_path AS DocumentPath

FROM

    batch_info

WHERE

    document_id = DocumentId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_DocumentTemplateById`(IN APP_ID INT(11),IN DOCUMENT_ID INT(11))
BEGIN

SELECT 

    dti.document_id AS DocumentId,

    dti.name AS Name,

    dti.description AS Description,

	dti.data AS Data,

    ft.type AS Type,

    dti.path AS Path,
    
    dti.config_json AS Config_json,

    dti.file_type_id AS FileTypeId,

    dti.app_id AS AppId,

    dti.created_on AS CreatedOn,

    dti.created_by AS CreatedBy,

    dti.last_updated_by AS LastUpdatedBy,

    dti.last_updated_on AS LastUpdatedOn,

    CONCAT(c.FirstName, ' ', c.LastName) AS 'CreatedByName',

    CONCAT(c.FirstName, ' ', c.LastName) AS 'LastUpdatedByName'

FROM

    document_template_info dti

        LEFT JOIN

    file_types ft ON (ft.file_type_id = dti.file_type_id)

        LEFT JOIN

    aspnetusers c ON (c.id = dti.created_by

        AND c.id = dti.last_updated_by)

WHERE

    dti.app_id = APP_ID AND dti.document_id = DOCUMENT_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_EmailTemplateInfoById`(IN MESSAGE_TEMPLATE_ID INT)
BEGIN

SELECT  

	et.email_template_id, 

    et.email_name,

    et.is_active,

	et.email_body,

	et.subject_line,

	et.deleted

FROM email_template_info et

WHERE

	et.email_template_id = MESSAGE_TEMPLATE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_field_infoById`(IN FIELD_ID longtext)
BEGIN

set @qry = concat('SELECT 

    fi.field_id as FieldId,

    fi.service_request_type_id as ServiceRequestTypeId,

    fi.source_object_type_id as SourceObjectTypeId,

    fi.name as FieldName,

    fi.type as FieldType, 

    fi.display_name as DisplayName,

    fi.readonly as Readonly,

    fi.unique  ''Unique''

FROM

    field_info as fi

WHERE

     fi.field_id in  (\'',FIELD_ID,'\')');

    prepare stmp from @qry;

    execute stmp ;

    deallocate prepare stmp; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_field_infoByParentFieldId`(IN PARENT_FIELD_ID int)
BEGIN

SELECT 

    fi.field_id FieldId,

    fi.service_request_type_id ServiceRequestTypeId,

    fi.name FieldName,

    fi.type FieldType,

    fi.display_name DisplayName,

    fi.readonly Readonly,

    fi.`unique` `Unique`,

    COALESCE(fi.parent_field_id,0) ParentFieldId

FROM

    `xproc`.`field_info` fi

WHERE

    fi.parent_field_id =  PARENT_FIELD_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_field_infoByServiceTypeId`(IN SERVICE_TYPE_ID int)
BEGIN

SELECT 

    fi.field_id FieldId,

    fi.service_request_type_id ServiceRequestTypeId,

    fi.name FieldName,

    fi.type FieldType,

    fi.display_name DisplayName,

    fi.readonly Readonly,

    fi.`unique` `Unique`,

    COALESCE(fi.parent_field_id, 0) ParentFieldId,

    flvx.lookup_value_id `LookupId`,

    lvi.name AS `LookupName`,

    lvi.is_global AS `IsGlobal`,

    flvx.is_multi AS `IsMulti`,

    lvi.values AS `Values`,

    COALESCE(fi.relation_id, 0) 'RelationId',

    COALESCE(fi.source_object_type_id, -1) 'SourceObjectTypeId',

    COALESCE(fi.target_object_type_id, -1) 'TargetObjectTypeId',

    dorl.relation_type 'RelationType'

FROM

    field_info fi

        LEFT JOIN

    field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id)

        LEFT JOIN

    data_object_relation_lookup dorl ON (fi.target_object_type_id IS NOT NULL

        AND fi.relation_id = dorl.relation_id)

        LEFT JOIN

    lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id),

    servicerequest_type_info srti

WHERE

    fi.service_request_type_id = srti.service_request_type_id

        AND srti.service_request_type_id = SERVICE_TYPE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FieldInfoById`(IN FIELD_ID longtext)
BEGIN

set @qry = concat('SELECT

fi.`field_id` Id,
fi.`service_request_type_id` ServiceRequestTypeId,
fi.`name` "Name",
fi.`display_name` DisplayName,
fi.`type` TypeName,
fi.`readonly` IsReadonly,
fi.`unique` IsUnique,
fi.`parent_field_id` ParentFieldId,
fi.`cascading_parent_field_id` CascadingParentFieldId,
fi.`display_type` DisplayType,
fi.`created_by` CreatedBy,
fi.`created_on` CreatedOn,
fi.`last_updated_by` LastUpdatedBy,
fi.`last_updated_on` LastUpdatedOn,
fi.`random_key` RandomKey,
fi.`formula_expression` FormulaExpression,
fi.`formula_result_type` FormulaResultType,
lvi.lookup_value_id "LookupId",
lvi.values "Values",
lvi.name LookupName,
lvi.is_global LookupIsGlobal,
CONCAT(c.FirstName, " ", c.LastName) CreatedByName,
CONCAT(l.FirstName, " ", l.LastName) LastUpdatedByName,
COALESCE(fi.relation_id, 0) RelationId,
COALESCE(dorl.relation_type, COALESCE(dobrl.relation_type, "")) RelationshipType,
COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,
COALESCE(sdotl.display_name, "") SourceObjectTypeName,
COALESCE(sdotl.plural_label, "") SourceObjectTypePluralLabel,
COALESCE(tdotl.display_name, "") TargetObjectTypeName,
COALESCE(tdotl.plural_label, "") TargetObjectTypePluralLabel,
COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId,
flvx.is_multi  IsMulti
FROM field_info fi
JOIN aspnetusers c ON (c.Id = fi.created_by)
JOIN aspnetusers l ON (l.Id = fi.last_updated_by)
LEFT JOIN field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id AND (fi.type = "lookup" || fi.type = "cascadinglookup"))
LEFT JOIN lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)
LEFT JOIN service_type_object_relation_lookup dorl ON (fi.relation_id = dorl.relation_id)
LEFT JOIN data_object_relation_lookup dobrl ON (fi.relation_id = dobrl.relation_id)
LEFT JOIN data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id)
LEFT JOIN data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id)
WHERE fi.field_id in (',FIELD_ID,') order by find_in_set(fi.field_id, "',FIELD_ID,'")' );

prepare stmp from @qry;

execute stmp ;

deallocate prepare stmp;

-- Modified  Get_FieldInfoById to fetch isMulti  By Girish on 18-03-2021 7:00PM -- END 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FieldInfoByParentFieldId`(IN PARENT_FIELD_ID int)
BEGIN

SELECT 

    fi.field_id FieldId,

    fi.service_request_type_id ServiceRequestTypeId,

    fi.name FieldName,

    fi.type FieldType,

    fi.display_name DisplayName,

    fi.readonly Readonly,

    fi.`unique` `Unique`,

    COALESCE(fi.parent_field_id,0) ParentFieldId

FROM

    `xproc`.`field_info` fi

WHERE

    fi.parent_field_id =  PARENT_FIELD_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FieldInfoByServiceTypeId`(IN SERVICE_TYPE_ID int)
BEGIN

SELECT 

    fi.field_id FieldId,

    fi.service_request_type_id ServiceRequestTypeId,

    fi.name FieldName,

    fi.type FieldType,

    fi.display_name DisplayName,

    fi.readonly Readonly,

    fi.`unique` `Unique`,

    COALESCE(fi.parent_field_id, 0) ParentFieldId,

    flvx.lookup_value_id `LookupId`,

    lvi.name AS `LookupName`,

    lvi.is_global AS `IsGlobal`,

    flvx.is_multi AS `IsMulti`,

    lvi.values AS `Values`,

    COALESCE(fi.relation_id, 0) 'RelationId',

    COALESCE(fi.source_object_type_id, -1) 'SourceObjectTypeId',

    COALESCE(fi.target_object_type_id, -1) 'TargetObjectTypeId',

    dorl.relation_type 'RelationType',

    dorl.relation_direction 'RelationDirection'

    

FROM

    field_info fi

        LEFT JOIN

    field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id)

        LEFT JOIN

    data_object_relation_lookup dorl ON (fi.target_object_type_id IS NOT NULL

        AND fi.relation_id = dorl.relation_id)

        LEFT JOIN

    lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id),

    servicerequest_type_info srti

WHERE

    fi.service_request_type_id = srti.service_request_type_id

        AND srti.service_request_type_id = SERVICE_TYPE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FieldsByListId`(IN LIST_ID INT,IN ServiceTpyeId INT)
BEGIN

SELECT 

	SELF.`list_id` ListId,

	SELF.`service_type_id` ServiceTpyEId,

    SELF.`list_name` ListName,

    SELF.`fields` Fields,

    SELF.`status` Status,

    SELF.`created_by` CreatedBy,

    SELF.`created_on` CreatedOn,

    SELF.`last_updated_on` LastUpdatedOn,

    SELF.`last_updated_by` LastUpdatedBy

FROM 		

		`service_export_list_format` SELF

    WHERE 

		SELF.`list_id` = IF(LIST_ID <> -1, LIST_ID, SELF.`list_id`)

    AND

		SELF.`service_type_id` = IF(ServiceTpyeId <> -1, ServiceTpyeId, SELF.`service_type_id`)

        ORDER BY SELF.`list_name` ASC;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FieldsByObjectTypeId`(

IN APP_ID INT,

IN OBJECT_TYPE_ID INT,

IN _PageIndex INT,

IN _PageSize INT,

OUT _RecordCount INT

)
BEGIN

SET @RowNumber:=0;



CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

fi.`field_id` FieldId,

fi.`service_request_type_id` ServiceRequestTypeId,

COALESCE(fi.`name`, '') 'Name',

COALESCE(fi.`display_name`, '') DisplayName,

COALESCE(fi.`type`, '') TypeName,

fi.`readonly` IsReadonly,

fi.`unique` IsUnique,

COALESCE(fi.`parent_field_id`, 0) ParentFieldId,

COALESCE(fi.`created_by`, '') CreatedBy,

COALESCE(fi.`created_on`, '') CreatedOn,

COALESCE(fi.`last_updated_by`, '') LastUpdatedBy,

COALESCE(fi.`last_updated_on`, '') LastUpdatedOn,

COALESCE(fi.`random_key`, '') RandomKey,

COALESCE(fi.`formula_expression`, '') FormulaExpression,

COALESCE(fi.`formula_result_type`, '') FormulaResultType,

COALESCE(fi.`cascading_parent_field_id`, 0) CascadingParentFieldId,

COALESCE(fi.`display_type`, '') DisplayType,

fi.is_primary_key 'IsPrimaryKey',

COALESCE(dorl.relation_direction, '') 'RelationDirection',

COALESCE(lvi.lookup_value_id, -1) 'LookupId',

COALESCE(lvi.values, '') 'Values',

COALESCE(lvi.name, '') LookupName,

lvi.is_global LookupIsGlobal,

CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName,

COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,

COALESCE(sdotl.display_name, '') SourceObjectTypeName,

COALESCE(sdotl.plural_label, '') SourceObjectTypePluralLabel,

COALESCE(sdotl.name, '') SourceObjectName,

COALESCE(tdotl.display_name, '') TargetObjectTypeName,

COALESCE(tdotl.plural_label, '') TargetObjectTypePluralLabel,

COALESCE(tdotl.name, '') TargetObjectName,

COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId,

COALESCE(fi.relation_id, 0) RelationId,

COALESCE(dorl.relation_type, '') RelationshipType,

COALESCE(fi.is_question, 0) IsQuestion,

COALESCE(fi.expected_response, '') ExpectedResponse,

flvx.is_multi IsMulti

FROM

field_info fi

JOIN

aspnetusers c ON (c.Id = fi.created_by)

JOIN

aspnetusers l ON (l.Id = fi.last_updated_by)

LEFT JOIN field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id AND (fi.type = 'lookup' OR fi.type = 'cascadinglookup' ))

LEFT JOIN lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)

LEFT JOIN data_object_relation_lookup dorl ON (fi.relation_id = dorl.relation_id AND dorl.is_active = 1)

LEFT JOIN data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id AND sdotl.app_id = APP_ID AND sdotl.is_deleted =0)

LEFT JOIN data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id AND tdotl.is_deleted =0)

WHERE

fi.source_object_type_id = OBJECT_TYPE_ID AND fi.is_deleted = 0

ORDER BY

fi.display_name asc;



SET _RecordCount =(SELECT COUNT(*) FROM Results);



CASE WHEN

_pageSize <> -1 THEN



SELECT * FROM Results

WHERE RowNumber BETWEEN(_PageIndex -1) * _PageSize + 1 AND(((_PageIndex -1) * _PageSize + 1) + _PageSize) - 1;

WHEN

_pageSize = -1

THEN

SELECT * FROM Results;



END CASE;

DROP TEMPORARY TABLE Results;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FlowById`(IN WORKFLOW_ID int)
BEGIN

SELECT 

    w.workflow_id AS 'Id',

    COALESCE(w.parent_workflow_id,0) AS 'ParentWorkFlowID',

    w.name AS 'Name',

    w.short_name AS 'ShortName',

    wsdi.data_definition 'DataDefinition',

    w.css_class_name AS 'CssClassName',

    w.short_description AS 'ShortDescription',

    w.long_description AS 'LongDescription',

    w.is_active AS 'Active',

    w.service_request_type_id AS 'ServiceTypeId',

    w.active_from AS 'ActiveFrom',

    w.active_until AS 'ActiveUntil',

    w.created_by AS 'CreatedBy',

    CONCAT(c.FirstName, ' ', c.LastName) AS 'CreatedByName',

    w.created_on AS 'CreatedOn',

    w.last_updated_on AS 'LastUpdatedOn',

    w.last_updated_by AS 'LastUpdatedBy',

    CONCAT(l.FirstName, ' ', l.LastName) AS 'LastUpdatedByName',

    w.deleted AS 'Deleted',

    w.is_default_version 'IsDefaultVersion',

    w.is_approved 'IsApproved',

	w.approver_comments 'ApproverComments',

    w.version_notes 'VersionNotes',

    w.version_name 'VersionName',

	w.requested_by 'RequestedBy'

FROM

    `workflow_info` w

        LEFT JOIN

    workflow_step_definition_info wsdi ON (wsdi.workflow_id = w.workflow_id)

        LEFT JOIN

    aspnetusers c ON (c.id = w.created_by)

        LEFT JOIN

    aspnetusers l ON (l.id = w.last_updated_by)

WHERE

    w.workflow_id = WORKFLOW_ID

        AND w.deleted = 0;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_FlowDetailsById`(IN FLOW_ID int)
BEGIN



SELECT 

w.workflow_id AS `Id`,

w.name AS `FlowName`,

w.long_description `FlowLongDescription`,

w.short_name `FlowShortName`,

w.css_class_name `FlowCssClassName`,

w.is_active `FlowIsActive`,

w.service_request_type_id `ServiceTypeId`,

w.created_by `FlowCreatedBy`,

c.FirstName `FlowCreatedUserName`,

w.created_on `FlowCreatedOn`,

w.last_updated_on `FlowLastUpdatedOn`,

w.last_updated_by `FlowLastUpdatedBy`,

l.FirstName `FlowLastUpdatedUserName`,

w.deleted `FlowIsDeleted`,

si.`step_id` `StepId`,

wsi.workflow_step_id `WorkflowStepId`,

wsi.config_details `ConfigDetails`,

wsi.`name` `StepName`,

si.`long_description` `StepDescription`,

si.`css_class_name` `StepCssClassName`,

si.`short_name` `StepShortName`,

si.sys_step_type `SysStepType`

FROM

workflow_info w

LEFT JOIN

aspnetusers c ON (c.Id = w.created_by)

LEFT JOIN

aspnetusers l ON (l.Id = w.last_updated_by)

LEFT JOIN

workflow_step_info wsi ON (wsi.workflow_id = w.workflow_id)

LEFT JOIN

step_info si ON (wsi.step_id = si.step_id)

WHERE

w.workflow_id = FLOW_ID AND w.deleted = 0;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_LifeCycleEventTypes`()
BEGIN

	SELECT  

		LCETL.id AS LifeCycleEventTypeID,

		LCETL.name AS LifeCycleEventTypeName 

	FROM lifecycle_event_type_lookup  LCETL;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_MenusByUserId`(

	IN USER_ID_VALUE VARCHAR(255),

    IN TYPE_NAME VARCHAR(1))
BEGIN

--    SET SERVICE_TYPE_ID  = '';

--    SET USER_ID_VALUE = '';

--    SET STATUS_IND = -1;

--    SET BATCH_ID = -1;



--  SET USER_ID_VALUE = '8c5e738c-26f9-4752-b108-3d311948945c';

SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





-- select asur.RoleId into @USER_ROLE_ID from aspnetuserroles asur where asur.UserId = USER_ID_VALUE;



--  select asr.Name into USER_ROLE_NAME from aspnetroles asr where asr.Id = @USER_ROLE_ID;



select permission_id into @VIEW_ALL_PERMISSION_ID from permission_lookup where name IN ('VIEW_ALL');

--    select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, USER_ROLE_NAME;



SELECT 

    COUNT(rpx.role_id) INTO @USER_HAS_VIEW_ALL_PERMISSION 

FROM

	role_permission_xref rpx 

WHERE

	rpx.permission_id = @VIEW_ALL_PERMISSION_ID

    AND

    rpx.role_id = @USER_ROLE_ID  

GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;





SELECT 

    COUNT(upx.User_Id) INTO @USER_HAS_VIEW_ALL_PERMISSION 

FROM

	user_permission_xref upx 

WHERE

	(upx.permission_id = @VIEW_ALL_PERMISSION_ID

    AND

    upx.User_Id = USER_ID_VALUE)

  

GROUP BY upx.User_Id;



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By UserID';



/*

SELECT 

    COUNT(ugrpx.user_group_id) INTO @USER_HAS_VIEW_ALL_PERMISSION 

FROM

	usergroup_permission_xref ugrpx 

WHERE

	(ugrpx.permission_id = @VIEW_ALL_PERMISSION_ID

    AND

    ugrpx.user_group_id IN (select user_group_id from user_usergroup_xref uux where uux.user_Id = USER_ID_VALUE))

  

GROUP BY ugrpx.user_group_id;

*/



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By User Group';

	

SELECT 

  ml.menu_id MenuId,

ml.name 'MenuName',

ml.section_sequence 'SectionSequence',

ml.section 'SectionTitle',

ml.menu_sequence 'MenuSequence',

cl.display_name 'SubMenuName',

cl.sequence 'SubMenuSequence',

cl.url 'SubMenuURL',

ml.css_class_name 'MenuCssClassName',

pl.permission_id 'PermissionId',

pl.display_name 'DisplayName'

FROM

    permission_lookup pl

		JOIN

	menu_component_xref mcx ON (mcx.component_id = pl.source_id)

        JOIN

    component_lookup cl ON (mcx.component_id = cl.component_id)

		JOIN

	menu_lookup ml ON (ml.menu_id = mcx.menu_id)

WHERE

	 CASE 

			WHEN @USER_HAS_VIEW_ALL_PERMISSION = 0 THEN 

    pl.permission_id IN (

SELECT 

            ugPermissions.permission_id

        FROM

            usergroup_permission_xref ugPermissions

        WHERE

            ugPermissions.user_group_id IN (SELECT 

                    user_group_id

                FROM

                    user_usergroup_xref

                WHERE

                    user_id = USER_ID_VALUE)

                    

			UNION ALL

            

            SELECT 

            upx.permission_id

        FROM

            user_permission_xref upx

        WHERE

            upx.User_Id = USER_ID_VALUE

            

		UNION ALL

        

        SELECT 

            rpx.permission_id

        FROM

            role_permission_xref rpx

        WHERE

            rpx.role_id IN (SELECT asur.RoleId FROM aspnetuserroles asur WHERE asur.UserId = USER_ID_VALUE))

	AND pl.type = TYPE_NAME

    ELSE

		pl.type = TYPE_NAME

    END

GROUP BY cl.component_id order by ml.section_sequence, ml.menu_sequence, cl.sequence asc;





END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Obect_Records_By_RandomKeys`(IN RANDOM_KEYS longtext)
BEGIN
SELECT 
    DORI.data_object_record_id 'DataRecordId',
    DORI.data_object_type_id 'DataObjectTypeId',
    DORI.random_key 'RandomKey',
    DORI.parent_random_key 'ParentRandomKey'
FROM
    data_object_record_info DORI
WHERE
    DORI.is_deleted = 0
        AND DORI.is_active = 1
        AND FIND_IN_SET(DORI.random_key,
            RANDOM_KEYS);		
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectDataByAppId`(

IN APP_ID INT(11), IN DATA_OBJECT_TYPE_ID INT(11))
BEGIN

  

SELECT 

    dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.app_id AppId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable,

	dotl.save_changes_to_db SaveChangesToDB,
    
    COALESCE(dotl.data_source_id, 0) DataSourceId, 
    
     COALESCE(DS.data_base_type_id,0) DatabaseTypeID, 
    
    COALESCE(dotl.schema_name, '') SchemaName,  
    
    IFNULL(dotl.created_on, '') CreatedOn, 

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

    data_object_type_lookup dotl
		LEFT JOIN
    datasources  DS ON (dotl.data_source_id = DS.datasource_id)  
        JOIN

    aspnetusers c ON (c.Id = dotl.created_by) 

        JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)
    
		  
        

WHERE

    dotl.app_id = APP_ID AND dotl.data_object_type_id= DATA_OBJECT_TYPE_ID ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectDataByServiceTypeId`(IN SERVICE_TYPE_ID INT(11), IN DATA_OBJECT_TYPE_ID INT(11))
BEGIN



SELECT 

    dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.service_request_type_id ServiceRequestTypeId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable,

    IFNULL(dotl.created_on, '') CreatedOn,

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

    data_object_type_lookup dotl

        JOIN

    aspnetusers c ON (c.Id = dotl.created_by)

        JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)

WHERE

    dotl.service_request_type_id = SERVICE_TYPE_ID AND dotl.data_object_type_id= DATA_OBJECT_TYPE_ID ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectPermissionsByUserId`(

	IN USER_ID_VALUE VARCHAR(255),

    IN APP_ID INT(11))
BEGIN



--    SET SERVICE_TYPE_ID  = '';

--    SET USER_ID_VALUE = '';

--    SET STATUS_IND = -1;

--    SET BATCH_ID = -1;



--  SET USER_ID_VALUE = 'e95d1fd5-11de-4173-a969-aa83ad335a12';

SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;

-- SET @TYPE_NAME = 'O';

SET @USER_ROLE_NAME = '';





SELECT 
    asur.RoleId
INTO @USER_ROLE_ID FROM
    aspnetuserroles asur
WHERE
    asur.UserId = USER_ID_VALUE;



SELECT 
    asr.Name
INTO @USER_ROLE_NAME FROM
    aspnetroles asr
WHERE
    asr.Id = @USER_ROLE_ID;



SELECT 
    permission_id
INTO @VIEW_ALL_PERMISSION_ID FROM
    permission_lookup
WHERE
    name IN ('VIEW_ALL');

--    select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, USER_ROLE_NAME;



SELECT 
    COUNT(rpx.role_id)
INTO @USER_HAS_VIEW_ALL_PERMISSION FROM
    role_permission_xref rpx
WHERE
    rpx.permission_id = @VIEW_ALL_PERMISSION_ID
        AND rpx.role_id = @USER_ROLE_ID
GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;





SELECT 
    COUNT(upx.User_Id)
INTO @USER_HAS_VIEW_ALL_PERMISSION FROM
    user_permission_xref upx
WHERE
    (upx.permission_id = @VIEW_ALL_PERMISSION_ID
        AND upx.User_Id = USER_ID_VALUE)
GROUP BY upx.User_Id;



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By UserID';



SELECT 
    *
FROM
    (SELECT 
        CONCAT(pl.type, '_', dotl.data_object_type_id, '_', pl.permission_type_id) 'Permission',
            pl.type,
            pl.permission_id
    FROM
        permission_lookup pl
    JOIN data_object_type_lookup dotl ON (dotl.data_object_type_id = pl.source_id
        AND dotl.app_id = APP_ID) UNION SELECT 
        PML.name AS 'Permission', PML.type, PML.permission_id
    FROM
        permission_lookup AS PML) PMLP
WHERE
    CASE
        WHEN
            @USER_HAS_VIEW_ALL_PERMISSION = 0
        THEN
            PMLP.permission_id IN (SELECT 
                    ugPermissions.permission_id
                FROM
                    usergroup_permission_xref ugPermissions
                WHERE
                    ugPermissions.user_group_id IN (SELECT 
                            user_group_id
                        FROM
                            user_usergroup_xref
                        WHERE
                            user_id = USER_ID_VALUE) UNION ALL SELECT 
                    upx.permission_id
                FROM
                    user_permission_xref upx
                WHERE
                    upx.User_Id = USER_ID_VALUE UNION ALL SELECT 
                    rpx.permission_id
                FROM
                    role_permission_xref rpx
                WHERE
                    rpx.role_id IN (SELECT 
                            asur.RoleId
                        FROM
                            aspnetuserroles asur
                        WHERE
                            asur.UserId = USER_ID_VALUE))
                AND PMLP.type IN ('O' , 'A')
        ELSE PMLP.type IN ('O' , 'A')
    END
GROUP BY PMLP.Permission;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectRecordById`(

IN DATA_OBJECT_RECORD_ID VARCHAR(200)

)
BEGIN



SELECT

		DORI.data_object_record_id 'DataRecordId',

		DORI.data_object_type_id 'DataObjectTypeId',

		DORI.is_active 'IsActive',

		DORI.assigned_to 'AssignedTo',

		DORI.values'Values',

		DORI.name 'Name',

		DORI.description 'Description',

		DORI.image_url 'ImageUrl',

		DORI.created_by 'CreatedBy',

		DORI.last_updated_by 'LastUpdatedBy',

		DORI.created_on 'CreatedOn',

		DORI.last_updated_on 'LastUpdatedOn',

		DORI.is_deleted 'IsDelete',

		DORI.process_indicator_id 'ProcessIndicator',

		concat(c.FirstName,' ', c.LastName) CreatedByName,

		concat(l.FirstName,' ', l.LastName) LastUpdatedByName

FROM 

		data_object_record_info DORI,        

        aspnetusers c,

		aspnetusers l

WHERE 	FIND_IN_SET(DORI.data_object_record_id, DATA_OBJECT_RECORD_ID)

		AND

			DORI.created_by = c.Id

		AND

			DORI.last_updated_by = l.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectRelationWorkFlows`(

IN RELATION_TYPE VARCHAR(10),

IN DATA_OBJECT_ID INT(11))
BEGIN

select DISTINCT

WI.workflow_id AS Id,

WI.name AS Name,

WI.service_request_type_id AS ServiceRequestTypeID,

STORL.target_object_id AS DataObjectID,

SRTI.name AS ServiceRequestTypeName

FROM workflow_info WI

INNER JOIN service_type_object_relation_lookup STORL ON WI.service_request_type_id=STORL.source_object_id

INNER JOIN servicerequest_type_info SRTI ON STORL.source_object_id=SRTI.service_request_type_id

WHERE

STORL.relation_type=RELATION_TYPE

AND WI.is_default_version=1

AND WI.is_approved=1

AND WI.is_active=1

AND WI.deleted=0

AND STORL.target_object_id=DATA_OBJECT_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectsAndItsRelations`(

IN APP_ID INT)
BEGIN





SELECT DISTINCT

    Obj.data_object_type_id 'DataObjectTypeId',

    Obj.display_name 'ObjectName',

    Obj.plural_label 'PluralLabel',

    Obj.description 'Description',

    Obj.css_class_name 'CssClassName',

    COALESCE(Obj.target_object_id, 0) 'TargetObjectTypeId',

    COALESCE(Obj.relation_type, '') 'RelationshipType',

    COALESCE(Obj.relation_id, 0) 'RelationId',

    Obj.level 'Level',

    COALESCE(ffi.ObjectFields, '') 'Connections'

FROM

    (SELECT 

        dotl.data_object_type_id,

            dotl.display_name,

            dotl.plural_label,

            dotl.description,

            dotl.css_class_name,

            dorl.target_object_id,

            dorl.relation_type,

            dorl.relation_id,

            'ObjectLevel' AS 'level'

    FROM

        data_object_type_lookup dotl

    LEFT JOIN data_object_relation_lookup dorl ON dotl.data_object_type_id = dorl.source_object_id

    WHERE

        app_id = APP_ID UNION ALL SELECT 

        dotl.data_object_type_id,

            dotl.display_name,

            dotl.plural_label,

            dotl.description,

            dotl.css_class_name,

            sorl.target_object_id,

            sorl.relation_type,

            sorl.relation_id,

            'ServiceLevel' AS 'level'

    FROM

        data_object_type_lookup dotl

    LEFT JOIN service_type_object_relation_lookup sorl ON dotl.data_object_type_id = sorl.source_object_id

    WHERE

        app_id = APP_ID) Obj

        LEFT JOIN

    (SELECT 

        fi.source_object_type_id,

            CONCAT('[', GROUP_CONCAT(CONCAT('{"serviceTypeId":', COALESCE(fi.service_request_type_id, 0), ',"fieldId":', COALESCE(fi.field_id, 0), ',"sourceObjectTypeId":', COALESCE(fi.source_object_type_id, 0), ',"targetObjectTypeId":', COALESCE(fi.target_object_type_id, 0), ',"relationId":', COALESCE(fi.relation_id, 0), ',"relationType":"', COALESCE(dbrl.relation_type, ''), '","objectName":"', COALESCE(dotl.display_name, ''), '","displayName":"', COALESCE(fi.display_name, ''), '"}')), ']') ObjectFields

    FROM

        field_info fi

    LEFT JOIN data_object_relation_lookup dbrl ON dbrl.relation_id = fi.relation_id

    LEFT JOIN data_object_type_lookup dotl ON dotl.data_object_type_id = dbrl.target_object_id

    WHERE

        fi.type = 'relation'

    GROUP BY fi.source_object_type_id) ffi ON ffi.source_object_type_id = Obj.data_object_type_id

GROUP BY Obj.data_object_type_id , Obj.display_name , Obj.plural_label , Obj.description , Obj.css_class_name , Obj.target_object_id , Obj.relation_type , Obj.relation_id , Obj.level;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectsAndRelations`(IN APP_ID INT)
BEGIN

SELECT 

   sdotl.data_object_type_id 'SourceObjectTypeId',

   sdotl.name 'SourceObjectName',

   sdotl.display_name 'SourceDisplayName',

   sdotl.plural_label 'SourcePluralLabel',

   sdotl.description 'SourceDescription',

   sdotl.css_class_name 'SourceCssClassName',

   sdotl.is_active 'SourceIsActive',

   sdotl.is_editable 'SourceIsEditable',   

   substring(dorl.relation_type, 1, 1) 'RelationType',

   tdotl.data_object_type_id 'TargetObjectTypeId',

   tdotl.display_name 'TargetObjectName',

   fi.field_id 'FieldId',

   fi.name 'FieldName',

   (select count(1) from field_info where source_object_type_id = sdotl.data_object_type_id) as FieldCount

FROM

    field_info fi

    JOIN

    data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id AND sdotl.app_id = APP_ID AND sdotl.is_active = 1)

    JOIN

    data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id AND tdotl.app_id = APP_ID AND tdotl.is_active = 1)

    JOIN

    data_object_relation_lookup dorl ON (dorl.relation_id = fi.relation_id AND dorl.is_active = 1)

    

WHERE

    `type` = 'relation'

        AND fi.source_object_type_id IS NOT NULL

        AND fi.target_object_type_id IS NOT NULL

        AND fi.service_request_type_id IS NULL

GROUP BY

	fi.field_id;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectsByApplicationId`(

IN APP_ID INT(11), 

IN USER_ID_VALUE VARCHAR(255),

IN IS_SYSYTEM INT(11)

)
BEGIN


-- SETUSER_ID_VALUE = 'e95d1fd5-11de-4173-a969-aa83ad335a12';

SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





select asur.RoleId into @USER_ROLE_ID from aspnetuserroles asur where asur.UserId =USER_ID_VALUE;



  select asr.Name into @USER_ROLE_NAME from aspnetroles asr where asr.Id = @USER_ROLE_ID;



select permission_id into @VIEW_ALL_PERMISSION_ID from permission_lookup where name IN ('VIEW_ALL');

--    select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



SELECT 

    COUNT(rpx.role_id) INTO @USER_HAS_VIEW_ALL_PERMISSION 

FROM

	role_permission_xref rpx 

WHERE

	rpx.permission_id = @VIEW_ALL_PERMISSION_ID

    AND

    rpx.role_id = @USER_ROLE_ID  

GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;





SELECT 

    COUNT(upx.User_Id) INTO @USER_HAS_VIEW_ALL_PERMISSION 

FROM

	user_permission_xref upx 

WHERE

	(upx.permission_id = @VIEW_ALL_PERMISSION_ID

    AND

    upx.User_Id =USER_ID_VALUE)

  

GROUP BY upx.User_Id;



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By UserID';



SELECT 

    dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.app_id AppId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable,

    IFNULL(dotl.created_on, '') CreatedOn,

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

    permission_lookup pl,

    data_object_type_lookup dotl

		LEFT JOIN

    aspnetusers c ON (c.Id = dotl.created_by)

		LEFT JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)

WHERE

    dotl.app_id = APP_ID

        AND dotl.is_active = 1
        
		AND dotl.is_deleted = 0

        AND dotl.is_system = IF(IS_SYSYTEM <> -1,IS_SYSYTEM,dotl.is_system)

        AND CASE WHEN (@USER_HAS_VIEW_ALL_PERMISSION = 0) THEN 

				 (dotl.data_object_type_id = pl.source_id

				AND 

				pl.permission_id IN (SELECT 

					ugPermissions.permission_id

				FROM

					usergroup_permission_xref ugPermissions

				WHERE

					ugPermissions.user_group_id IN (SELECT 

							user_group_id

						FROM

							user_usergroup_xref

						WHERE

							user_id =USER_ID_VALUE) 

                            

				UNION ALL 

                

                SELECT 

					upx.permission_id

				FROM

					user_permission_xref upx

				WHERE

					upx.User_Id =USER_ID_VALUE

                    

				UNION ALL 

                

                SELECT 

					rpx.permission_id

				FROM

					role_permission_xref rpx

				WHERE

					rpx.role_id IN (SELECT 

							asur.RoleId

						FROM

							aspnetuserroles asur

						WHERE

							asur.UserId =USER_ID_VALUE))

				AND pl.type = 'O')

		ELSE TRUE END

GROUP BY dotl.data_object_type_id order by dotl.display_name asc;

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectsByServiceTypeId`(

IN SERVICE_TYPE_ID INT(11),

IN SOURCE_OBJECT_TYPE_ID INT(11))
BEGIN

DECLARE target_object_type_id INT DEFAULT 0;

IF SOURCE_OBJECT_TYPE_ID != 0 THEN

	IF SERVICE_TYPE_ID = SOURCE_OBJECT_TYPE_ID 

    THEN

      Select target_object_id into target_object_type_id from service_type_object_relation_lookup where source_object_id = SOURCE_OBJECT_TYPE_ID limit 1;

    ELSE

      Select target_object_id into target_object_type_id from data_object_relation_lookup where source_object_id = SOURCE_OBJECT_TYPE_ID limit 1;

    END IF;

    

END IF;



SELECT 

    dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.service_request_type_id ServiceRequestTypeId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable, 

    IFNULL(dotl.created_on, '') CreatedOn,

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName

FROM

    data_object_type_lookup dotl

        JOIN

    aspnetusers c ON  (c.Id = dotl.created_by)

        JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)

WHERE

    CASE WHEN  target_object_type_id > 0  

		THEN  (dotl.service_request_type_id = SERVICE_TYPE_ID AND data_object_type_id != target_object_type_id )

        ELSE (dotl.service_request_type_id = SERVICE_TYPE_ID) 

    END ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_ObjectsInfoByIds`(IN OBJECT_TYPEIDS longtext)
BEGIN

set @qry = concat('SELECT

dotl.data_object_type_id DataObjectTypeId,

    dotl.name DataObjectName,

    dotl.plural_label PluralLabel,

    dotl.display_name DisplayName,

    dotl.css_class_name CssClassName,

    dotl.description Description,

    dotl.app_id AppId,

    dotl.is_active IsActive,

    dotl.is_editable IsEditable,

    IFNULL(dotl.created_on, '') CreatedOn,

    IFNULL(dotl.last_updated_on, '') LastUpdatedOn,

    dotl.created_by CreatedBy,

    dotl.last_updated_by LastUpdatedBy,

    CONCAT(c.FirstName, " ", c.LastName) CreatedByName,

    CONCAT(l.FirstName, " ", l.LastName) LastUpdatedByName

FROM

    data_object_type_lookup dotl

		LEFT JOIN

    aspnetusers c ON (c.Id = dotl.created_by)

		LEFT JOIN

    aspnetusers l ON (l.Id = dotl.last_updated_by)

WHERE

dotl.is_active = 1 AND dotl.data_object_type_id in (',OBJECT_TYPEIDS,') order by find_in_set(dotl.data_object_type_id, "',OBJECT_TYPEIDS,'")' );

prepare stmp from @qry;

execute stmp ;

deallocate prepare stmp;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ObjectsRelationsJSON`(IN APP_ID int)
BEGIN

select ai.object_relations from app_info ai WHERE ai.app_id = APP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_OneToManyOrManyToOneRecordsByRecordId`(

IN SOURCE_OBJECT_TYPE_ID INT, 

IN SOURCE_RECORD_ID INT,

IN TARGET_OBJECT_TYPE_ID INT,

IN _PageIndex INT, 

IN _PageSize INT,

OUT _RecordCount INT

)
BEGIN

SET @RowNumber:=0; 



#DROP TEMPORARY TABLE Results;



CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.name 'Name',

    dori.description 'Description',

    dori.image_url 'ImageUrl',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by) 

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id IN (SELECT 

            fi.target_object_type_id

        FROM

            field_info fi 

			LEFT JOIN 

            data_object_relation_lookup dorl ON (fi.relation_id =dorl.relation_id AND dorl.relation_type != '1-M')

            JOIN

            service_type_object_relation_lookup STORL ON (fi.relation_id = STORL.relation_id AND STORL.relation_type != '1-M')

        WHERE

            fi.source_object_type_id = SOURCE_OBJECT_TYPE_ID

        AND fi.type = 'relation'

        AND dori.is_active = 1 AND 

        CASE 

        WHEN SOURCE_RECORD_ID = 0 THEN 

        1=1

        ELSE

          dori.`values` LIKE CONCAT('%','"',SOURCE_OBJECT_TYPE_ID,'_r":',SOURCE_RECORD_ID, '%') 

       

        END AND

        CASE 

        WHEN TARGET_OBJECT_TYPE_ID <> 0 THEN

          fi.target_object_type_id = TARGET_OBJECT_TYPE_ID

         ELSE 1=1

        END

        );

     	 SET _RecordCount =(SELECT COUNT(*) FROM Results);

SELECT 

    *

FROM

    Results

WHERE

    CASE

        WHEN _PageSize <> - 1 THEN RowNumber BETWEEN (_PageIndex - 1) * _PageSize + 1 AND (((_PageIndex - 1) * _PageSize + 1) + _PageSize) - 1

        ELSE 1 = 1

    END;

    

 

DROP TEMPORARY TABLE Results;         

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_OrganizationSettings`(
	IN APP_ID INT(11),
    IN USER_ID VARCHAR(128),
    IN SETTINGS_ID INT(11)
)
BEGIN
SELECT 
	OSI.settings_id SettingsId,
	OSI.account_id AccountId,
	OSI.name Name,
    OSI.value Value,    
	COALESCE(OSI.app_id, -1) AppId,
	OSI.description Description,
    OSI.is_active IsActive,
    OSI.allow_override AllowOverride
FROM
	accounts_app_xref AAX
	JOIN organization_settings_info OSI ON (AAX.accounts_id = OSI.account_id AND OSI.is_active = 1)
WHERE

 OSI.settings_id = IF (SETTINGS_ID <> -1, SETTINGS_ID, OSI.settings_id)
AND	AAX.app_id = APP_ID;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_QueuesCountByUserGroupID`(

	IN USER_GROUP_ID VARCHAR(255),

    IN APP_ID INT(11),

    IN STATUS_IND INT)
BEGIN

SELECT 

		count(si.step_id) as 'COUNT', 

		si.name 'StepName',		

		srti.name 'ServiceRequestTypeName',

        sri.service_request_type_id 'ServiceRequestTypeId',

		srti.css_class_name 'CssClassName',

		wssi.workflow_step_stage_id 'WorkFlowStepStageId',

		wsi.workflow_step_id 'WorkFlowStepId',

		si.step_id 'StepId',	

		si.css_class_name 'StepCssClassName'

	FROM   

		usergroup_permission_xref UGPX

			 JOIN

		permission_lookup pl   ON (UGPX.permission_id=pl.permission_id and  pl.type='R')

			 JOIN

		workflow_step_stage_info wssi ON (pl.source_id = wssi.workflow_step_id AND CASE WHEN STATUS_IND <> - 1 THEN wssi.process_indicator = STATUS_IND  ELSE TRUE  END)

			JOIN

		workflow_step_info wsi ON (wssi.workflow_step_id= wsi.workflow_step_id)    

			JOIN

		step_info si ON (wsi.step_id=si.step_id)

			JOIN

		servicerequest_info sri ON (wssi.service_request_id = sri.service_request_id AND CASE WHEN STATUS_IND <> - 1 THEN sri.status = STATUS_IND  ELSE TRUE  END) 

			 JOIN

		servicerequest_type_info srti ON (sri.service_request_type_id = srti.service_request_type_id)

	WHERE

		srti.app_id = APP_ID    AND  UGPX.user_group_id=USER_GROUP_ID

     group by  si.step_id ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_QuickLinksByAppId`(

	IN `APP_ID` INT,
    IN `USER_ID_VALUE` VARCHAR(255) 

)
    COMMENT 'Returns quicklinks defined for service'
BEGIN 


SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;


SELECT 

    asur.RoleId

INTO @USER_ROLE_ID FROM

    aspnetuserroles asur

WHERE

    asur.UserId = USER_ID_VALUE;



SELECT 

    asr.Name

INTO @USER_ROLE_NAME FROM

    aspnetroles asr

WHERE

    asr.Id = @USER_ROLE_ID;



SELECT 

    permission_id

INTO @VIEW_ALL_PERMISSION_ID FROM

    permission_lookup

WHERE

    name IN ('VIEW_ALL');

 

-- select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



SELECT 

    COUNT(rpx.role_id)

INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

    role_permission_xref rpx

WHERE

    rpx.permission_id = @VIEW_ALL_PERMISSION_ID

        AND rpx.role_id = @USER_ROLE_ID

GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;



SELECT 

    COUNT(upx.User_Id)

INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

    user_permission_xref upx

WHERE

    (upx.permission_id = @VIEW_ALL_PERMISSION_ID

        AND upx.User_Id = USER_ID_VALUE)

GROUP BY upx.User_Id;



SET SESSION group_concat_max_len = 100000000;

	SELECT srti.service_request_type_id serviceTypeId,

srti.name serviceName,

srti.description serviceDescription,

srti.css_class_name serviceCssClassName,              

   

 CONCAT(

  '[', GROUP_CONCAT(CONCAT('{"stepId":"', wsi.step_id , '", 

							 "stepName":"',si.NAME,'", 

                             "wsid":"',wsi.workflow_step_id,'", 

                             "wfid":"',wi.workflow_id,'", 

                             "category":"', wi.NAME,'",

                             "stepCssClassName":"',si.css_class_name,'",

                             "dynamic":"',( CASE WHEN si.is_dynamic_view = 1 THEN 'true' ELSE 'false' END),'"}')),

  ']' ) workflows



	FROM app_info ai

   
    
    
    JOIN servicerequest_type_info srti ON (ai.app_id =srti.app_id AND srti.deleted = 0)


	JOIN workflow_info wi ON (wi.service_request_type_id = srti.service_request_type_id and wi.deleted=0 and wi.is_default_version=1 and wi.is_approved=1)



	JOIN workflow_step_info wsi ON (wsi.workflow_id = wi.workflow_id AND wsi.initial_step = 1)
    

	JOIN permission_lookup pl ON (pl.source_id = wsi.workflow_step_id)
    

	JOIN step_info si ON (si.step_id = wsi.step_id AND si.is_active = 1)



	WHERE 
    
CASE 

				WHEN @USER_HAS_VIEW_ALL_PERMISSION = 0 THEN 

			(pl.permission_id IN (

			SELECT 

				ugPermissions.permission_id

			FROM

				usergroup_permission_xref ugPermissions

			WHERE

				ugPermissions.user_group_id IN (SELECT 

						user_group_id

					FROM

						user_usergroup_xref

					WHERE

						user_id = USER_ID_VALUE)

						

				UNION ALL

				

				SELECT 

				upx.permission_id

			FROM

				user_permission_xref upx

			WHERE

				upx.User_Id = USER_ID_VALUE

				

			UNION ALL

			

			SELECT 

				rpx.permission_id

			FROM

				role_permission_xref rpx

			WHERE

				rpx.role_id IN (SELECT asur.RoleId FROM aspnetuserroles asur WHERE asur.UserId = USER_ID_VALUE)))

			ELSE 

				TRUE

			END
	AND  srti.is_active = 1 AND ai.app_id = APP_ID



	GROUP BY 

    srti.service_request_type_id,

    srti.name ,

    srti.description,

    srti.css_class_name    ; 

SET SESSION group_concat_max_len = 1024;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_QuickLinksByTypeId`(



	IN `SERVICE_TYPE_ID` INT







)
    COMMENT 'Returns quicklinks defined for service'
BEGIN



	SELECT wsi.step_id StepId,



			 si.NAME `Name`, 



			 wi.NAME `Category`,



			 CONCAT('/custom-view/', wi.workflow_id, '/', wsi.step_id) Link



	FROM servicerequest_type_info srti



	JOIN workflow_info wi ON (wi.service_request_type_id = srti.service_request_type_id)



	JOIN workflow_step_info wsi ON (wsi.workflow_id = wi.workflow_id AND wsi.initial_step = 1)



	JOIN step_info si ON (si.step_id = wsi.step_id AND si.is_active = 1)



	WHERE srti.is_active = 1 AND srti.service_request_type_id = SERVICE_TYPE_ID



	GROUP BY wi.workflow_id; 



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_Report_Presets`(
IN APP_ID INT,
IN PRESET_ID INT, 
IN REPORT_ID INT ,
IN STATUS_ID INT
)
BEGIN

SELECT 
    rpx.query_string QueryString,
    rpx.created_by CreatedBy,
    rpx.created_on CreatedOn,
    rpx.last_updated_on LastUpdatedOn,
    rpx.last_updated_by LastUpdatedBy,
    rpx.is_default IsDefault,
    rpx.is_active IsActive,
    rpx.report_id AS ReportId,
    rpx.name AS PresetName,
    rpx.preset_id PresetId,
    rtype.app_id AppId,
    concat(anu.FirstName,' ', anu.LastName) AS LastUpdatedByName
FROM
    report_presets_xref rpx
        JOIN
    report ri ON (rpx.report_id = ri.report_id)
        #AND ri.is_active = 1)
        JOIN
    report_types rtype ON (rtype.report_type_id = ri.report_type_id
        AND rtype.app_id = APP_ID
        AND rtype.is_active = 1)
        JOIN aspnetusers anu ON anu.Id = rpx.last_updated_by
WHERE
    CASE
        WHEN PRESET_ID <> - 1 THEN rpx.preset_id = PRESET_ID
        ELSE 1 = 1
    END
        AND rpx.is_active = IF(STATUS_ID <> -1, STATUS_ID,rpx.is_active)
        AND rpx.report_id = REPORT_ID AND rpx.is_delete = 0;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ReportsById`(
IN APP_ID INT(11),
IN REPORT_TYPE_ID INT,
IN REPORT_ID INT,
IN CREATED_BY VARCHAR(255),
IN DATA_OBJECT_TYPE_ID NVARCHAR(500),
IN IS_PUBLIC INT )
BEGIN
	SELECT DISTINCT
		RT.`report_id` ReportID, 
		RT.`Name` ReportName,
		RT.`Description` ReportDescription,
		RT.`report_type_id` ReportTypeID,
        RTP.`name` ReportTypeName,
 		RTP.`data_object_type_id` DataObjectTypeID,
		RT.`config_json` Config_json,  
		RT.`created_by` CreatedBy,
		concat(c.FirstName,' ', c.LastName) CreatedByName,
		concat(l.FirstName,' ', l.LastName) LastUpdatedByName,
		RT.`last_updated_by` LastUpdatedBy,
		RT.`created_on` CreatedOn,
		RT.`last_updated_on` LastUpdatedOn,
		RT.`is_deleted` IsDeleted,
		RT.`is_active` IsActive,
		RT.`query_string` QueryString,
		RT.`datasource_id` DataSourceId
	FROM report_info RT  
	INNER JOIN report_types RTP  ON RT.report_type_id = RTP.report_type_id 
	JOIN aspnetusers c 
    JOIN aspnetusers l 
	WHERE RTP.app_id = IF(APP_ID <> -1, APP_ID,RTP.app_id) 
	AND   RTP.data_object_type_id IN ( IF(DATA_OBJECT_TYPE_ID <> -1, DATA_OBJECT_TYPE_ID,RTP.data_object_type_id))
	AND   RT.report_id = IF(REPORT_ID <> -1, REPORT_ID,RT.report_id)
	AND   RT.report_type_id = IF(REPORT_TYPE_ID <> -1, REPORT_TYPE_ID,RT.report_type_id)
	AND   RT.created_by = IF(CREATED_BY <> -1, CREATED_BY,RT.created_by)
    AND   RT.is_public =IF(IS_PUBLIC <> -1, IS_PUBLIC,RT.is_public) 
	AND   RT.created_by = c.Id
	AND   RT.last_updated_by = l.id
	AND   RT.is_deleted = 0
	#AND   RT.is_active = 1
	;
	 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_ReportTypeById`(
IN APP_ID INT,
IN REPORT_TYPE_ID INT,
IN DATA_OBJECT_TYPE_ID INT
)
BEGIN
SELECT DISTINCT
RT.`report_type_id` ReportTypeID,
RT.`Name` ReportTypeName,
RT.`Description` ReportTypeDescription,
RT.`data_object_type_id` DataObjectTypeID,
 
RT.`created_by` CreatedBy,
concat(c.FirstName,' ', c.LastName) CreatedByName,
concat(l.FirstName,' ', l.LastName) LastUpdatedByName,
RT.`last_updated_by` LastUpdatedBy,
RT.`created_on` CreatedOn,
RT.`last_updated_on` LastUpdatedOn,
RT.`is_deleted` IsDeleted,
RT.`is_active` IsActive
FROM  report_types RT 
JOIN  aspnetusers c 
JOIN  aspnetusers l 
WHERE RT.app_id = APP_ID
  AND RT.report_type_id = IF(REPORT_TYPE_ID <> -1, REPORT_TYPE_ID,RT.report_type_id)
  AND RT.data_object_type_id = IF(DATA_OBJECT_TYPE_ID <> -1, DATA_OBJECT_TYPE_ID,RT.data_object_type_id)
  AND RT.created_by = c.Id
  AND RT.last_updated_by = l.id
  AND RT.is_deleted = 0
  AND RT.is_active = 1;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_RolePermissions`(

IN ROLE_ID varchar(255))
BEGIN

SELECT  

	RPX.`role_id` RoleId,

	RPX.`permission_id` PermissionId,

    RPX.`access_level` AccessLevel 

FROM 

	`role_permission_xref`  as RPX 

WHERE 

	RPX.role_id = IF(ROLE_ID <> '-1', ROLE_ID, RPX.role_id); 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_RolesByUserId`(IN UserId VARCHAR(128))
BEGIN

SELECT 

    ur.RoleId, r.Name

FROM

    userroles ur,

    roles r

WHERE

    ur.UserId = UserId

        AND ur.RoleId = r.id;

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_RolesByUserName`(IN UserName VARCHAR(128))
BEGIN

SELECT 

    ur.RoleId, r.Name

FROM

    userroles ur,

    users u,

    roles r

WHERE

    ur.UserId = u.Id

    AND

    u.UserName = UserName

        AND ur.RoleId = r.id;

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_RuleById`(IN RULE_ID int)
BEGIN

SELECT 

    ri.rule_id AS RuleId,

    ri.name AS RuleName,   

    ri.short_name AS ShortName,

    ri.css_class_name AS CssClassName,

	ri.short_description AS ShortDescription,

    ri.long_description AS LongDescription,

    ri.service_request_type_id AS ServiceRequestTypeId,

    ri.workflow_id WorkflowId,

    ri.rule_type_id RuleTypeId,

    ri.update_fields UpdateFields,

    ri.active_from ActiveFrom,

    ri.active_until ActiveUntil,

    ri.is_active IsActive,

    fi.field_id FieldId,

    fi.name AS FieldName,

    fi.type AS FieldType,

    rpi.rule_parameter_id AS RuleParameterId,

    rpi.rule_parameter_type_id AS RuleParameterTypeId,

    rpi.operator AS Operator,

    rpi.value AS Value,

    rpi.range_start AS RangeStart,

    rpi.range_end AS RangeEnd,

    rpi.conjunction AS Conjunction,

    rpi.source_object_type_id AS SourceObjectTypeId

FROM

    rule_info ri,

    rule_parameter_info rpi,

    field_info fi

WHERE

    ri.rule_id = RULE_ID

        AND ri.rule_id = rpi.rule_id

        AND ri.deleted = 0

		-- AND rpi.rule_parameter_type_id = IF(rpi.criteria_type <> 'FN',rpi.rule_parameter_type_id,fi.field_id ); 
        
           AND rpi.rule_parameter_type_id = fi.field_id;

      

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Rules`(
IN SERVICE_TYPE_ID int,
IN RULE_ID int,
IN WORK_FLOW_ID INT
)
BEGIN

SELECT 

    ri.rule_id AS RuleId,

    ri.name AS RuleName,

    ri.short_description as ShortDescription,

    ri.long_description as LongDescription,

    ri.data_filter as DataFilter,

    ri.filter_logic as FilterLogic,

    ri.css_class_name as CssClassName,

    ri.service_request_type_id AS ServiceRequestTypeId,

    ri.rule_type_id RuleTypeId,

    ri.created_on CreatedOn,

    rtl.lookup_column RuleTypeName,

    ri.active_from ActiveFrom,

    ri.active_until ActiveUntil,

    ri.is_active IsActive,

    ri.workflow_id WorkflowId,

    wi.name WorkflowName,

    fi.field_id FieldId,

    fi.name AS FieldName,

    fi.type AS FieldTypeName,

    fi.display_name as DisplayName,

    fi.readonly as ReadOnly,

    fi.unique as 'Unique',

    fi.parent_field_id as ParentFieldId,

    rpi.rule_parameter_id AS RuleParameterId,

    rpi.rule_parameter_type_id AS RuleParameterTypeId,

    rpi.operator AS Operator,

    rpi.value AS Value,

    rpi.range_start AS RangeStart,

    rpi.range_end AS RangeEnd,

    rpi.conjunction AS Conjunction,

    CONCAT(C.FirstName, ' ', C.LastName) AS 'CreatedByName',

    CONCAT(L.FirstName, ' ', L.LastName) AS 'LastUpdatedByName'

FROM

    rule_info ri,    

    rule_parameter_info rpi,

    rule_type_lookup rtl,

    workflow_info wi,

    field_info fi,    

    aspnetusers C ,

    aspnetusers L 

WHERE

        ri.rule_id = rpi.rule_id

        AND ri.deleted = 0

        AND ri.rule_type_id = rtl.rule_type_id

		AND ri.workflow_id = wi.workflow_id  
        
        AND rpi.rule_parameter_type_id = fi.field_id 

        AND ri.service_request_type_id=if(SERVICE_TYPE_ID<>-1 ,SERVICE_TYPE_ID,ri.service_request_type_id)

        AND ri.rule_id=if((RULE_ID<>-1) ,RULE_ID,ri.rule_id)
        
        AND ri.workflow_id =if((WORK_FLOW_ID<>-1) ,WORK_FLOW_ID,wi.workflow_id) 

        AND c.id = ri.created_by

        and l.id = ri.last_updated_by;

        

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_RulesByServiceTypeAndRuleType`(IN SERVICE_TYPE_ID INT, IN RULE_TYPE VARCHAR(50))
BEGIN

SELECT 
 
    ri.rule_id AS RuleId,

    ri.name AS RuleName,

    ri.service_request_type_id AS ServiceRequestTypeId,

    ri.workflow_id WorkflowId,

    ri.rule_type_id RuleTypeId,

    ri.update_fields UpdateFields,

    fi.field_id FieldId,

    fi.name AS FieldName,

    fi.type AS FieldType,

    COALESCE(fi.formula_expression, '') AS Formula,

    rpi.rule_parameter_id AS RuleParameterId,

    rpi.rule_parameter_type_id AS RuleParameterTypeId,

    rpi.operator AS Operator,

    rpi.value AS Value,

    rpi.range_start AS RangeStart,

    rpi.range_end AS RangeEnd,

    rpi.conjunction AS Conjunction

FROM 

    rule_info ri
    
		JOIN
    
	workflow_info wi On (ri.workflow_id = wi.workflow_id AND wi.deleted = 0)
    
        LEFT JOIN

    rule_type_lookup rtl ON (ri.rule_type_id = rtl.rule_type_id)

        LEFT JOIN

    rule_parameter_info rpi ON (ri.rule_id = rpi.rule_id)

        LEFT JOIN

    field_info fi ON (rpi.rule_parameter_type_id = fi.field_id)

WHERE

    ri.service_request_type_id = SERVICE_TYPE_ID

    AND

		ri.is_active = 1 

		AND (ri.active_from < NOW() AND (ri.active_until IS NULL OR ri.active_until > NOW()))

        AND ri.deleted = 0

        AND rtl.lookup_column = IF(RULE_TYPE <> '', RULE_TYPE, rtl.lookup_column);

/*  GROUP BY ri.rule_id  */

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_RulesBySource`(
IN SOURCE_ID INT(11),
IN SOURCE_TYPE VARCHAR(50))
BEGIN
 SELECT 

		ri.rule_id AS RuleId,

		ri.name AS RuleName,

		COALESCE(ri.service_request_type_id, -1) AS ServiceRequestTypeId,

		COALESCE(ri.rule_type_id, -1) RuleTypeId,
        
        COALESCE(ri.watch_list_id, -1) WatchListId,

		rtl.lookup_column RuleTypeName,

		ri.active_from ActiveFrom,

		ri.active_until ActiveUntil, 

		ri.is_active IsActive,

		COALESCE(ri.workflow_id, -1) WorkflowId,

		ri.update_fields UpdateFields,

		fi.field_id FieldId,

		fi.name AS FieldName,

		fi.type AS FieldTypeName,

		rpi.rule_parameter_id AS RuleParameterId,

		rpi.rule_parameter_type_id AS RuleParameterTypeId,

		rpi.operator AS Operator,

		rpi.value AS Value,
        
        rpi.value_source_type ValueSourceType,

		rpi.range_start AS RangeStart,

		rpi.range_end AS RangeEnd,

		rpi.conjunction AS Conjunction,
		
		rpi.criteria_type AS CriteriaType,
		
		rpi.function_value AS CriteriaTypeMaxValue,
		
		 rpi.function_type AS FunctionType

	FROM

		rule_info ri 
	JOIN rule_parameter_info rpi ON (rpi.rule_id = ri.rule_id) 
    JOIN rule_type_lookup rtl ON (rtl.rule_type_id = ri.rule_type_id)
    LEFT JOIN field_info fi ON (rpi.rule_parameter_type_id = fi.field_id)
    WHERE
		CASE WHEN SOURCE_TYPE = 'WATCHLIST' THEN
			ri.watch_list_id = SOURCE_ID 
            AND ri.is_active = 1
            AND ri.deleted = 0
            
            WHEN SOURCE_TYPE = 'WORKFLOW' THEN
            ri.workflow_id = SOURCE_ID 
            AND ri.is_active = 1
            AND ri.deleted = 0
            
        ELSE 
			1 = 0
        END;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Schedules`()
BEGIN

	SELECT schedule_id 'ScheduleId',

    name 'Name',

    is_active 'IsActive',

    freq_type 'FreqType',

    freq_interval 'FreqInterval',

    freq_subday_type 'FreqSubdayType',

    freq_subday_interval 'FreqSubdayInterval',

    freq_relative_interval 'FreqRelativeInterval',

    freq_recurrence_factor 'FreqRecurrenceFactor',

    active_start_date 'ActiveStartDate',

    active_end_date 'ActiveEndDate',

    active_start_time 'ActiveStartTime',

    active_end_time 'ActiveEndTime',

    created_by 'CreatedBy',

    created_on 'CreatedOn',

    updated_by 'UpdatedBy',

    updated_on 'UpdatedOn'

FROM schedule_task

WHERE st.is_active = 1 

	AND (TIMESTAMPDIFF(MINUTE,DATE(Now()),Now())) < st.active_start_time  

	AND st.active_start_time  < (TIMESTAMPDIFF(MINUTE,DATE(Now()),CURRENT_DATE() + INTERVAL 1 DAY))

	OR  (active_start_date <= Now() <active_end_date );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Service_InfoById`(IN SERVICE_TYPE_ID INT)
BEGIN

SELECT 

    service_request_type_id,

    app_id,

    name,

    description,

    created_by,

    created_on,

    last_updated_by,

    last_updated_on,

    deleted,

    payload_type_id,

    css_class_name,

    short_name,

    is_active,

    input_payload,

    layout_config_json

FROM

    servicerequest_type_info where service_request_type_id= SERVICE_TYPE_ID;



SELECT 

    fi.field_id AS Id,

    fi.service_request_type_id AS 'ServiceRequestTypeId',

    fi.name AS 'Name',

    fi.display_name AS 'DisplayName',

    fi.type AS 'TypeName',

    fi.unique AS 'IsUnique',

    fi.readonly AS 'IsReadOnly',

    fi.created_by AS 'CreatedBy',

    fi.created_on AS 'CreatedOn',

    fi.last_updated_by AS 'LastUpdatedBy',

    fi.last_updated_on AS 'LastUpdatedOn',

    CONCAT(c.FirstName, ' ', c.LastName) CreatedByName,

    CONCAT(l.FirstName, ' ', l.LastName) LastUpdatedByName,

    COALESCE(lvi.lookup_value_id, - 1) 'LookupId',

    COALESCE(lvi.values, '') 'Values',

    COALESCE(lvi.name, '') LookupName,

    lvi.is_global LookupIsGlobal,

    COALESCE(fi.relation_id, 0) RelationId,

    COALESCE(dorl.relation_type, '') RelationshipType,

    COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,

    COALESCE(sdotl.display_name, '') SourceObjectTypeName,

    COALESCE(sdotl.plural_label, '') SourceObjectTypePluralLabel,

    COALESCE(tdotl.display_name, '') TargetObjectTypeName,

    COALESCE(tdotl.plural_label, '') TargetObjectTypePluralLabel,

    COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId

FROM

    field_info fi

        JOIN

    aspnetusers c ON (c.Id = fi.created_by)

        JOIN

    aspnetusers l ON (l.Id = fi.last_updated_by)

        LEFT JOIN

    field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id

        AND fi.type = 'lookup')

        LEFT JOIN

    lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)

        LEFT JOIN

    data_object_relation_lookup dorl ON (fi.relation_id = dorl.relation_id)

        LEFT JOIN

    data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id)

        LEFT JOIN

    data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id)

WHERE

    fi.service_request_type_id = SERVICE_TYPE_ID; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceAndObjectInfo`(
IN ID int,
IN APP_ID int
)
BEGIN
SELECT
Id,
ParentTypeId,
WorkflowStepStageId,
WorkflowStepId,
Description,
LastUpdatedDate,
RecordType,
NavigateURL from
(SELECT
data_object_record_id AS Id,
- 1 AS WorkflowStepStageId,
- 1 AS WorkflowStepId,
data_object_type_id AS ParentTypeId,
description AS Description,
last_updated_on AS LastUpdatedDate,
'Object' AS RecordType,
CONCAT('/objects/record/', data_object_type_id, '/view/', data_object_record_id) AS NavigateURL
FROM
data_object_record_info
WHERE
data_object_record_id IN (select data_object_record_id from data_object_type_lookup WHERE
data_object_record_id=ID AND app_id= APP_ID)
union all
SELECT
si.service_request_id AS Id,
wssi.workflow_step_stage_id AS WorkflowStepStageId,
wssi.workflow_step_id AS WorkflowStepId,
service_request_type_id AS ParentTypeId,
wsi.name AS Description,
si.last_updated_on AS LastUpdatedDate,
'Service' AS RecordType,
'/my-queues/detail/{0}' AS NavigateURL
FROM
servicerequest_info si
LEFT JOIN workflow_step_stage_info wssi ON (wssi.service_request_id = si.service_request_id
AND wssi.process_indicator = 0)
LEFT JOIN workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)
WHERE
si.service_request_id = ID AND
si.service_request_type_id IN (SELECT service_request_type_id FROM servicerequest_type_info WHERE app_id=APP_ID) ) tbl
order by Id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceRequestByBatchIdAndServiceTypeId`(

IN SERVICE_TYPE_ID INT,

IN WORKFLOW_STAGE_ID INT,

IN USER_ID_VALUE VARCHAR(255),

IN STATUS_IND INT,

IN BATCH_ID INT,

IN BENEFICIARY_ID INT,

OUT VIEW_CONFIG_FIELDS LONGTEXT)
BEGIN



DECLARE GRID_VIEW INT DEFAULT 102;



SELECT

sri.service_request_type_id AS ServiceRequestTypeId,

sri.service_request_id AS ServiceRequestId,

sri.batch_id AS BatchId,

sri.status AS Status,

sri.created_by AS CreatedBy,

COALESCE(sri.created_on, '') AS CreatedOn,

COALESCE(sri.last_updated_on, '') AS LastUpdatedOn,

sri.last_updated_by AS LastUpdatedBy,

COALESCE(wssi.workflow_step_stage_id, 0) WorkflowStepStageId,

COALESCE(wssi.workflow_step_id,-1) WorkflowStepId,

COALESCE(wssi.process_indicator, 0) ProcessIndicator,

COALESCE(wssi.role_id, '') RoleId,

si.name StepName,

si.css_class_name WorkflowStepCssClassName,

sri.benificiary_id BenificiaryId,

wsai.action_id 'StepActionId',

sai.name 'ActionName',

si.is_dynamic_view 'IsDynamic',

b.first_name 'FirstName',

b.last_name 'LastName',

b.benificiary_type 'BenificiaryType',

b.org_title 'OrgTitle',

CONCAT(user.FirstName, ' ', user.LastName) 'LastUpdatedByName'

FROM

servicerequest_info sri



LEFT JOIN workflow_step_stage_info wssi ON (wssi.service_request_id = sri.service_request_id

AND wssi.process_indicator = sri.status

AND wssi.workflow_step_id in

(SELECT pl.source_id AS workflow_step_id FROM permission_lookup pl

JOIN role_permission_xref rpx

ON (pl.permission_id = rpx.permission_id)

WHERE rpx.role_id IN

( SELECT ur.RoleId FROM aspnetuserroles ur WHERE ur.UserId = USER_ID_VALUE)

AND pl.type = 'R') )



LEFT JOIN workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)

LEFT JOIN step_info si ON (si.step_id = wsi.step_id)

LEFT JOIN workflow_step_action_info wsai ON (wsai.workflow_step_id = wsi.workflow_step_id)

LEFT JOIN step_action_info sai ON (sai.step_action_id = wsai.action_id)

LEFT JOIN benificiary_info b ON (b.benificiary_id = sri.benificiary_id)

LEFT JOIN aspnetusers user ON (user.Id = sri.last_updated_by)

WHERE

CASE WHEN SERVICE_TYPE_ID <> -1 THEN sri.service_request_type_id = SERVICE_TYPE_ID ELSE TRUE END

AND CASE WHEN BATCH_ID <> -1 THEN sri.batch_id = BATCH_ID ELSE TRUE END

AND CASE WHEN BENEFICIARY_ID <> -1 THEN sri.benificiary_id = BENEFICIARY_ID ELSE TRUE END

AND CASE WHEN STATUS_IND <> -1 THEN sri.status = STATUS_IND ELSE TRUE END

GROUP BY sri.service_request_id

ORDER BY wssi.last_updated_on DESC;



SELECT config_json FROM service_type_view_xref where service_request_type_id = SERVICE_TYPE_ID AND view_type_id = GRID_VIEW AND (user_id = USER_ID_VALUE OR user_id is null) GROUP BY user_id ORDER BY user_id desc LIMIT 1 INTO VIEW_CONFIG_FIELDS;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`superadmin` PROCEDURE `Get_ServiceRequestByIdAndBetweenRecords`(

IN SERVICE_TYPE_ID INT,

IN RECORD_TYPE INT,

IN START_DATE DATE,

IN END_DATE DATE,

IN USER_ID_VALUE VARCHAR(255),

OUT VIEW_CONFIG_FIELDS LONGTEXT)
BEGIN



DECLARE GRID_VIEW INT DEFAULT 102;



-- SET USER_ID_VALUE = 'e95d1fd5-11de-4173-a969-aa83ad335a12';

SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





SELECT
asur.RoleId
INTO @USER_ROLE_ID FROM
aspnetuserroles asur
WHERE
asur.UserId = USER_ID_VALUE;



SELECT
asr.Name
INTO @USER_ROLE_NAME FROM
aspnetroles asr
WHERE
asr.Id = @USER_ROLE_ID;



SELECT
permission_id
INTO @VIEW_ALL_PERMISSION_ID FROM
permission_lookup
WHERE
name IN ('VIEW_ALL');

-- select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



SELECT
COUNT(rpx.role_id)
INTO @USER_HAS_VIEW_ALL_PERMISSION FROM
role_permission_xref rpx
WHERE
rpx.permission_id = @VIEW_ALL_PERMISSION_ID
AND rpx.role_id = @USER_ROLE_ID
GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;





SELECT
COUNT(upx.User_Id)
INTO @USER_HAS_VIEW_ALL_PERMISSION FROM
user_permission_xref upx
WHERE
(upx.permission_id = @VIEW_ALL_PERMISSION_ID
AND upx.User_Id = USER_ID_VALUE)
GROUP BY upx.User_Id;



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By UserID';



SELECT
sri.service_request_type_id AS ServiceRequestTypeId,
sri.service_request_id AS ServiceRequestId,
sri.batch_id AS BatchId,
sri.status AS Status,
sri.created_by AS CreatedBy,
COALESCE(sri.created_on, '') AS CreatedOn,
COALESCE(sri.last_updated_on, '') AS LastUpdatedOn,
sri.last_updated_by AS LastUpdatedBy,
COALESCE(wssi.workflow_step_stage_id, 0) WorkflowStepStageId,
COALESCE(wssi.workflow_step_id, - 1) WorkflowStepId,
COALESCE(wssi.process_indicator, 0) ProcessIndicator,
COALESCE(wssi.role_id, '') RoleId,
COALESCE(wsi.name, 'Auto Completed') StepName,
si.css_class_name WorkflowStepCssClassName,
sri.benificiary_id BenificiaryId,
sai.step_action_id 'StepActionId',
sai.name 'ActionName',
si.is_dynamic_view 'IsDynamic',
b.first_name 'FirstName',
b.last_name 'LastName',
b.benificiary_type 'BenificiaryType',
b.org_title 'OrgTitle',
CONCAT(user.FirstName, ' ', user.LastName) 'LastUpdatedByName'
FROM
servicerequest_info sri
LEFT JOIN
workflow_step_stage_info wssi ON (wssi.service_request_id = sri.service_request_id)
LEFT JOIN
workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)
LEFT JOIN
workflow_step_action_info wsai ON (wsai.workflow_step_id = wsi.workflow_step_id)
LEFT JOIN
step_info si ON (wsi.step_id = si.step_id)
LEFT JOIN
step_action_info sai ON (sai.step_id = si.step_id)
LEFT JOIN
benificiary_info b ON (b.benificiary_id = sri.benificiary_id)
LEFT JOIN
aspnetusers user ON (user.Id = sri.last_updated_by),
servicerequest_type_info srti
WHERE
srti.app_id = APP_ID
AND srti.deleted = 0
AND srti.is_active = 1
AND sri.service_request_type_id = SERVICE_TYPE_ID
AND sri.created_on >= START_DATE
AND sri.created_on <= END_DATE
GROUP BY sri.service_request_id
ORDER BY wssi.process_indicator DESC;



SELECT
config_json
FROM
service_type_view_xref
WHERE
service_request_type_id = SERVICE_TYPE_ID
AND view_type_id = GRID_VIEW
AND (user_id = USER_ID_VALUE
OR user_id IS NULL)
GROUP BY user_id
ORDER BY user_id DESC
LIMIT 1 INTO VIEW_CONFIG_FIELDS;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceRequestByTypeIdAndStatus`(

IN SERVICE_TYPE_ID INT, 

IN WORKFLOW_STEP_ID INT, 

IN USER_ID_VALUE VARCHAR(255),

IN STATUS_IND INT,

IN BATCH_ID INT,

IN BENEFICIARY_ID INT,

OUT VIEW_CONFIG_FIELDS LONGTEXT)
BEGIN



DECLARE GRID_VIEW INT DEFAULT 102;



-- SET USER_ID_VALUE = 'e95d1fd5-11de-4173-a969-aa83ad335a12';

SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





SELECT
asur.RoleId
INTO @USER_ROLE_ID FROM
aspnetuserroles asur
WHERE
asur.UserId = USER_ID_VALUE;



SELECT
asr.Name
INTO @USER_ROLE_NAME FROM
aspnetroles asr
WHERE
asr.Id = @USER_ROLE_ID;



SELECT
permission_id
INTO @VIEW_ALL_PERMISSION_ID FROM
permission_lookup
WHERE
name IN ('VIEW_ALL');

-- select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



SELECT
COUNT(rpx.role_id)
INTO @USER_HAS_VIEW_ALL_PERMISSION FROM
role_permission_xref rpx
WHERE
rpx.permission_id = @VIEW_ALL_PERMISSION_ID
AND rpx.role_id = @USER_ROLE_ID
GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;





SELECT
COUNT(upx.User_Id)
INTO @USER_HAS_VIEW_ALL_PERMISSION FROM
user_permission_xref upx
WHERE
(upx.permission_id = @VIEW_ALL_PERMISSION_ID
AND upx.User_Id = USER_ID_VALUE)
GROUP BY upx.User_Id;



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By UserID';



/*

SELECT

COUNT(ugrpx.user_group_id) INTO @USER_HAS_VIEW_ALL_PERMISSION

FROM

usergroup_permission_xref ugrpx

WHERE

(ugrpx.permission_id = @VIEW_ALL_PERMISSION_ID

AND

ugrpx.user_group_id IN (select user_group_id from user_usergroup_xref uux where uux.user_Id = USER_ID_VALUE))



GROUP BY ugrpx.user_group_id;

*/



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By User Group';



CASE WHEN (STATUS_IND <> 0 && BATCH_ID =-1) THEN

SELECT

sri.service_request_type_id AS ServiceRequestTypeId,

sri.service_request_id AS ServiceRequestId,

sri.batch_id AS BatchId,

sri.status AS Status,

sri.created_by AS CreatedBy,

COALESCE(sri.created_on, '') AS CreatedOn,

COALESCE(sri.last_updated_on, '') AS LastUpdatedOn,

sri.last_updated_by AS LastUpdatedBy,

COALESCE(wssi.workflow_step_stage_id, 0) WorkflowStepStageId,

COALESCE(wssi.workflow_step_id, - 1) WorkflowStepId,

COALESCE(wssi.process_indicator, 0) ProcessIndicator,

COALESCE(wssi.role_id, '') RoleId,

COALESCE(wsi.step_id, 0) AS StepId,

COALESCE(wsi.name,'Auto Completed') StepName,

si.css_class_name WorkflowStepCssClassName,

sri.benificiary_id BenificiaryId,

sai.step_action_id 'StepActionId',

sai.name 'ActionName',

si.is_dynamic_view 'IsDynamic',

b.first_name 'FirstName',

b.last_name 'LastName',

b.benificiary_type 'BenificiaryType',

b.org_title 'OrgTitle',

CONCAT(user.FirstName, ' ', user.LastName) 'LastUpdatedByName',

COALESCE(UPR.grid_view_display_type,1) GridviewDisplaytypeID, 

COALESCE(UPR.field_id,0) FieldID

FROM

permission_lookup pl



LEFT JOIN

workflow_step_stage_info wssi ON (pl.source_id = wssi.workflow_step_id

AND CASE WHEN (STATUS_IND = 1) THEN (wssi.process_indicator = STATUS_IND AND wssi.process_time < NOW())

ELSE TRUE

END

AND CASE

WHEN WORKFLOW_STEP_ID <> - 1 THEN wssi.workflow_step_id = WORKFLOW_STEP_ID

ELSE TRUE

END)



JOIN

servicerequest_info sri ON (wssi.service_request_id = sri.service_request_id

AND CASE

WHEN SERVICE_TYPE_ID <> -1 THEN sri.service_request_type_id = SERVICE_TYPE_ID

ELSE TRUE

END

AND CASE

WHEN BATCH_ID <> -1 THEN sri.batch_id = BATCH_ID

ELSE TRUE

END

AND CASE

WHEN BENEFICIARY_ID <> -1 THEN sri.benificiary_id = BENEFICIARY_ID

ELSE TRUE

END

AND CASE

WHEN STATUS_IND <> -1 THEN sri.status = STATUS_IND

ELSE TRUE

END)

LEFT JOIN

user_preference UPR ON (sri.service_request_type_id = UPR.source_type_id)

LEFT JOIN

workflow_step_info wsi ON (wssi.workflow_step_id= wsi.workflow_step_id)

LEFT JOIN

step_info si ON (si.step_id = wsi.step_id)

LEFT JOIN

workflow_step_action_info wsai ON (wsai.workflow_step_id = wsi.workflow_step_id)

LEFT JOIN

step_action_info sai ON (sai.step_id = si.step_id)

LEFT JOIN

benificiary_info b ON (b.benificiary_id = sri.benificiary_id)

LEFT JOIN

aspnetusers user ON (user.Id = sri.last_updated_by)

WHERE

CASE

WHEN @USER_HAS_VIEW_ALL_PERMISSION = 0 THEN

pl.permission_id IN (

SELECT

ugPermissions.permission_id

FROM

usergroup_permission_xref ugPermissions

WHERE

ugPermissions.user_group_id IN (SELECT

user_group_id

FROM

user_usergroup_xref

WHERE

user_id = USER_ID_VALUE)



UNION ALL



SELECT

upx.permission_id

FROM

user_permission_xref upx

WHERE

upx.User_Id = USER_ID_VALUE



UNION ALL



SELECT

rpx.permission_id

FROM

role_permission_xref rpx

WHERE

rpx.role_id IN (SELECT asur.RoleId FROM aspnetuserroles asur WHERE asur.UserId = USER_ID_VALUE))

AND pl.type = 'R'

ELSE

TRUE

END

GROUP BY wssi.workflow_step_stage_id

ORDER BY sri.created_on DESC;



WHEN (BATCH_ID <> 0) THEN



SELECT

sri.service_request_type_id AS ServiceRequestTypeId,

sri.service_request_id AS ServiceRequestId,

sri.batch_id AS BatchId,

sri.status AS Status,

sri.created_by AS CreatedBy,

COALESCE(sri.created_on, '') AS CreatedOn,

COALESCE(sri.last_updated_on, '') AS LastUpdatedOn,

sri.last_updated_by AS LastUpdatedBy,

COALESCE(wssi.workflow_step_stage_id, 0) WorkflowStepStageId,

COALESCE(wssi.workflow_step_id,-1) WorkflowStepId,

COALESCE(wssi.process_indicator, 0) ProcessIndicator,

COALESCE(wssi.role_id, '') RoleId,

COALESCE(wsi.name,'Auto Completed') StepName,

si.css_class_name WorkflowStepCssClassName,

sri.benificiary_id BenificiaryId,

wsai.action_id 'StepActionId',

sai.name 'ActionName',

si.is_dynamic_view 'IsDynamic',

b.first_name 'FirstName',

b.last_name 'LastName',

b.benificiary_type 'BenificiaryType',

b.org_title 'OrgTitle',

CONCAT(user.FirstName, ' ', user.LastName) 'LastUpdatedByName'

FROM

servicerequest_info sri



LEFT JOIN workflow_step_stage_info wssi ON (wssi.service_request_id = sri.service_request_id

AND wssi.process_indicator = sri.status

AND wssi.workflow_step_id in

(SELECT pl.source_id AS workflow_step_id FROM permission_lookup pl

JOIN role_permission_xref rpx

ON (pl.permission_id = rpx.permission_id)

WHERE rpx.role_id IN

( SELECT ur.RoleId FROM aspnetuserroles ur WHERE ur.UserId = USER_ID_VALUE)

AND pl.type = 'R') )

LEFT JOIN workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)

LEFT JOIN step_info si ON (si.step_id = wsi.step_id)

LEFT JOIN workflow_step_action_info wsai ON (wsai.workflow_step_id = wsi.workflow_step_id)

LEFT JOIN step_action_info sai ON (sai.step_action_id = wsai.action_id)

LEFT JOIN benificiary_info b ON (b.benificiary_id = sri.benificiary_id)

LEFT JOIN aspnetusers user ON (user.Id = sri.last_updated_by)

WHERE

CASE WHEN SERVICE_TYPE_ID <> -1 THEN sri.service_request_type_id = SERVICE_TYPE_ID ELSE TRUE END

AND CASE WHEN BATCH_ID <> -1 THEN sri.batch_id = BATCH_ID ELSE TRUE END

AND CASE WHEN BENEFICIARY_ID <> -1 THEN sri.benificiary_id = BENEFICIARY_ID ELSE TRUE END

AND CASE WHEN STATUS_IND <> -1 THEN sri.status = STATUS_IND ELSE TRUE END

GROUP BY sri.service_request_id

ORDER BY sri.created_on DESC;



ELSE

SELECT

sri.service_request_type_id AS ServiceRequestTypeId,

sri.service_request_id AS ServiceRequestId,

sri.batch_id AS BatchId,

sri.status AS Status,

sri.created_by AS CreatedBy,

COALESCE(sri.created_on, '') AS CreatedOn,

COALESCE(sri.last_updated_on, '') AS LastUpdatedOn,

sri.last_updated_by AS LastUpdatedBy,

COALESCE(wssi.workflow_step_stage_id, 0) WorkflowStepStageId,

COALESCE(wssi.workflow_step_id, - 1) WorkflowStepId,

COALESCE(wssi.process_indicator, 0) ProcessIndicator,

COALESCE(wssi.role_id, '') RoleId,

COALESCE(wsi.name,'Auto Completed') StepName,

si.css_class_name WorkflowStepCssClassName,

sri.benificiary_id BenificiaryId,

sai.step_action_id 'StepActionId',

COALESCE(wsi.name,'Auto Completed') StepName,

si.is_dynamic_view 'IsDynamic',

b.first_name 'FirstName',

b.last_name 'LastName',

b.benificiary_type 'BenificiaryType',

b.org_title 'OrgTitle',

CONCAT(user.FirstName, ' ', user.LastName) 'LastUpdatedByName'

FROM

servicerequest_info sri

LEFT JOIN workflow_step_stage_info wssi ON (wssi.service_request_id = sri.service_request_id)

LEFT JOIN workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)

LEFT JOIN workflow_step_action_info wsai ON (wsai.workflow_step_id = wsi.workflow_step_id)

LEFT JOIN step_info si ON (wsi.step_id = si.step_id)

LEFT JOIN step_action_info sai ON (sai.step_id = si.step_id)

LEFT JOIN benificiary_info b ON (b.benificiary_id = sri.benificiary_id)

LEFT JOIN aspnetusers user ON (user.Id = sri.last_updated_by),

servicerequest_type_info srti

WHERE

srti.app_id = APP_ID

AND

srti.deleted = 0

AND

srti.is_active = 1

AND

sri.service_request_type_id = srti.service_request_type_id

AND

sri.status = 0

GROUP BY sri.service_request_id

ORDER BY sri.created_on DESC;



END CASE;



SELECT
config_json
FROM
service_type_view_xref
WHERE
service_request_type_id = SERVICE_TYPE_ID
AND view_type_id = GRID_VIEW
AND (user_id = USER_ID_VALUE
OR user_id IS NULL)
GROUP BY user_id
ORDER BY user_id DESC
LIMIT 1 INTO VIEW_CONFIG_FIELDS;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceRequestCountsByUserIdAndStatus`(

    IN USER_ID_VALUE VARCHAR(255),

    IN STATUS_INDICATOR INT,

    IN APP_ID INT,

    IN NUMBER_OF_SERVICE_TYPES INT)
BEGIN



	



SET @VIEW_MODIFY_ALL_PERMISSION = -1;

SET @USER_ROLE_ID = '';

SET @USER_ROLE_NAME = '';





select asur.RoleId into @USER_ROLE_ID from aspnetuserroles asur where asur.UserId = USER_ID_VALUE;



 --  select asr.Name into @USER_ROLE_NAME from aspnetroles asr where asr.Id = @USER_ROLE_ID;



select permission_id into @VIEW_MODIFY_ALL_PERMISSION from permission_lookup where name IN ('VIEW_ALL');

--     select @VIEW_MODIFY_ALL_PERMISSION, @USER_ROLE_ID, @USER_ROLE_NAME;





SET @USER_HAS_VIEW_MODIFY_ALL_PERMISSION = 0;



SELECT 

    COUNT(rpx.role_id) INTO @USER_HAS_VIEW_MODIFY_ALL_PERMISSION 

FROM

	role_permission_xref rpx 

WHERE

	rpx.permission_id = @VIEW_MODIFY_ALL_PERMISSION

    AND

    rpx.role_id = @USER_ROLE_ID  

GROUP BY rpx.role_id;



 -- select @USER_HAS_VIEW_MODIFY_ALL_PERMISSION as 'User has View All Permission By Role' ;



SELECT 

    COUNT(upx.User_Id) INTO @USER_HAS_VIEW_MODIFY_ALL_PERMISSION 

FROM

	user_permission_xref upx 

WHERE

	(upx.permission_id = @VIEW_MODIFY_ALL_PERMISSION

    AND

    upx.User_Id = USER_ID_VALUE)

  

GROUP BY upx.User_Id;



 --   SELECT @USER_HAS_VIEW_MODIFY_ALL_PERMISSION AS 'User has View All Permission By UserID';





SELECT 

    srti.service_request_type_id ServiceRequestTypeId,

    srti.name `Name`,

    srti.css_class_name CssClassName,

    COUNT(sri.service_request_id) AS `COUNT`

FROM

    servicerequest_type_info srti

        JOIN

    servicerequest_info sri ON (sri.service_request_type_id = srti.service_request_type_id AND sri.status = STATUS_INDICATOR)

        JOIN

    workflow_step_stage_info wssi  ON (wssi.service_request_id = sri.service_request_id

        AND wssi.process_indicator = STATUS_INDICATOR

        AND

        CASE 

			WHEN @USER_HAS_VIEW_MODIFY_ALL_PERMISSION = 0 THEN 

			 wssi.workflow_step_id IN (SELECT 

				pl.source_id AS workflow_step_id

			FROM

				permission_lookup pl

					JOIN

				 usergroup_permission_xref ugrp ON (pl.permission_id = ugrp.permission_id 

					AND ugrp.user_group_id IN (SELECT user_group_id from user_usergroup_xref uugi where uugi.user_id = USER_ID_VALUE))

			WHERE

				pl.type = 'R')

			ELSE

				 1=1 

		END 

		)

		

WHERE

    srti.app_id = APP_ID

GROUP BY ServiceRequestTypeId

HAVING COUNT(sri.service_request_id) > 0

ORDER BY `COUNT` DESC LIMIT NUMBER_OF_SERVICE_TYPES;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceRequestInfoById`(IN SERVICE_REQUEST_ID longtext)
BEGIN

set @qry = concat('SELECT

    s.service_request_id AS ServiceRequestId,

	s.batch_id AS BatchId,
    
    s.service_request_type_id AS ServiceRequestTypeId,

    st.Name AS ServiceRequestType,

    s.status AS  ''Status'',

    s.created_on AS CreatedOn,

    s.last_updated_on AS LastUpdatedOn,

    IFNULL(concat(c.FirstName, '' '', c.LastName), '''') AS CreatedByName,

    IFNULL(concat(l.FirstName, '' '', l.LastName), '''') AS LastUpdatedByName,

    IFNULL(s.data_input, '''') AS DataInput,

    COALESCE(b.benificiary_id, 0) BenificiaryId,

    COALESCE(b.benificiary_type, 0) BenificiaryType,

    COALESCE(b.first_name, '''') FirstName,

    COALESCE(b.last_name, '''') LastName,

    COALESCE(b.email, '''') Email,

    COALESCE(b.phone_number, '''') PhoneNumber,

    COALESCE(b.fax_number, '''') FaxNumber,

    COALESCE(b.additional_fields, '''') AdditionalFields,

    COALESCE(b.org_title, '''') OrgTitle,

    b.date_of_birth DateOfBirth,

    COALESCE(b.gender, '''') Gender,

    b.middile_initial MiddleInitial,

    b.address_line_1 AddressLine1,

    b.address_line_2 AddressLine2,

    b.city City,

    b.state State,

    b.country_code CountryCode,

    b.zipcode ZipCode, 

    b.is_deleted IsDeleted

FROM

    servicerequest_info s

    LEFT JOIN servicerequest_type_info st ON (st.service_request_type_id = s.service_request_type_id)

        LEFT JOIN

    aspnetusers c ON (c.Id = s.created_by)

        LEFT JOIN

    aspnetusers l ON (l.Id = s.last_updated_by)

        LEFT JOIN

    benificiary_info b ON (s.benificiary_id IS NOT NULL AND b.benificiary_id = s.benificiary_id)

WHERE

    s.service_request_id  in  (\'',SERVICE_REQUEST_ID,'\')');

    prepare stmp from @qry;

    execute stmp ;

    deallocate prepare stmp; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GET_ServiceRequestsbyStatus`(IN UserID VARCHAR(128), IN ServiceTypeId long,

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 
    WorkflowStepId,
    Step,
    WorkflowId,
    WorkflowName,
    SUM(completed_request) completed_requests,
    SUM(pending_request) pending_requests,
    SUM(valid_request) total_requests
FROM
    (SELECT 
        wssi.workflow_step_id WorkflowStepId,
            wsi.name Step,
            wsi.workflow_id WorkflowId,
            wssi.process_indicator,
            wi.name WorkflowName,
            CASE
                WHEN process_indicator = '1' THEN 'PENDING'
                WHEN process_indicator = '0' THEN 'COMPLETED'
            END AS 'STATUS',
            IF(wssi.process_indicator = 0, 1, 0) completed_request,
            IF(wssi.process_indicator = 1, 1, 0) pending_request,
            IF(1 = 1, 1, 0) valid_request
    FROM
        workflow_step_stage_info wssi, workflow_step_info wsi
    LEFT JOIN step_info si ON (wsi.step_id = si.step_id), servicerequest_info sri, workflow_info wi
    WHERE
        wssi.workflow_step_id = wsi.workflow_step_id
            AND wi.deleted = 0
            AND wi.is_default_version = 1
            AND wi.is_approved = 1
            AND si.service_request_type_id = ServiceTypeId
            AND wsi.workflow_id = wi.workflow_id
            AND wssi.last_updated_by = UserID
            AND (sri.service_request_id = wssi.service_request_id
            AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)) PREV
GROUP BY WorkflowId;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServicesQuickList`(IN SERVICE_TYPE_ID int)
BEGIN

SELECT si.`service_request_type_id`,

    si.`name`,

    si.`description`,

    si.`css_class_name`,

    si.`is_active`

FROM `servicerequest_type_info` si

WHERE si.service_request_type_id = SERVICE_TYPE_ID;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceTypeById`(IN SERVICE_TYPE_ID INT)
BEGIN

       SELECT * FROM `xproc`.`servicerequest_type_info` where service_request_type_id= SERVICE_TYPE_ID;

       

SELECT 

    field_id AS FieldId,

    service_request_type_id AS 'ServiceRequestTypeId',

    name AS 'Name',

    display_name AS 'DisplayName',

    type AS 'FieldType',

    `unique` AS 'Unique',

    readonly as 'ReadOnly',

    created_by AS 'CreatedBy',

    created_on AS 'CreatedOn',

    last_updated_by AS 'LastUpdatedBy',

    last_updated_on AS 'LastUpdatedOn'

FROM

    field_info

WHERE

    service_request_type_id = SERVICE_TYPE_ID;

    

    END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_ServiceTypeInfosByIds`(IN SERVICE_TYPEIDS longtext)
BEGIN
set @qry = concat('SELECT

   service_request_type_id,

    name,

    description,

    created_by,

    app_id,

    created_on,

    last_updated_on,

    last_updated_by,

    deleted,

    css_class_name,

    is_active,

    short_name,

    CONCAT(FirstName, LastName) AS CreatedByUserName

FROM

    servicerequest_type_info si,

    aspnetusers usr
    
WHERE

si.app_id = APP_ID
AND
si.created_by = usr.id
AND si.deleted = "0"      
AND
 si.service_request_type_id in (',SERVICE_TYPEIDS,') order by find_in_set(si.service_request_type_id, "',SERVICE_TYPEIDS,'")' );

prepare stmp from @qry;

execute stmp ;

deallocate prepare stmp;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceTypeViewConfigJson`(IN ServiceRequestTypeId int(11),IN ViewTypeId int(11),IN UserId varchar(255))
BEGIN

SELECT 

    stvx.config_json

FROM

    service_type_view_xref stvx

WHERE

    stvx.service_request_type_id = ServiceRequestTypeId

        AND stvx.view_type_id = ViewTypeId

        AND CASE WHEN UserId IS NULL THEN stvx.user_id IS NULL 

                 ELSE stvx.user_id = UserId

                 END;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_ServiceTypeWorkflowSLAScoreByUserID`(IN UserID VARCHAR(128), IN ServiceTypeId long, 

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 
    ServiceTypeId,
    Service,
    workflow_step_id,
    WorkflowId,
    Workflow,
    StepId,
    Step,
    AVG(SLAPercentage) SLAPercentage
FROM
    (SELECT 
        wssi.workflow_step_stage_id,
            wssi.workflow_step_id,
            srti.service_request_type_id ServiceTypeId,
            srti.name Service,
            wi.workflow_id AS 'WorkflowId',
            wi.name AS 'Workflow',
            si.step_id AS StepId,
            si.name AS Step,
            si.sla,
            si.sla_unit,
            @Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,
            CASE
                WHEN
                    (si.sla_unit = 'D')
                THEN
                    (CASE
                        WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2) > 100) THEN 100
                        ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)
                    END)
                WHEN
                    (si.sla_unit = 'H')
                THEN
                    (CASE
                        WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2) > 100) THEN 100
                        ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)
                    END)
                WHEN
                    (si.sla_unit = 'M')
                THEN
                    (CASE
                        WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2) > 100) THEN 100
                        ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)
                    END)
                ELSE CEIL((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100)
            END AS SLAPercentage,
            wssi.created_on,
            wssi.last_updated_on,
            wssi.process_indicator
    FROM
        workflow_step_stage_info wssi
    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)
    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)
    LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id)
    LEFT JOIN step_info si ON (wsi.step_id = si.step_id
        AND si.step_type = 0
        AND si.service_request_type_id = ServiceTypeId), servicerequest_info sri
    WHERE
        wssi.process_indicator = 0
            AND si.step_id IS NOT NULL
            AND wi.deleted = 0
            AND wi.is_default_version = 1
            AND wi.is_approved = 1
            AND wssi.last_updated_by = UserID
            AND wssi.last_updated_by = UserID
            AND (sri.service_request_id = wssi.service_request_id
            AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)
    GROUP BY wssi.workflow_step_stage_id
    ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA
GROUP BY WorkflowId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_SLAPerServiceTypeByUserID`(IN UserID VARCHAR(128), IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 

    ServiceTypeId,

    Service,

    ROUND(AVG(SLAPercentage), 2) SLAPercentage

FROM

    (SELECT 

        ServiceTypeId,

            Service,

            WorkflowId,

            Workflow,

            ROUND(AVG(SLAPercentage), 2) SLAPercentage

    FROM

        (SELECT 

        ServiceTypeId,

            Service,

            57 * 6 workflow_step_id,

            WorkflowId,

            Workflow,

            Step,

            ROUND(AVG(SLAPercentage), 2) SLAPercentage

    FROM

        (SELECT 

        wssi.workflow_step_stage_id,

            wssi.workflow_step_id,

            srti.service_request_type_id ServiceTypeId,

            srti.name Service,

            wi.workflow_id AS 'WorkflowId',

            wi.name AS 'Workflow',

            si.step_id,

            si.name AS Step,

            si.sla,

            si.sla_unit,

            @Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

            CASE

                WHEN si.sla_unit = 'D' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'H' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'M' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)

                ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100, 2)

            END AS SLAPercentage,

            wssi.created_on,

            wssi.last_updated_on,

            wssi.process_indicator

    FROM

        workflow_step_stage_info wssi

    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)

    LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id)

    LEFT JOIN step_info si ON (wsi.step_id = si.step_id AND si.step_type = 0)

    , servicerequest_info sri

    WHERE

        wssi.process_indicator = 0

            AND si.step_id IS NOT NULL

            AND wssi.last_updated_by = UserID

            AND (sri.service_request_id = wssi.service_request_id

            AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)

    GROUP BY wssi.workflow_step_stage_id

    ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA

    GROUP BY workflow_step_id) AS WORKFLOWDATA

    GROUP BY WorkflowId

    ORDER BY SLAPercentage) AS SERVICETYPEDATA

GROUP BY ServiceTypeId

ORDER BY SLAPercentage;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_SLAPerWorkflowByUserID`(IN UserID VARCHAR(128))
BEGIN

SELECT 

    WorkflowId,

    Workflow,

    ROUND(AVG(SLAPercentage), 2) SLAPercentage

FROM

    (SELECT 

        workflow_step_id,

            WorkflowId,

            Workflow,

            Step,

            ROUND(AVG(SLAPercentage), 2) SLAPercentage

    FROM

        (SELECT 

        wssi.workflow_step_stage_id,

            wssi.workflow_step_id,

            wi.workflow_id AS 'WorkflowId',

            wi.name AS 'Workflow',

            si.step_id,

            si.name AS Step,

            si.sla,

            si.sla_unit,

            @Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

            CASE

                WHEN si.sla_unit = 'D' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'H' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'M' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)

                ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100, 2)

            END AS SLAPercentage,

            wssi.created_on,

            wssi.last_updated_on,

            wssi.process_indicator

    FROM

        workflow_step_stage_info wssi

    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)

    LEFT JOIN step_info si ON (wsi.step_id = si.step_id

        AND si.step_type = 0)

    WHERE

        wssi.process_indicator = 0

            AND si.step_id IS NOT NULL

            AND wssi.last_updated_by = UserID

    GROUP BY wssi.workflow_step_stage_id

    ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA

    GROUP BY workflow_step_id) AS WORKFLOWDATA

GROUP BY WorkflowId

ORDER BY SLAPercentage;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_SLAPerWorkflowStepByUserId`(IN UserID VARCHAR(128))
BEGIN

SELECT workflow_step_id, name, ROUND(avg(SLAPercentage), 2) SLAPercentage FROM (

SELECT 

    wssi.workflow_step_stage_id,

    wssi.workflow_step_id,

    si.step_id,

    si.name,

    si.sla,

    si.sla_unit,

    @Elapsed := TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

    CASE

		WHEN

            si.sla_unit = 'D'

        THEN

            ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) *24*60*60*100, 2)

        WHEN

            si.sla_unit = 'H'

        THEN

            ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) *60*60*100,2)

        WHEN

            si.sla_unit = 'M'

        THEN

            ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) *60*100, 2)

        ELSE

            ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100, 2)            

    END AS SLAPercentage,

    wssi.created_on,

    wssi.last_updated_on,

    wssi.process_indicator

FROM

    workflow_step_stage_info wssi

        LEFT JOIN

    workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

        LEFT JOIN

    step_info si ON (wsi.step_id = si.step_id

        AND si.step_type = 0)

WHERE

    wssi.process_indicator = 0

        AND si.step_id IS NOT NULL

        AND wssi.last_updated_by = UserID

GROUP BY wssi.workflow_step_stage_id

ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA GROUP BY workflow_step_id ORDER BY SLAPercentage desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_SLAServiceTypeTrendByUserIdAndServiceTypeId`(IN UserID VARCHAR(128), IN ServiceTypeId long,

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN



SELECT 
    WorkflowId,
    WorkflowName,
    WorkflowStepId,
    StepId,
    StepName,
    SUM(is_unsatisfied_sla_request) unsatisfied_sla_requests,
    SUM(vaild_request) total_requests
FROM
    (SELECT 
        wsi.workflow_step_id AS WorkflowStepId,
            si.step_id StepId,
            wsi.name StepName,
            si.sla,
            si.sla_unit,
            wi.workflow_id WorkflowId,
            wi.name WorkflowName,
            @Elapsed:=CASE
                WHEN si.sla_unit = 'D' THEN si.sla * 24 * 60 * 60 * 100
                WHEN si.sla_unit = 'H' THEN si.sla * 60 * 60 * 100
                WHEN si.sla_unit = 'M' THEN si.sla * 60 * 100
                ELSE si.sla * 100
            END AS elapsed,
            @TimeTaken:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS time_taken,
            CASE
                WHEN wssi.process_indicator = 0 THEN (IF(@TimeTaken > @Elapsed, 1, 0))
                ELSE 0
            END is_unsatisfied_sla_request,
            IF(wssi.process_indicator = 0, 1, 0) vaild_request
    FROM
        workflow_step_stage_info wssi
    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)
    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)
    LEFT JOIN step_info si ON (wsi.step_id = si.step_id
        AND si.step_type = 0), servicerequest_info sri
    WHERE
        si.step_id IS NOT NULL
            AND wi.deleted = 0
            AND wi.is_default_version = 1
            AND wi.is_approved = 1
            AND si.service_request_type_id = ServiceTypeId
            AND wssi.last_updated_by = UserID
            AND (sri.service_request_id = wssi.service_request_id
            AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)) AS stepdata
GROUP BY WorkflowId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_SLAWorkflowByUserIdAndWorkflowId`(IN UserID VARCHAR(128), IN WorkflowID long)
BEGIN

SELECT workflow_id, ROUND(avg(SLAPercentage), 2) SLAPercentage FROM (

	SELECT 

		wssi.workflow_step_stage_id,

		wssi.workflow_step_id,

		si.step_id,

		si.name as step_name,

		si.sla,

		si.sla_unit,

        wi.workflow_id,

		@Elapsed := TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

		CASE

			WHEN

				si.sla_unit = 'D'

			THEN

				ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) *24*60*60*100, 2)

			WHEN

				si.sla_unit = 'H'

			THEN

				ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) *60*60*100,2)

			WHEN

				si.sla_unit = 'M'

			THEN

				ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) *60*100, 2)

			ELSE

				ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100, 2)            

		END AS SLAPercentage,

		wssi.created_on,

		wssi.last_updated_on,

		wssi.process_indicator

	FROM

		workflow_step_stage_info wssi

			LEFT JOIN

		workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

			LEFT JOIN

		workflow_info wi ON (wsi.workflow_id = wi.workflow_id)    

			LEFT JOIN

		step_info si ON (wsi.step_id = si.step_id

			AND si.step_type = 0)

	WHERE

		wssi.process_indicator = 0

			AND si.step_id IS NOT NULL

			AND wi.workflow_id = WorkflowID

			AND wssi.last_updated_by = UserID

	GROUP BY wssi.workflow_step_stage_id

	ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA 

GROUP BY workflow_id 

ORDER BY SLAPercentage desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_SLAWorkflowTrendByUserIdAndWorkflowId`(IN UserID VARCHAR(128), IN WorkflowID long,

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

	SELECT WorkflowId, WorkflowStepId, StepId, StepName, sum(is_unsatisfied_sla_request) unsatisfied_sla_requests,

		sum(vaild_request) total_requests FROM (

		SELECT 

			wsi.workflow_step_id as WorkflowStepId,

			si.step_id StepId,

			si.name StepName,

			si.sla,

			si.sla_unit,

			wi.workflow_id WorkflowId, 

			

			@Elapsed := CASE

				WHEN

					si.sla_unit = 'D'

				THEN

					si.sla*24*60*60*100

				WHEN

					si.sla_unit = 'H'

				THEN

					si.sla*60*60*100

				WHEN

					si.sla_unit = 'M'

				THEN

					si.sla*60*100

				ELSE

					si.sla*100           

			END AS elapsed,

			

			@TimeTaken := TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) as time_taken,

			

			case 

				when wssi.process_indicator = 0 then(

					IF (@TimeTaken > @Elapsed, 1, 0))

				else 0    

			end is_unsatisfied_sla_request,

			IF (wssi.process_indicator = 0, 1, 0) vaild_request

		FROM

			workflow_step_stage_info wssi

				LEFT JOIN

			workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

				LEFT JOIN

			workflow_info wi ON (wsi.workflow_id = wi.workflow_id)    

				LEFT JOIN

			step_info si ON (wsi.step_id = si.step_id

				AND si.step_type = 0),

			servicerequest_info sri

		WHERE

			si.step_id IS NOT NULL

				AND wi.workflow_id = WorkflowID

				AND wssi.last_updated_by = UserID

                AND (sri.service_request_id = wssi.service_request_id

				AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)) as stepdata

	group by WorkflowStepId;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_StagingRecordsByUserId`(

IN USER_ID_VALUE VARCHAR(255),

IN APP_ID INT,

IN STATUS_IND INT,

IN LIMIT_COUNT INT)
BEGIN


-- SET USER_ID_VALUE = 'e95d1fd5-11de-4173-a969-aa83ad335a12';

SET @USER_ROLE_ID = -1;

SET @VIEW_ALL_PERMISSION_ID = -1;

SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





SELECT

asur.RoleId

INTO @USER_ROLE_ID FROM

aspnetuserroles asur

WHERE

asur.UserId = USER_ID_VALUE;



SELECT

asr.Name

INTO @USER_ROLE_NAME FROM

aspnetroles asr

WHERE

asr.Id = @USER_ROLE_ID;



SELECT

permission_id

INTO @VIEW_ALL_PERMISSION_ID FROM

permission_lookup

WHERE

name IN ('VIEW_ALL');



-- select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



SELECT

COUNT(rpx.role_id)

INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

role_permission_xref rpx

WHERE

rpx.permission_id = @VIEW_ALL_PERMISSION_ID

AND rpx.role_id = @USER_ROLE_ID

GROUP BY rpx.role_id;



-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;



SELECT

COUNT(upx.User_Id)

INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

user_permission_xref upx

WHERE

(upx.permission_id = @VIEW_ALL_PERMISSION_ID

AND upx.User_Id = USER_ID_VALUE)

GROUP BY upx.User_Id;



-- SELECT @USER_HAS_VIEW_ALL_PERMISSION AS 'User has View All Permission By UserID';

CASE WHEN STATUS_IND <> 0 THEN

SELECT

sri.service_request_type_id 'ServiceRequestTypeId',

srti.name 'ServiceRequestTypeName',

srti.css_class_name 'CssClassName',

wssi.workflow_step_stage_id 'WorkFlowStepStageId',

wsi.workflow_step_id 'WorkFlowStepId',

si.step_id 'StepId',

wsi.name 'StepName',

si.css_class_name 'StepCssClassName'

FROM

permission_lookup pl

LEFT JOIN

workflow_step_stage_info wssi ON (pl.source_id = wssi.workflow_step_id AND wssi.process_indicator = STATUS_IND AND wssi.process_time < NOW())

JOIN

workflow_step_info wsi ON (wssi.workflow_step_id= wsi.workflow_step_id)

JOIN

step_info si ON (wsi.step_id=si.step_id)

JOIN

servicerequest_info sri ON (wssi.service_request_id = sri.service_request_id AND sri.status = STATUS_IND)

LEFT JOIN

servicerequest_type_info srti ON (sri.service_request_type_id = srti.service_request_type_id AND srti.deleted = 0 AND srti.is_active = 1)

WHERE

srti.app_id = APP_ID

AND CASE

WHEN @USER_HAS_VIEW_ALL_PERMISSION = 0 THEN

(pl.permission_id IN (

SELECT

ugPermissions.permission_id

FROM

usergroup_permission_xref ugPermissions

WHERE

ugPermissions.user_group_id IN (SELECT

user_group_id

FROM

user_usergroup_xref

WHERE

user_id = USER_ID_VALUE)



UNION ALL



SELECT

upx.permission_id

FROM

user_permission_xref upx

WHERE

upx.User_Id = USER_ID_VALUE



UNION ALL



SELECT

rpx.permission_id

FROM

role_permission_xref rpx

WHERE

rpx.role_id IN (SELECT asur.RoleId FROM aspnetuserroles asur WHERE asur.UserId = USER_ID_VALUE)))

ELSE

TRUE

END

LIMIT LIMIT_COUNT;



ELSE



SELECT

sri.service_request_type_id 'ServiceRequestTypeId',

srti.name 'ServiceRequestTypeName',

srti.css_class_name 'CssClassName',

COALESCE(wssi.workflow_step_stage_id, -1) 'WorkFlowStepStageId',

COALESCE(wsi.workflow_step_id, -1) 'WorkFlowStepId',

COALESCE(si.step_id, -1) 'StepId',

COALESCE(wsi.name, 'Auto Complete') 'StepName',

COALESCE(si.css_class_name, 'fa-check-double') 'StepCssClassName'

FROM

servicerequest_info sri

LEFT JOIN workflow_step_stage_info wssi ON (wssi.service_request_id = sri.service_request_id)

LEFT JOIN workflow_step_info wsi ON (wsi.workflow_step_id = wssi.workflow_step_id)

LEFT JOIN step_info si ON (wsi.step_id = si.step_id),

servicerequest_type_info srti

WHERE

srti.app_id = APP_ID

AND

sri.service_request_type_id = srti.service_request_type_id

AND

sri.status = 0

AND

srti.deleted = 0

GROUP BY

sri.service_request_id

LIMIT LIMIT_COUNT;

END CASE;





END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_StepById`(IN STEP_ID int, IN SERVICE_TYPE_ID int)
BEGIN
SELECT
si.`step_id` Id,
si.`name` 'Name',
si.`short_name` ShortName,
si.`short_description` ShortDescription,
si.`long_description` LongDescription,
si.`sequence` Sequence,
si.`implentor_class` ImplementorClass,
si.`namespace` Namespace,
si.`page_url` CustomPageUrl,
si.`step_type` StepType,
si.`is_global` IsGlobal,
si.`is_dynamic_view` IsDynamicView,
si.`service_request_type_id` ServiceRequestTypeId,
si.`created_by` CreatedBy,
si.`created_on` CreatedOn,
si.`last_updated_on` LastUpdatedOn,
si.`last_updated_by` LastUpdatedBy,
si.`is_active` IsActive,
si.`is_custom` IsCustom,
si.`show_document` ShowDocuments,
si.`show_contact` ShowContacts,
si.`sla` Sla,
si.`sla_unit` SlaUnit,
si.`css_class_name` CssClassName,
si.`short_name`,
si.`is_disable_sla` IsDisableSLA,
si.`is_system` IsSystem,
si.`sys_step_type` SysStepType,
si.`Is_async` IsAsync,
si.`is_deleted` IsDeleted,
si.`layout_config` LayoutConfig,
si.`style_config` StyleConfig,
si.`instructions` Instructions,
si.`is_questionnaire` IsQuestionnaire,
si.`is_quiz` IsQuiz,
sai.step_action_id 'ActionId',
sai.name 'ActionName',
sai.description 'ActionDescription',
CONCAT(usr.FirstName, " ", usr.LastName) AS 'LastUpdatedByName',
CONCAT(usr.FirstName, " ", usr.LastName) AS 'CreatedByName',
COALESCE(sap.operation_type_id, 0) 'OperationTypeId',
COALESCE(sap.field_id, 0) 'OperationFieldId',
FI.source_object_type_id 'OperationSourceObjectTypeId',
FI.type 'OperationFieldType',
optl.name 'OperationName',
sap.value 'OperationValue',
sap.message_template_id 'OperationMessageTemplateId',
sap.assignee_id 'OperationAssigneeId',
sap.cc_list 'OperationCcList',
sap.to_field_id 'OperationToFieldId',
sap.aggregator_id 'AggregatorId',
scl.step_category_id 'StepCategoryId',
scl.name 'StepCategoryName'
FROM
`step_info` si
LEFT JOIN step_action_info sai ON (si.step_id = sai.step_id)
LEFT JOIN step_action_operation_xref sap ON (sai.step_action_id = sap.step_action_id)
LEFT JOIN field_info FI ON(sap.field_id = FI.field_id)
LEFT JOIN operation_type_lookup optl ON (sap.operation_type_id = optl.operation_type_id)
LEFT JOIN aspnetusers usr ON (sai.last_updated_by = usr.Id)
LEFT JOIN step_category_lookup scl ON (si.step_category_id = scl.step_category_id )
WHERE
si.step_id = STEP_ID
AND
si.service_request_type_id = SERVICE_TYPE_ID;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_StepInfoById`(IN STEP_ID INT)
BEGIN

	SELECT * FROM `xproc`.`step_info` si

    WHERE si.step_id = STEP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_StepRolesByWorkflowStepId`(IN WOEKFLOW_STEP_ID INT)
BEGIN

select 

r.id as RoleId, 

r.Name as RoleName, 

si.step_id as StepId,

si.name as StepName 

from step_info si,

workflow_step_info wsi, 

permission_lookup pl,

role_permission_xref rpx,

aspnetroles r

where 

si.step_id=wsi.step_id and

r.Id=rpx.role_id and

rpx.permission_id=pl.permission_id and

pl.source_id = wsi.workflow_step_id and

wsi.workflow_step_id= WOEKFLOW_STEP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Tags`(APP_ID INT(11),TAG_ID INT(11))
BEGIN

SELECT 

    TI.background_color as BackgroundColor,

    TI.name as TagName,
    
    TI.tag_id as TagID

FROM


    tag_info TI
    
WHERE
  
	TI.tag_id =IF(TAG_ID <> -1, TAG_ID, TI.tag_id)
    
    AND
    
    TI.is_deleted = 0 
    
    AND 
    
    TI.app_id = APP_ID ;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_TemplatesByStepId`(IN STEP_ID int)
BEGIN

SELECT 

    tsi.`template_section_id` Id,

    tsi.`template_type_id` 'TypeId',

    tsi.`value` Value,

	tstl.`name` 'TypeName',

    tsi.`alignment` Alignment,

    tsi.`section_config` SectionConfigJson,    

    tsi.`created_by` CreatedBy,

    tsi.`created_on` CreatedOn,

    tsi.`last_updated_on` LastUpdatedOn,

    tsi.`last_updated_by` LastUpdatedBy,

    tsi.`step_id` StepId,

    CONCAT(usr.FirstName, " ", usr.LastName) AS 'LastUpdatedByName',

    CONCAT(usr.FirstName, " ", usr.LastName) AS 'CreatedByName',

    COALESCE(tsfx.field_id, 0) 'FieldId',

    COALESCE(fi.name, '') 'FieldName',

    COALESCE(fi.type, '') 'FieldType'

FROM

    `template_section_info` tsi

    LEFT JOIN template_section_field_xref tsfx ON (tsi.template_section_id = tsfx.template_section_id)

    LEFT JOIN aspnetusers usr ON (tsi.last_updated_by = usr.Id)

	LEFT JOIN template_section_type_lookup tstl ON tstl.template_section_type_id = tsi.template_type_id

    LEFT JOIN field_info fi on fi.field_id=tsfx.field_id

WHERE

	tsi.step_id = STEP_ID; 



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Theme`(

IN USER_ID VARCHAR(255)

)
BEGIN

	SELECT * FROM user_theme_config_info UTC

	WHERE UTC.user_id=USER_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GET_TotalRequestsbyStatus`(IN UserID VARCHAR(128), IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 

	WorkflowStepId,

	Step,

    WorkflowId,

    WorkflowName,

    SUM(completed_request) completed_requests,

    SUM(pending_request) pending_requests,

    SUM(valid_request) total_requests,

    ServiceTypeId,

    ServiceName

    FROM

	(SELECT 

		wssi.workflow_step_id WorkflowStepId,

		wsi.name Step,

		wsi.workflow_id WorkflowId,

		wssi.process_indicator,

        wi.name WorkflowName,

        srti.service_request_type_id ServiceTypeId,

		srti.name ServiceName,

		CASE 

			WHEN process_indicator = '1' THEN 'PENDING' 

			WHEN process_indicator = '0' THEN 'COMPLETED'

		END

			AS 'STATUS',  

		IF (wssi.process_indicator = 0, 1, 0) completed_request,

		IF (wssi.process_indicator = 1, 1, 0) pending_request,

		IF (1 = 1, 1, 0) valid_request

		FROM    

			workflow_step_stage_info wssi

				LEFT JOIN

			workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

				LEFT JOIN

			workflow_info wi ON (wsi.workflow_id = wi.workflow_id)    

				LEFT JOIN

			step_info si ON (wsi.step_id = si.step_id

				AND si.step_type = 0)

                LEFT JOIN 

			servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id),

			servicerequest_info sri

		WHERE

			wssi.workflow_step_id = wsi.workflow_step_id

            AND wsi.workflow_id = wi.workflow_id

            AND wssi.last_updated_by = UserID

            AND (sri.service_request_id = wssi.service_request_id

				AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)) PREV

GROUP BY ServiceTypeId;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_TotalServiceRequestTypeByAppID`(

IN APP_ID INT(11),

IN FROM_DATE DATETIME,

IN TO_DATE DATETIME

)
BEGIN



SELECT

SRTI.service_request_type_id 'ServiceRequestTypeId',

SRTI.name 'ServiceRequestName',

date_format(SRI.created_on, "%Y-%m-%d") 'CreatedOn',

count(SRI.service_request_type_id) 'ServiceRequestCount'

from

servicerequest_type_info SRTI

INNER JOIN servicerequest_info SRI ON (SRTI.service_request_type_id = SRI.service_request_type_id AND SRTI.deleted = 0 AND SRTI.is_active = 1)

where

SRTI.app_id=APP_ID AND

SRI.created_on BETWEEN FROM_DATE AND TO_DATE

GROUP BY date_format(SRI.created_on, "%Y-%m-%d"), SRI.service_request_type_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_TotalSLAScoreByUserGroupID`(

	IN AppId INT(11),

    IN UserGroupID VARCHAR(128),  

	IN FROM_DATE DATETIME, 

    IN TO_DATE DATETIME)
BEGIN

	SELECT 

    ServiceTypeId,

    Service,

    workflow_step_id,

    WorkflowId,

    Workflow,

    StepId,

    Step,

    AVG(SLAPercentage) SLAPercentage

FROM

    (SELECT 

        wssi.workflow_step_stage_id,

            wssi.workflow_step_id,

            srti.service_request_type_id ServiceTypeId,

            srti.name Service,

            wi.workflow_id AS 'WorkflowId',

            wi.name AS 'Workflow',

            si.step_id AS StepId,

            wsi.name AS Step,

            si.sla,

            si.sla_unit,

            @Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

            CASE

                WHEN

                    (si.sla_unit = 'D')

                THEN

                    (CASE

                        WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2) > 100) THEN 100

                        ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)

                    END)

                WHEN

                    (si.sla_unit = 'H')

                THEN

                    (CASE

                        WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2) > 100) THEN 100

                        ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)

                    END)

                WHEN

                    (si.sla_unit = 'M')

                THEN

                    (CASE

                        WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2) > 100) THEN 100

                        ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)

                    END)

                ELSE CEIL((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100)

            END AS SLAPercentage,

            wssi.created_on,

            wssi.last_updated_on,

            wssi.process_indicator

    FROM

     usergroup_permission_xref UGPX

    INNER JOIN permission_lookup PL ON(UGPX.permission_id=PL.permission_id)

    INNER JOIN workflow_step_stage_info wssi ON(PL.source_id=wssi.workflow_step_id)

    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id) 

    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)

    LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id)

    LEFT JOIN step_info si ON (wsi.step_id = si.step_id

        AND si.step_type = 0), servicerequest_info sri

    WHERE

			UGPX.user_group_id = UserGroupID 

			AND  wssi.process_indicator = 0

            AND si.step_id IS NOT NULL

            AND (sri.service_request_id = wssi.service_request_id

            AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)

            AND srti.app_id = AppId

    GROUP BY wssi.workflow_step_stage_id

    ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA

GROUP BY ServiceTypeId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_TotalSLAScoreByUserID`(IN AppId INT(11),IN UserID VARCHAR(128),

IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT
ServiceTypeId,
Service,
workflow_step_id,
WorkflowId,
Workflow,
StepId,
Step,
AVG(SLAPercentage) SLAPercentage
FROM
(SELECT
wssi.workflow_step_stage_id,
wssi.workflow_step_id,
srti.service_request_type_id ServiceTypeId,
srti.name Service,
wi.workflow_id AS 'WorkflowId',
wi.name AS 'Workflow',
si.step_id AS StepId,
wsi.name AS Step,
si.sla,
si.sla_unit,
@Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,
CASE
WHEN
(si.sla_unit = 'D')
THEN
(CASE
WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2) > 100) THEN 100
ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)
END)
WHEN
(si.sla_unit = 'H')
THEN
(CASE
WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2) > 100) THEN 100
ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)
END)
WHEN
(si.sla_unit = 'M')
THEN
(CASE
WHEN (ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2) > 100) THEN 100
ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)
END)
ELSE CEIL((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100)
END AS SLAPercentage,
wssi.created_on,
wssi.last_updated_on,
wssi.process_indicator
FROM
workflow_step_stage_info wssi
LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)
LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)
LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id
AND srti.deleted = 0
AND srti.is_active = 1)
LEFT JOIN step_info si ON (wsi.step_id = si.step_id
AND si.step_type = 0), servicerequest_info sri
WHERE
wssi.process_indicator = 0
AND si.step_id IS NOT NULL
AND wssi.last_updated_by = UserID
AND (sri.service_request_id = wssi.service_request_id
AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)
AND srti.app_id = AppId
GROUP BY wssi.workflow_step_stage_id
ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA
GROUP BY ServiceTypeId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_TotalSLATrendByUserId`(IN AppId INT(11),IN UserID VARCHAR(128),

IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN



SELECT
ServiceTypeId,
ServiceName,
WorkflowId,
WorkflowName,
WorkflowStepId,
StepId,
StepName,
SUM(is_unsatisfied_sla_request) unsatisfied_sla_requests,
SUM(vaild_request) total_requests
FROM
(SELECT
wsi.workflow_step_id AS WorkflowStepId,
si.step_id StepId,
wsi.name StepName,
si.sla,
si.sla_unit,
wi.workflow_id WorkflowId,
wi.name WorkflowName,
srti.service_request_type_id ServiceTypeId,
srti.name ServiceName,
@Elapsed:=CASE
WHEN si.sla_unit = 'D' THEN si.sla * 24 * 60 * 60 * 100
WHEN si.sla_unit = 'H' THEN si.sla * 60 * 60 * 100
WHEN si.sla_unit = 'M' THEN si.sla * 60 * 100
ELSE si.sla * 100
END AS elapsed,
@TimeTaken:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS time_taken,
CASE
WHEN wssi.process_indicator = 0 THEN (IF(@TimeTaken > @Elapsed, 1, 0))
ELSE 0
END is_unsatisfied_sla_request,
IF(wssi.process_indicator = 0, 1, 0) vaild_request
FROM
workflow_step_stage_info wssi
LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)
LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)
LEFT JOIN step_info si ON (wsi.step_id = si.step_id
AND si.step_type = 0)
LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id
AND srti.deleted = 0
AND srti.is_active = 1), servicerequest_info sri
WHERE
si.step_id IS NOT NULL
AND wssi.last_updated_by = UserID
AND (sri.service_request_id = wssi.service_request_id
AND srti.app_id = AppId
AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)) AS stepdata
GROUP BY ServiceTypeId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_User_Module_Service_Permissions`(
IN USER_ID VARCHAR(255),
IN APP_ID INT(11))
BEGIN
SELECT 
    mi.module_id AS 'ModuleId',
    mi.name AS 'ModuleName',
    mi.display_type AS 'DisplayType',
    msi.module_service_id AS 'ModuleServieId',
    msi.name AS 'ServiceName',
    msi.css_class_name AS 'CssClassName',
    msi.description AS 'Description',
    msi.object_id AS 'ObjectId',
    msi.is_custom_url AS 'IsCustomUrl',
    msi.home_page_url AS 'HomePageUrl'
FROM
    user_module_services_permissions umsp
        JOIN
    module_service_info msi ON (msi.module_service_id = umsp.module_service_id)
        JOIN
    module_info mi ON (msi.module_id = mi.module_id)
WHERE
    umsp.user_id = USER_ID
    
    AND
    
    mi.app_id = APP_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Get_USER_OrganizationSettings`(
	IN APP_ID INT(11)
)
BEGIN
SELECT 
	OSI.setting_id SettingsId,
	OSI.user_id UserId,
	OSI.name Name,
    OSI.value Value,    
	COALESCE(OSI.app_id, -1) AppId,
    OS.allow_override AllowOverride,
    OS.value AdminValue
FROM
	user_org_settings_xref OSI
    INNER JOIN organization_settings_info OS ON OS.settings_id = OSI.setting_id
WHERE
   	OSI.app_id = APP_ID;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_User_Tags`(
    IN SOURCE_ID INT 
 )
BEGIN

SELECT 

    TI.tag_id as TagID,

    TI.background_color as BackgroundColor,
    
    TI.name as TagName,
    
    UT.id as Id

FROM

    tag_info TI  
    
JOIN
	
    user_tags UT
    
 ON
 
      UT.tag_id = TI.tag_id AND UT.source_id = SOURCE_ID AND UT.is_deleted = 0 AND TI.is_deleted = 0;
      
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_UserBasedUsersGroup`(

	IN USER_GROUP_ID varchar(255),
    IN ACCOUNT_ID INT

)
BEGIN

SELECT 

    AU.Id as UserID,

    AU.FirstName as UserFirstName,

    AU.LastName as UserLastName

FROM

    aspnetusers AS AU
  INNER JOIN accounts_users_xref AUX ON (AU.ID = AUX.Id AND AUX.accounts_id = ACCOUNT_ID)
WHERE  

	AU.ID NOT IN (select user_id from user_usergroup_xref AS UU 
    where UU.user_group_id=USER_GROUP_ID AND UU.is_deleted=0);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_UserGroupPermissions`(

IN User_Group_ID varchar(255))
BEGIN

SELECT  

	UPX.`user_group_id` UserGroupId,

	UPX.`permission_id` PermissionId,

    UPX.`access_level` AccessLevel 

FROM 

	`usergroup_permission_xref`  as UPX 

WHERE 

	UPX.user_group_id = IF(User_Group_ID <> '-1', User_Group_ID, UPX.user_group_id); 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_UserGroupsById`(
IN APP_ID INT(11),
IN UG_ID VARCHAR(255) )
BEGIN

SELECT 

	distinct

	b.`user_group_id` UserGroupId,

	b.`name` UserGroupTitle,

    b.`description` UserGroupDescription,

    b.`image` UserGroupImage, 

    b.`created_by` CreatedBy,

    concat(c.FirstName,' ', c.LastName) CreatedByName,

    concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

    b.`last_updated_by` LastUpdatedBy,

    b.`created_on` CreatedOn,

    b.`last_updated_on` LastUpdatedOn,

    b.`is_deleted` IsDeleted 

FROM 

	`user_group_info` b join

    aspnetusers c join

    aspnetusers l 

WHERE 

	b.user_group_id = IF(UG_ID <> -1, UG_ID, b.user_group_id) 
	
    AND
    
    b.app_id = APP_ID
    
    AND

    b.created_by = c.Id

    AND

    b.last_updated_by = l.id

    AND

    b.is_deleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_UserGroupsByUserId`(

IN USER_ID_VALUE VARCHAR(255),

IN APP_ID INT(11))
BEGIN



	SET @USER_ROLE_ID = -1;

	SET @VIEW_ALL_PERMISSION_ID = -1;

	SET @USER_HAS_VIEW_ALL_PERMISSION = 0;





	SELECT

	asur.RoleId

	INTO @USER_ROLE_ID FROM

	aspnetuserroles asur

	WHERE

	asur.UserId = USER_ID_VALUE;



	SELECT

	asr.Name

	INTO @USER_ROLE_NAME FROM

	aspnetroles asr

	WHERE

	asr.Id = @USER_ROLE_ID;



	SELECT

	permission_id

	INTO @VIEW_ALL_PERMISSION_ID FROM

	permission_lookup

	WHERE

	name IN ('VIEW_ALL');

	-- select @VIEW_ALL_PERMISSION_ID, @USER_ROLE_ID, @USER_ROLE_NAME;



	SELECT

	COUNT(rpx.role_id)

	INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

	role_permission_xref rpx

	WHERE

	rpx.permission_id = @VIEW_ALL_PERMISSION_ID

	AND rpx.role_id = @USER_ROLE_ID

	GROUP BY rpx.role_id;



	SELECT

	COUNT(upx.User_Id)

	INTO @USER_HAS_VIEW_ALL_PERMISSION FROM

	user_permission_xref upx

	WHERE

	(upx.permission_id = @VIEW_ALL_PERMISSION_ID

	AND upx.User_Id = USER_ID_VALUE)

	GROUP BY upx.User_Id;

    

	SELECT

	COUNT(ugrpx.user_group_id) INTO @USER_HAS_VIEW_ALL_PERMISSION

	FROM

	usergroup_permission_xref ugrpx

	WHERE

	(ugrpx.permission_id = @VIEW_ALL_PERMISSION_ID

	AND

	ugrpx.user_group_id IN (select user_group_id from user_usergroup_xref uux where uux.user_Id = USER_ID_VALUE))



	GROUP BY ugrpx.user_group_id;

-- select @USER_HAS_VIEW_ALL_PERMISSION as 'User has View All Permission By Role' ;



CASE WHEN (@USER_HAS_VIEW_ALL_PERMISSION = 0) THEN 

	SELECT 

		UGX.user_id USERID ,

		UGI.user_group_id UserGroupId,

		UGI.name UserGroupTitle,

		UGI.description UserGroupDescription,

		UGI.image UserGroupImage,

		(select count(user_id) from user_usergroup_xref  where user_group_id=UGI.user_group_id) as UserCount,

		COUNT(sri.service_request_id) Count,

		CASE

			WHEN sri.status = 1 THEN 'Pending'

			ELSE 'Completed'

		END QueuesStatus

	FROM 	

		user_usergroup_xref UGX

        LEFT JOIN

		user_group_info UGI ON (UGX.user_group_id = UGI.user_group_id)

			LEFT JOIN

		usergroup_permission_xref UPX ON (UGX.user_group_id = UPX.user_group_id)

			LEFT JOIN

		permission_lookup PL ON (UPX.permission_id = PL.permission_id)

			LEFT JOIN

		workflow_step_stage_info WSSI ON (PL.source_id = WSSi.workflow_step_id)

		   LEFT JOIN 

		servicerequest_info SRI ON (WSSI.service_request_id = SRI.service_request_id AND SRI.status = WSSI.process_indicator)

			LEFT JOIN

		servicerequest_type_info srti ON (sri.service_request_type_id = srti.service_request_type_id and srti.app_id = APP_ID)

	WHERE 

		UGI.app_id = APP_ID AND  UGX.user_id = IF(USER_ID_VALUE <> -1, USER_ID_VALUE, UGX.user_id)   and UGX.is_deleted=0 

        GROUP BY UGX.user_group_id, QueuesStatus;

    

ELSE

	SELECT 

		UGX.user_id USERID ,

		UGI.user_group_id UserGroupId,

		UGI.name UserGroupTitle,

		UGI.description UserGroupDescription,

		UGI.image UserGroupImage,

		(select count(user_id) from user_usergroup_xref  where user_group_id=UGI.user_group_id) as UserCount,

		COUNT(sri.service_request_id) Count,

		CASE

			WHEN sri.status = 1 THEN 'Pending'

			ELSE 'Completed'

		END QueuesStatus

	FROM 	

		user_usergroup_xref UGX

        LEFT JOIN

		user_group_info UGI ON (UGX.user_group_id = UGI.user_group_id)

			LEFT JOIN

		usergroup_permission_xref UPX ON (UGX.user_group_id = UPX.user_group_id)

			LEFT JOIN

		permission_lookup PL ON (UPX.permission_id = PL.permission_id)

			LEFT JOIN

		workflow_step_stage_info WSSI ON (PL.source_id = WSSi.workflow_step_id)

		   LEFT JOIN 

		servicerequest_info SRI ON (WSSI.service_request_id = SRI.service_request_id AND SRI.status = WSSI.process_indicator)

			LEFT JOIN

		servicerequest_type_info srti ON (sri.service_request_type_id = srti.service_request_type_id and srti.app_id = APP_ID)

	WHERE 
    
		UGI.app_id = APP_ID AND

		 UGX.is_deleted=0 

        GROUP BY UGX.user_group_id, QueuesStatus;

END CASE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_UserGroupsUsersById`(

IN UG_ID varchar(255) )
BEGIN

SELECT 

	distinct

	b.`user_group_id` UserGroupId,

	b.`user_id` UserID,

    b.`is_admin` IsAdmin,

    b.`is_deleted` IsDeleted, 

    b.`created_by` CreatedBy,

	concat(k.FirstName,' ', k.LastName) UserFullName,

	k.Email  UserEmail,

	k.PhoneNumber  UserPhoneNumber,

    concat(c.FirstName,' ', c.LastName) CreatedByName,

    concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

    b.`last_updated_by` LastUpdatedBy,

    b.`created_on` CreatedOn,

    b.`last_updated_on` LastUpdatedOn

FROM 

	`user_usergroup_xref` b join

    aspnetusers c join

    aspnetusers l join

    aspnetusers k

WHERE 

	b.user_group_id = IF(UG_ID <> '-1', UG_ID, b.user_group_id) 

    AND

    b.created_by = c.Id

    AND

    b.last_updated_by = l.id

    AND

    b.user_id=k.id

    AND

    b.is_deleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_UserSettings`(
	IN APP_ID INT(11),
    IN USER_ID_VALUE VARCHAR(128)
)
BEGIN

SELECT 
    OSI.settings_id SettingsId,
    OSI.account_id AccountId,
    OSI.name Name,
    COALESCE(OSI.app_id, - 1) AppId,
    OSI.description Description,
    UOSX.value `Value`
FROM
    organization_settings_info OSI
        LEFT JOIN
    user_org_settings_xref UOSX ON (OSI.settings_id = UOSX.setting_id
        AND UOSX.user_id = USER_ID_VALUE)
WHERE
	(OSI.app_id = APP_ID OR OSI.app_id IS NULL)
    AND
    OSI.is_active = 1;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_Watch_List`(APP_ID INT(11),SOURCE_ID INT(11))
BEGIN

SELECT 

    SWL.user_id as UserID,
    SWL.app_id as AppID,
    SWL.source_id as SourceID,
    SWL.mapping_id as MappingID
    
FROM

    servicerequest_watch_list SWL 
    
WHERE
  
  
    SWL.is_deleted = 0 AND SWL.app_id = APP_ID AND SWL.source_id = SOURCE_ID;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WatchListsByUserId`(
	IN USER_ID_VALUE VARCHAR(128), 
	IN APP_ID INT(11),
	IN WATCH_LIST_ID INT(11)
)
BEGIN
  
SELECT 
	wl.watch_list_id WatchListId,
	wl.name WatchListName,
	wl.source_object_type_id SourceObjectTypeId,
	wl.css_class_name CssClassName,
	wl.report_config ReportConfig,
	
	dotl.name SourceObjectTypeName,
	COALESCE(dotl.data_source_id, -1) DataSourceId,
	dotl.plural_label SourceObjectPluralLabel,
	dotl.display_name SourceObjectDisplayName,
	dotl.schema_name SourceObjectSchemaName,
	
	ds.connection_string DataSourceConnectionString,
    ds.data_base_type_id DataSourceDatabaseTypeID,
	
	ri.rule_id RuleId,
	ri.name RuleName
FROM
	user_watch_list_xref uwlx
		JOIN
	watch_list_info wl ON (uwlx.watch_list_id = wl.watch_list_id AND wl.is_active = 1)
		JOIN
	data_object_type_lookup dotl ON (dotl.data_object_type_id = wl.source_object_type_id
										AND dotl.is_active = 1
										AND dotl.app_id = APP_ID)
		JOIN
	datasources ds ON (dotl.data_source_id = ds.datasource_id AND ds.is_active = 1)
		LEFT JOIN
	rule_info ri ON (wl.watch_list_id = ri.watch_list_id 
						AND ISNULL(ri.is_active) = 1 
						AND (ri.active_from > now() AND ri.active_until < now()))
		LEFT JOIN
	rule_parameter_info rpi ON (ri.rule_id = rpi.rule_id)
WHERE
	uwlx.user_id = USER_ID_VALUE
	AND
	CASE WHEN WATCH_LIST_ID > 1 THEN 
	 wl.watch_list_id = WATCH_LIST_ID 
	ELSE
		1=1
	END
GROUP BY uwlx.watch_list_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WorkflowById`(IN WORKFLOW_ID int)
BEGIN

SELECT 

    w.workflow_id AS 'Id',

    w.name AS 'Name',

    w.short_name AS 'ShortName',

    wsdi.data_definition 'DataDefinition',

    w.css_class_name AS 'CssClassName',

    w.short_description AS 'ShortDescription',

    w.long_description AS 'LongDescription',

    w.is_active AS 'Active',

    w.service_request_type_id AS 'ServiceTypeId',

    w.active_from AS 'ActiveFrom',

    w.active_until AS 'ActiveUntil',

    w.created_by AS 'CreatedBy',

    CONCAT(c.FirstName, ' ', c.LastName) AS 'CreatedByName',

    w.created_on AS 'CreatedOn',

    w.last_updated_on AS 'LastUpdatedOn',

    w.last_updated_by AS 'LastUpdatedBy',

    CONCAT(l.FirstName, ' ', l.LastName) AS 'LastUpdatedByName',

    w.deleted AS 'Deleted'

FROM

    `workflow_info` w

        LEFT JOIN

    workflow_step_definition_info wsdi ON (wsdi.workflow_id = w.workflow_id)

        LEFT JOIN

    aspnetusers c ON (c.id = w.created_by)

        LEFT JOIN

    aspnetusers l ON (l.id = w.last_updated_by)

WHERE

    w.workflow_id = WORKFLOW_ID

        AND w.deleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WorkflowInfoByServiceTypeId`(IN SERVICE_REQUEST_TYPE_ID int)
BEGIN

	SELECT 

    w.workflow_id as 'WorkflowId',

    w.name as 'Name',

    w.short_description as 'ShortDescription',

    w.long_description as 'LongDescription',

    w.is_active as 'IsActive',

    w.service_request_type_id as 'ServiceTypeId',

    w.active_from as 'ActiveFrom',

    w.active_until as 'ActiveUntil',

    w.created_by as 'CreatedBy',

    u.username as 'CreatedUserName',

    w.created_on as 'CreatedOn',

    w.last_updated_on as 'LastUpdatedOn',

    w.last_updated_by as 'LastUpdatedBy',

    u.username AS 'LastUpdatedUserName',

    w.deleted as 'Deleted'

FROM

    `xproc`.`workflow_info` w,

    `xproc`.`users` u

WHERE

		w.deleted = 0

        AND u.id = w.created_by

        AND u.id = w.last_updated_by

		AND w.service_request_type_id = SERVICE_REQUEST_TYPE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WorkflowLifeCycle`(

IN DATA_OBJECT_TYPE_ID LONGTEXT

)
BEGIN

SELECT  

	DOLWX.data_object_type_id AS DataObjectID,

    DOLWX.lifecycle_event_type_id AS LifeCycleEventTypeID, 

    DOLWX.workflow_id AS Id, 

    WSI.workflow_step_id AS WorkFlowStepID,

    WI.service_request_type_id AS ServiceRequestTypeID,

    DOLWX.created_by AS CreatedBy, 

    DOLWX.created_on  AS CreatedOn,  

    DOLWX.last_updated_on AS LastUpdatedOn, 

    DOLWX.last_updated_by AS LastUpdatedBy

FROM dataobject_lifecycle_workflows_xref  DOLWX

	JOIN workflow_step_info WSI ON (WSI.workflow_id = DOLWX.workflow_id AND WSI.initial_step = 1)

    JOIN workflow_info WI ON (WSI.workflow_id = WI.workflow_id)

WHERE 	FIND_IN_SET(DOLWX.data_object_type_id, DATA_OBJECT_TYPE_ID); 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GET_WorkflowRequestsbyStatus`(IN UserID VARCHAR(128), IN WorkflowId long,

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 

	WorkflowStepId,

	Step,

    WorkflowId,

    SUM(completed_request) completed_requests,

    SUM(pending_request) pending_requests,

    SUM(valid_request) total_requests

    FROM

	(SELECT 

		wssi.workflow_step_id WorkflowStepId,

		wsi.name Step,

		wsi.workflow_id WorkflowId,

		wssi.process_indicator,

		CASE 

			WHEN process_indicator = '1' THEN 'PENDING' 

			WHEN process_indicator = '0' THEN 'COMPLETED'

		END

			AS 'STATUS',  

		IF (wssi.process_indicator = 0, 1, 0) completed_request,

		IF (wssi.process_indicator = 1, 1, 0) pending_request,

		IF (1 = 1, 1, 0) valid_request

		FROM    

			workflow_step_stage_info wssi,

			workflow_step_info wsi

			LEFT JOIN step_info si ON (wsi.step_id = si.step_id),

            servicerequest_info sri

		WHERE

			wssi.workflow_step_id = wsi.workflow_step_id

			AND	wsi.workflow_id = WorkflowId

            AND wssi.last_updated_by = UserID

            AND (sri.service_request_id = wssi.service_request_id

				AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)) PREV

GROUP BY WorkflowStepId;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WorkflowSLAScoreByUserID`(IN UserID VARCHAR(128), IN WorkflowId long, 

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 

			ServiceTypeId,

            Service,

			workflow_step_id,

            WorkflowId,

            Workflow,

            Step,

            ROUND(AVG(SLAPercentage), 2) SLAPercentage,

            MIN(SLAPercentage) MinSLA,

            MAX(SLAPercentage) MaxSLA

    FROM

        (SELECT 

        wssi.workflow_step_stage_id,

            wssi.workflow_step_id,

            srti.service_request_type_id ServiceTypeId,

            srti.name Service,

            wi.workflow_id AS 'WorkflowId',

            wi.name AS 'Workflow',

            si.step_id,

            wsi.name AS Step,

            si.sla,

            si.sla_unit,

            

            @Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

            CASE

                WHEN si.sla_unit = 'D' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'H' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'M' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)

                ELSE ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100, 2)

            END AS SLAPercentage,

            wssi.created_on,

            wssi.last_updated_on,

            wssi.process_indicator

    FROM

        workflow_step_stage_info wssi

    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id)

    LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id)

    LEFT JOIN step_info si ON (wsi.step_id = si.step_id AND si.step_type = 0)

    , servicerequest_info sri

    WHERE

        wssi.process_indicator = 0

            AND si.step_id IS NOT NULL

            AND wssi.last_updated_by = UserID

            AND (sri.service_request_id = wssi.service_request_id

				AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)

    GROUP BY wssi.workflow_step_stage_id

    ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA

    GROUP BY WorkflowId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WorkflowStepSLAScoreByUserID`(IN UserID VARCHAR(128), IN WorkflowId long, 

	IN FROM_DATE DATETIME, IN TO_DATE DATETIME)
BEGIN

SELECT 

		ServiceTypeId,

		Service,

		workflow_step_id,

		WorkflowId,

		Workflow,

		StepId,

		Step,

		SLAPercentage

    FROM

        (SELECT 

        wssi.workflow_step_stage_id,

            wssi.workflow_step_id,

            srti.service_request_type_id ServiceTypeId,

            srti.name Service,

            wi.workflow_id AS 'WorkflowId',

            wi.name AS 'Workflow',

            si.step_id AS StepId,

            wsi.name AS Step,

            si.sla,

            si.sla_unit,

            

            @Elapsed:=TIMESTAMPDIFF(SECOND, wssi.created_on, wssi.last_updated_on) AS ElapsedTime,

            CASE

                WHEN si.sla_unit = 'D' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 24 * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'H' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 60 * 100, 2)

                WHEN si.sla_unit = 'M' THEN ROUND((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 60 * 100, 2)

                ELSE CEIL((si.sla / IF(@Elapsed = 0, 1, @Elapsed)) * 100)

            END AS SLAPercentage,

            wssi.created_on,

            wssi.last_updated_on,

            wssi.process_indicator

    FROM

        workflow_step_stage_info wssi

    LEFT JOIN workflow_step_info wsi ON (wssi.workflow_step_id = wsi.workflow_step_id)

    LEFT JOIN workflow_info wi ON (wsi.workflow_id = wi.workflow_id AND wi.workflow_id = WorkflowId)

    LEFT JOIN servicerequest_type_info srti ON (wi.service_request_type_id = srti.service_request_type_id)

    LEFT JOIN step_info si ON (wsi.step_id = si.step_id AND si.step_type = 0)

    , servicerequest_info sri

    WHERE

        wssi.process_indicator = 0

            AND si.step_id IS NOT NULL

            AND wssi.last_updated_by = UserID

            AND (sri.service_request_id = wssi.service_request_id

				AND sri.created_on BETWEEN FROM_DATE AND TO_DATE)

    GROUP BY wssi.workflow_step_stage_id

    ORDER BY wssi.workflow_step_stage_id DESC) AS PREVDATA;

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Get_WorkflowStepStageInfoById`(
IN WORK_FLOW_STEP_STAGE_ID INT(12) )
BEGIN
SELECT
wssi.workflow_step_stage_id AS 'WorkflowStepStageId',
wssi.service_request_id AS 'ServiceRequestId',
wssi.created_on AS 'CreatedOn',
wssi.last_updated_on AS 'LastUpdatedOn',
wssi.service_request_json 'ServiceRequestJson',
u2.id AS 'CreatedBy',
u1.id AS 'LastUpdatedBy',
IFNULL(wssi.process_indicator, 2) AS 'ProcessIndicator'
FROM
workflow_step_stage_info wssi
LEFT JOIN aspnetusers u1 ON (wssi.last_updated_by = u1.Id)
LEFT JOIN aspnetusers u2 ON (wssi.created_by = u2.Id)
WHERE
wssi.workflow_step_stage_id =WORK_FLOW_STEP_STAGE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GetFieldById`(

IN service_type_id int(11),

IN field_id int(11)

)
BEGIN

DECLARE source_object_type_id INT DEFAULT 0;

select fi.source_object_type_id into source_object_type_id from field_info fi where fi.field_id=field_id

and fi.type='relation' and fi.service_request_type_id = service_type_id;



IF service_type_id = source_object_type_id THEN

SELECT

fi.`field_id` Id,

fi.`service_request_type_id` ServiceRequestTypeId,

fi.`name` 'Name',

fi.`display_name` DisplayName,

fi.`type` TypeName,
fi.`type` FieldType,

fi.`readonly` IsReadonly,

fi.`unique` IsUnique,

fi.`parent_field_id` ParentFieldId,

fi.`cascading_parent_field_id` CascadingParentFieldId,

fi.`display_type` DisplayType,

fi.`created_by` CreatedBy,

fi.`created_on` CreatedOn,

fi.`last_updated_by` LastUpdatedBy,

fi.`last_updated_on` LastUpdatedOn,

fi.`random_key` RandomKey,

fi.`formula_expression` FormulaExpression,

fi.`formula_result_type` FormulaResultType,

fi.`is_question` IsQuestion,

fi.`expected_response` ExpectedResponse,

lvi.lookup_value_id 'LookupId',

lvi.values 'Values',

lvi.name LookupName,

lvi.is_global LookupIsGlobal,

COALESCE(fi.relation_id, 0) RelationId,

COALESCE(storl.relation_type, '') RelationshipType,

COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,

COALESCE(sdotl.display_name, '') SourceObjectTypeName,

COALESCE(sdotl.plural_label, '') SourceObjectTypePluralLabel,

COALESCE(tdotl.display_name, '') TargetObjectTypeName,

COALESCE(tdotl.plural_label, '') TargetObjectTypePluralLabel,

COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId

FROM

field_info fi

LEFT JOIN field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id AND (fi.type = 'lookup' OR fi.type = 'cascadinglookup'))

LEFT JOIN lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)

LEFT JOIN service_type_object_relation_lookup storl ON (fi.relation_id = storl.relation_id)

LEFT JOIN data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id)

LEFT JOIN data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id)

WHERE

fi.service_request_type_id = service_type_id

AND fi.field_id = field_id;



ELSE

SELECT

fi.`field_id` Id,

fi.`service_request_type_id` ServiceRequestTypeId,

fi.`name` 'Name',

fi.`display_name` DisplayName,

fi.`type` TypeName,

fi.`readonly` IsReadonly,

fi.`unique` IsUnique,

fi.`parent_field_id` ParentFieldId,

fi.`cascading_parent_field_id` CascadingParentFieldId,

fi.`display_type` DisplayType,

fi.`created_by` CreatedBy,

fi.`created_on` CreatedOn,

fi.`last_updated_by` LastUpdatedBy,

fi.`last_updated_on` LastUpdatedOn,

fi.`random_key` RandomKey,

fi.`formula_expression` FormulaExpression,

fi.`formula_result_type` FormulaResultType,

fi.`is_question` IsQuestion,

fi.`expected_response` ExpectedResponse,

lvi.lookup_value_id 'LookupId',

lvi.values 'Values',

lvi.name LookupName,

lvi.is_global LookupIsGlobal,

COALESCE(fi.relation_id, 0) RelationId,

COALESCE(dorl.relation_type, '') RelationshipType,

COALESCE(fi.source_object_type_id, 0) SourceObjectTypeId,

COALESCE(sdotl.display_name, '') SourceObjectTypeName,

COALESCE(sdotl.plural_label, '') SourceObjectTypePluralLabel,

COALESCE(tdotl.display_name, '') TargetObjectTypeName,

COALESCE(tdotl.plural_label, '') TargetObjectTypePluralLabel,

COALESCE(fi.target_object_type_id, 0) TargetObjectTypeId

FROM

field_info fi

LEFT JOIN field_lookup_value_xref flvx ON (flvx.field_id = fi.field_id AND (fi.type = 'lookup' OR fi.type = 'cascadinglookup'))

LEFT JOIN lookup_value_info lvi ON (lvi.lookup_value_id = flvx.lookup_value_id)

LEFT JOIN data_object_relation_lookup dorl ON (fi.relation_id = dorl.relation_id)

LEFT JOIN data_object_type_lookup sdotl ON (sdotl.data_object_type_id = fi.source_object_type_id)

LEFT JOIN data_object_type_lookup tdotl ON (tdotl.data_object_type_id = fi.target_object_type_id)

WHERE

fi.source_object_type_id = service_type_id

AND fi.field_id = field_id;

END IF;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GetPermissionsByUser`(

IN USER_ID  varchar(256), IN ROLE_ID varchar(256))
BEGIN



SELECT 

	

    pl.permission_id,

    pl.name,

    pl.permission_type_id,

    pl.display_name,

    pl.source_id,

    pl.`type`

    

FROM

	user_permission_xref upx JOIN permission_lookup pl ON (pl.permission_id = upx.permission_id)

WHERE 

	upx.User_Id = USER_ID

GROUP BY upx.permission_id

    

UNION



SELECT 

    pl.permission_id,

    pl.name,

    pl.permission_type_id,

    pl.display_name,

    pl.source_id,

    pl.`type`

FROM

	role_permission_xref rpx JOIN permission_lookup pl ON (pl.permission_id = rpx.permission_id)

WHERE 

	rpx.role_id = ROLE_ID

GROUP BY rpx.permission_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GetRoles`(IN AppId int(11), IN UserId varchar(255))
BEGIN

SELECT 

    anr.Id AS 'RoleId',

    anr.Name AS 'Name',

    anr.Description AS 'Description'

FROM

    roles_app_xref rax

        LEFT JOIN

    users_app_xref uap ON uap.app_id = rax.app_id

        LEFT JOIN

    aspnetuserroles aur ON aur.UserId = uap.user_id

        LEFT JOIN

    aspnetroles anr ON anr.Id = aur.RoleId

WHERE

    aur.RoleId = rax.role_id

        AND aur.UserId = UserId

        AND uap.app_id = AppId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GetStepCategories`()
BEGIN 

SELECT 

	step_category_id Id, 

    name `Name`

 FROM step_category_lookup;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GetUserPermissionsByUserId`(IN USER_ID_VALUE VARCHAR(255))
BEGIN



SELECT 

            ugPermissions.permission_id, 'UserGroup' AS `SOURCE`, pl.name `SOURCE NAME`

        FROM

            usergroup_permission_xref ugPermissions

				LEFT JOIN

			permission_lookup pl ON (pl.permission_id = ugPermissions.permission_id)

        WHERE

            ugPermissions.user_group_id = (SELECT 

                    user_group_id

                FROM

                    user_usergroup_xref

                WHERE

                    user_id = USER_ID_VALUE)

                    

			UNION ALL

            

            SELECT 

            upx.permission_id, 'User' AS `SOURCE`, pl.name `SOURCE NAME`

        FROM

            user_permission_xref upx

            LEFT JOIN

			permission_lookup pl ON (pl.permission_id = upx.permission_id)

        WHERE

            upx.User_Id = USER_ID_VALUE

            

		UNION ALL

        

        SELECT 

            rpx.permission_id, 'Role' AS `SOURCE`, pl.name `SOURCE NAME`

            

        FROM

            role_permission_xref rpx

            LEFT JOIN

			permission_lookup pl ON (pl.permission_id = rpx.permission_id)

        WHERE

            rpx.role_id IN (SELECT asur.RoleId FROM aspnetuserroles asur WHERE asur.UserId = USER_ID_VALUE);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetValidTokenCount`(IN AUTH_KEY longtext,IN IP_ADDRESS longtext,OUT AUTH_COUNT int)
BEGIN
DECLARE ALLOWED_HOSTS longtext DEFAULT NULL;
-- DECLARE AVILABLE_IP_ADDRESSES longtext DEFAULT NULL;

SET ALLOWED_HOSTS = IF(IP_ADDRESS IS NOT NULL,(SELECT AAK.allowed_hosts from application_auth_keys AAK where AAK.auth_key = AUTH_KEY),null);
IF ALLOWED_HOSTS IS NOT NULL THEN
	CALL GetValuesFromIPString(ALLOWED_HOSTS,@AVILABLE_IP_ADDRESSES);
END IF;

SET  AUTH_COUNT = 
(SELECT 
    COUNT(AAK.auth_Id) As `COUNT`
FROM
     application_auth_keys AAK
        LEFT JOIN
    app_info AI ON (AAK.app_id = AI.app_id)
        LEFT JOIN
	servicerequest_type_info STI ON (STI.service_request_type_id = AAK.service_type_id)
        LEFT JOIN
    accounts_app_xref APX ON AI.app_id = APX.app_id
        LEFT JOIN
    accounts_info ACI ON (ACI.accounts_id = APX.accounts_id)
        LEFT JOIN
    aspnetusers C ON AAK.created_by = C.Id
WHERE
    AAK.auth_key = AUTH_KEY
        AND AAK.expires_on >= CURDATE()
         AND AI.is_deleted = 0
        AND AI.is_active = 1
        AND STI.deleted = 0
        AND STI.is_active = 1
        AND ACI.is_deleted = 0
        AND AAK.is_active = 1        
        AND 
        CASE WHEN @AVILABLE_IP_ADDRESSES IS NOT NULL THEN FIND_IN_SET(IP_ADDRESS,@AVILABLE_IP_ADDRESSES)  ELSE TRUE END
LIMIT 1);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `GetValuesFromIPString`(IN IP_ADDRESSES longtext,OUT AVILABLE_IP_ADDRESSES longtext)
BEGIN
	DECLARE front TEXT DEFAULT NULL;
	DECLARE frontlen INT DEFAULT NULL;
	DECLARE TempValue TEXT DEFAULT NULL;
    DECLARE TempValue1 TEXT DEFAULT NULL;
	DECLARE TempValue2 TEXT DEFAULT NULL;
	DECLARE TempValue3 TEXT DEFAULT NULL;
	DECLARE TempValue4 TEXT DEFAULT NULL;
	DECLARE CharCount1 INT DEFAULT 0;
	DECLARE CharCount2 INT DEFAULT 0;
  
	DECLARE LASTIP1 INT DEFAULT 0;
	DECLARE LASTIP2 INT DEFAULT 0;
    
    DECLARE VAL1DOT1 TEXT DEFAULT NULL;
	DECLARE VAL1DOT2 TEXT DEFAULT NULL;
    DECLARE VAL1DOT3 TEXT DEFAULT NULL;
	DECLARE VAL1DOT4 TEXT DEFAULT NULL;
    
    DECLARE VAL2DOT1 TEXT DEFAULT NULL;
	DECLARE VAL2DOT2 TEXT DEFAULT NULL;
    DECLARE VAL2DOT3 TEXT DEFAULT NULL;
	DECLARE VAL2DOT4 TEXT DEFAULT NULL;
    drop temporary table if exists store;
	create temporary table store( val text );
	iterator:
		LOOP  
			IF LENGTH(TRIM(IP_ADDRESSES)) = 0 OR IP_ADDRESSES IS NULL THEN
				LEAVE iterator;
			END IF;
			SET front = SUBSTRING_INDEX(IP_ADDRESSES,',',1);
			SET frontlen = LENGTH(front);
			SET TempValue = TRIM(front);
  
			INSERT INTO store (val) VALUES (TRIM(TempValue));
			SET IP_ADDRESSES = INSERT(IP_ADDRESSES,1,frontlen + 1,'');
  
			IF TempValue like "%-%" > 0 then 
				set TempValue1 = TRIM((select xproc_developer_master.SPLIT_STR(TempValue, '-', 1)));
				set TempValue2 = TRIM((select xproc_developer_master.SPLIT_STR(TempValue, '-', 2)));
    
					IF ((TempValue1 IS NOT NULL OR TempValue1 != '') AND TempValue1 like "%.%" > 0) AND ((TempValue2 IS NOT NULL OR TempValue2 != '') AND TempValue2 like "%.%" > 0) then
						set CharCount1 = (select xproc_developer_master.GetCharCountOfString(TempValue1, '.'));
						set CharCount2 = (select xproc_developer_master.GetCharCountOfString(TempValue2, '.'));
    
							IF (CharCount1 > 0 AND CharCount2 >0) AND (CharCount1 = CharCount2) AND CharCount1= 3 AND CharCount2 = 3  then								
								set VAL1DOT1= (select xproc_developer_master.SPLIT_STR(TempValue1, '.', 1));
                                set VAL1DOT2 = (select xproc_developer_master.SPLIT_STR(TempValue1, '.', 2));
                                set VAL1DOT3= (select xproc_developer_master.SPLIT_STR(TempValue1, '.', 3));
                                set VAL1DOT4 = (select xproc_developer_master.SPLIT_STR(TempValue1, '.', 4));
                                
                                set VAL2DOT1= (select xproc_developer_master.SPLIT_STR(TempValue2, '.', 1));
                                set VAL2DOT2 = (select xproc_developer_master.SPLIT_STR(TempValue2, '.', 2));
                                set VAL2DOT3= (select xproc_developer_master.SPLIT_STR(TempValue2, '.', 3));
                                set VAL2DOT4 = (select xproc_developer_master.SPLIT_STR(TempValue2, '.', 4));
								-- SELECT VAL1DOT1;
								-- SELECT VAL1DOT2;
                                -- SELECT VAL1DOT3;
								-- SELECT VAL1DOT4;
                                -- SELECT VAL2DOT1;
								-- SELECT VAL2DOT2;
                                -- SELECT VAL2DOT3;
								-- SELECT VAL2DOT4;
								set LASTIP1=convert(''+TRIM(VAL1DOT4), UNSIGNED INTEGER);
								set LASTIP2=convert(''+TRIM(VAL2DOT4), UNSIGNED INTEGER);
								 -- SELECT LASTIP1;
								 -- SELECT LASTIP2;
								 IF (VAL1DOT1 = VAL2DOT1) AND (VAL1DOT2 = VAL2DOT2) AND (VAL1DOT3 = VAL2DOT3) AND (LASTIP1 < LASTIP2) then   
									iterator1:
									LOOP 
										IF (LASTIP1 > LASTIP2) THEN
											LEAVE iterator1;
										END IF;   
										
										INSERT INTO store (val) VALUES (concat(VAL1DOT1,".",VAL1DOT2,".",VAL1DOT3,".",LASTIP1));  
										SET LASTIP1=LASTIP1+1;
										-- SELECT LASTIP1;
										-- SELECT LASTIP2; 
    
									END LOOP;
								 END IF;
					END IF;
    
    END IF;  
      
			END IF;
		END LOOP;
	SELECT DISTINCT
    GROUP_CONCAT(val) into AVILABLE_IP_ADDRESSES
FROM
    store s WHERE s.val NOT LIKE '%-%';
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `IsRequiredToDeleteRelationsAndFields`(

IN service_type_id int(11),

IN field_id int(11),

IN relation_type varchar(5),

IN source_object_type_id int(11),

IN target_object_type_id int(11),

IN relation_to_other_type bit,

OUT return_status int

)
BEGIN

DECLARE resultant INT DEFAULT 1; /*If Change exists in existing relation*/

IF relation_to_other_type = 0 THEN

IF service_type_id = source_object_type_id THEN



			select count(1) into resultant 

			from  service_type_object_relation_lookup storl , field_info fi 

			where storl.source_object_id = fi.source_object_type_id  AND

			storl.target_object_id = fi.target_object_type_id and fi.type = 'relation' 

            #and storl.relation_type=relation_type;

            AND  fi.field_id=field_id;

            

            IF resultant > 0 THEN

				set return_status = 1;

            ELSE

				set return_status = 0;

            END IF;

ELSE

		

			select count(1) into resultant 

			from data_object_relation_lookup  dorl , field_info fi 

			where dorl.source_object_id = fi.source_object_type_id  AND

			dorl.target_object_id = fi.target_object_type_id and fi.type = 'relation' 

            #and dorl.relation_type = relation_type;

             AND  fi.field_id=field_id;

            

            IF resultant > 0 THEN

				set return_status = 1;

            ELSE

				set return_status = 0;

            END IF;

END IF;

 ELSE 

	IF service_type_id = source_object_type_id THEN



			select count(1) into resultant 

			from  service_type_object_relation_lookup storl , field_info fi 

			where storl.source_object_id = fi.source_object_type_id  AND

			storl.target_object_id = fi.target_object_type_id and fi.type = 'relation' 

            and storl.relation_type=relation_type

            AND  fi.field_id=field_id;

            

            IF resultant > 0 THEN

				set return_status = 0;

            ELSE

				set return_status = 1;

            END IF;

ELSE

		

			select count(1) into resultant 

			from data_object_relation_lookup  dorl , field_info fi 

			where dorl.source_object_id = fi.source_object_type_id  AND

			dorl.target_object_id = fi.target_object_type_id and fi.type = 'relation' 

            and dorl.relation_type = relation_type

             AND  fi.field_id=field_id;

            

            IF resultant > 0 THEN

				set return_status = 0;

            ELSE

				set return_status = 1;

            END IF;

END IF;

 END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `LoopDemo`()
BEGIN

	DECLARE x  INT;

	DECLARE str  VARCHAR(255);

        

	SET x = 1;

	SET str =  '';

        

	loop_label:  LOOP

		IF  x > 10 THEN 

			LEAVE  loop_label;

		END  IF;

            

		SET  x = x + 1;

		IF  (x mod 2) THEN

			ITERATE  loop_label;

		ELSE

			SET  str = CONCAT(str,x,',');

		END  IF;

	END LOOP;

	SELECT str;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `make_intervals`(startdate timestamp, enddate timestamp, intval integer, unitval varchar(10))
BEGIN

-- *************************************************************************

-- Procedure: make_intervals()

--    Author: Ron Savage

--      Date: 02/03/2009

--

-- Description:

-- This procedure creates a temporary table named time_intervals with the

-- interval_start and interval_end fields specifed from the startdate and

-- enddate arguments, at intervals of intval (unitval) size.

-- *************************************************************************

   declare thisDate timestamp;

   declare nextDate timestamp;

   set thisDate = startdate;



   -- *************************************************************************

   -- Drop / create the temp table

   -- *************************************************************************

   drop temporary table if exists time_intervals;

   create temporary table if not exists time_intervals

      (

      interval_start timestamp,

      interval_end timestamp

      );



   -- *************************************************************************

   -- Loop through the startdate adding each intval interval until enddate

   -- *************************************************************************

   repeat

      select

         case unitval

            when 'MICROSECOND' then timestampadd(MICROSECOND, intval, thisDate)

            when 'SECOND'      then timestampadd(SECOND, intval, thisDate)

            when 'MINUTE'      then timestampadd(MINUTE, intval, thisDate)

            when 'HOUR'        then timestampadd(HOUR, intval, thisDate)

            when 'DAY'         then timestampadd(DAY, intval, thisDate)

            when 'WEEK'        then timestampadd(WEEK, intval, thisDate)

            when 'MONTH'       then timestampadd(MONTH, intval, thisDate)

            when 'QUARTER'     then timestampadd(QUARTER, intval, thisDate)

            when 'YEAR'        then timestampadd(YEAR, intval, thisDate)

         end into nextDate;



      insert into time_intervals select thisDate, timestampadd(MICROSECOND, -1, nextDate);

      set thisDate = nextDate;

   until thisDate >= enddate

   end repeat;



 END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `PagerTest`(

	IN OBJECT_TYPE_ID INT,

    IN SERVICE_TYPE_ID INT,

   _PageIndex INT

   ,_PageSize INT

   ,OUT _RecordCount INT

)
BEGIN

       SET @RowNumber:=0;

 

       CREATE TEMPORARY TABLE Results

       SELECT @RowNumber:=@RowNumber+1 RowNumber,

				dori.data_object_record_id,

				dotl.name,

				dori.assigned_to,

				dori.is_active,

				dori.`values`

			FROM

				data_object_record_info dori

					JOIN

				data_object_type_lookup dotl ON (dotl.data_object_type_id = dori.data_object_type_id)

			WHERE

				dotl.data_object_type_id = OBJECT_TYPE_ID

					AND dotl.service_request_type_id = SERVICE_TYPE_ID;

      

 

       SET _RecordCount =(SELECT COUNT(*) FROM Results);

 

       SELECT * FROM Results WHERE RowNumber BETWEEN(_PageIndex -1) * _PageSize + 1 AND(((_PageIndex -1) * PageSize + 1) + PageSize) - 1;

 

       DROP TEMPORARY TABLE Results;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `procedure1`(

IN WORKFLOW_STEP_STAGE_ID INT(11),

IN USER_ID VARCHAR(255),

IN EMAIL_SUBJECT VARCHAR(500),

IN EMAIL_BODY VARCHAR(500)

)
BEGIN

  DECLARE strLen    INT DEFAULT 0;

  DECLARE SubStrLen INT DEFAULT 0;



  IF USER_ID IS NULL THEN

    SET USER_ID = '';

  END IF;



do_this:

  LOOP

    SET strLen = CHAR_LENGTH(USER_ID);

    

    SELECT  SUBSTRING_INDEX(USER_ID, ',', 1);

	INSERT INTO email_notification_process_info

			(

				workflow_step_stage_id,

				user_id,

				email_subject,

				email_body				 

			)

		VALUES

			(

				 WORKFLOW_STEP_STAGE_ID,

				 SUBSTRING_INDEX(USER_ID, ',', 1),

				 EMAIL_SUBJECT,

				 EMAIL_BODY

			); 

   -- UPDATE TestTable SET status = 'C' WHERE Id = SUBSTRING_INDEX(USER_ID, ',', 1);



    SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(USER_ID, ',', 1)) + 2;

    SET USER_ID = MID(USER_ID, SubStrLen, strLen);



    IF USER_ID = '' THEN

      LEAVE do_this;

    END IF;

  END LOOP do_this;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `RemovePermissions`(

IN SOURCE_ID varchar(255),

IN PERMISSIONS_TYPE_ID INT)
BEGIN



IF (PERMISSIONS_TYPE_ID = 1 OR PERMISSIONS_TYPE_ID = 4) THEN

Delete FROM `role_permission_xref` where `role_id`=SOURCE_ID;

ELSEIF PERMISSIONS_TYPE_ID = 2 THEN

Delete FROM `usergroup_permission_xref` where `user_group_id`=SOURCE_ID;

ELSE

Delete FROM `user_permission_xref` where `User_Id`=SOURCE_ID;

END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `RemoveUserGroupPermissions`(

IN USER_GROUP_ID varchar(255))
BEGIN

Delete FROM  `usergroup_permission_xref` where `user_group_id`=USER_GROUP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `ResumeAccount`(

IN accountId INT(11),

IN resumeAccount bit(1),

IN lastUpdatedBy varchar(128),

IN lastUpdatedOn datetime

)
BEGIN

	UPDATE 

			`accounts_info` 

    SET 

			`is_suspended`= resumeAccount ,

            `last_updated_by`=lastUpdatedBy,

            `last_updated_on`=lastUpdatedOn

    WHERE 

			`accounts_id`= accountId;

    

    UPDATE 

			`accounts_status` 

    SET 

			`status`= resumeAccount,

            `updated_by`=lastUpdatedBy,

            `updated_on`=lastUpdatedOn

    WHERE 

			`account_id`= accountId;

    

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_Application_Auth_token`(
IN APPLICATION_NAME varchar(125),

IN AUTH_KEY longtext,

IN EXPIRES_ON datetime, 

IN CREATED_BY varchar(128),

IN CREATED_ON datetime,

IN IS_ACTIVE bit(1),

IN APP_ID int(11),

IN SERVICE_TYPE_ID int(11),

IN DATA_MAPPER_ID int(11),

IN ALLOWED_HOSTS longtext,

OUT AUTH_ID INT(11))
BEGIN

INSERT INTO application_auth_keys	(
								application_name,

                                auth_key,

                                expires_on,                                                             

                                created_on,
                                
								created_by, 

                                is_active,
                                
								app_id,
                                
                                service_type_id,
                                
                                data_mapper_id,
                                
                                allowed_hosts                                
                                
                    )

					VALUES
                    (
								APPLICATION_NAME,

								AUTH_KEY,

								EXPIRES_ON,

								CREATED_ON , 
                                
								CREATED_BY ,

								IS_ACTIVE,

								APP_ID,
                                
                                SERVICE_TYPE_ID,
                                
                                DATA_MAPPER_ID,
                                
                                ALLOWED_HOSTS
                    );
                    

SELECT LAST_INSERT_ID() INTO AUTH_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_DataObjectType`(

	IN name varchar(50),

	IN displayName varchar(5000),

	IN pluralLabel varchar(50),

    IN description varchar(5000),
    
    IN Prefix varchar(10),

	IN cssClassName varchar(50),

    IN appId int(11),

    IN isEditable int(1),

	IN isActive int(1),

    IN created_on datetime,

	IN created_by varchar(50),

	IN last_updated_on datetime, 

	IN last_updated_by varchar(50),

	OUT dataObjectTypeId INT(11))
BEGIN

	IF EXISTS (SELECT 1 FROM data_object_type_lookup DOTL WHERE  (DOTL.name=name || DOTL.plural_label=pluralLabel) and app_id=appId AND DOTL.is_deleted=0 ) THEN 

		SET dataObjectTypeId=0;

	ELSE

		INSERT INTO data_object_type_lookup

			(		

				name,

				display_name,

				plural_label,

				description,
                
				object_prefix,
                
				css_class_name,

				app_id,

				is_editable,

				is_active,

				created_on,

				last_updated_on,

				created_by,

				last_updated_by

			)

		VALUES

			(

				name,

				displayName,

				pluralLabel,

				description,
                
                Prefix,

				cssClassName,

				appId,

				isEditable,

                isActive,				

				created_on,

				last_updated_on,

                created_by,

				last_updated_by

			);

		SELECT LAST_INSERT_ID() INTO dataObjectTypeId; 

	END IF;	

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_EmailNotificationProcessInfo`( 

IN WORKFLOW_STEP_STAGE_ID INT(11),

IN USER_ID VARCHAR(255),

IN EMAIL_SUBJECT VARCHAR(500),

IN EMAIL_BODY LONGTEXT,

IN PROCESS_INDICATOR INT(11), 

IN CREATED_BY VARCHAR(50),

IN CREATED_ON DATETIME,

IN LAST_UPDATED_BY VARCHAR(50),

IN LAST_UPDATED_ON DATETIME )
BEGIN



	DECLARE strLen    INT DEFAULT 0;

	DECLARE SubStrLen INT DEFAULT 0;



	IF USER_ID IS NULL THEN

		SET USER_ID = '';

	END IF;



do_this:

  LOOP

    SET strLen = CHAR_LENGTH(USER_ID);

    

		INSERT INTO email_notification_process_info

			(

				workflow_step_stage_id,

				user_id,

				email_subject,

				email_body,

				process_indicator,

				created_by,

				created_on, 

				last_updated_by,

				last_updated_on

			)

		VALUES

			(

				 WORKFLOW_STEP_STAGE_ID,

				 SUBSTRING_INDEX(USER_ID, ',', 1),

				 EMAIL_SUBJECT,

				 EMAIL_BODY,

				 PROCESS_INDICATOR,

				 CREATED_BY,

				 CREATED_ON, 

				 LAST_UPDATED_BY,

				 LAST_UPDATED_ON

			); 

	

    SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(USER_ID, ',', 1)) + 2;

    SET USER_ID = MID(USER_ID, SubStrLen, strLen);



    IF USER_ID = '' THEN

      LEAVE do_this;

    END IF;

  END LOOP do_this;

   

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_Notification`(

IN USER_ID varchar(50),

IN SOURCE_TYPE_ID int(11),

IN SOURCE_ID int(11),

IN UNREAD int(1),

IN NOTIFICATION_TYPE varchar(50),

IN NOTIFICATION_LEVEL int(11),

IN MESSAGE_TEMPLATE_ID int(11),

IN CREATED_BY varchar(50),

IN CREATED_ON datetime,

IN LAST_UPDATED_BY varchar(50),

IN LAST_UPDATED_ON datetime, 

OUT NOTIFICATION_ID INT(11)

)
BEGIN

INSERT INTO notification_info

		(

			user_id,

			source_type_id,

            source_id,

			unread,

			notification_type,

			notification_level,

			message_template_id, 

			created_by,

			created_on,

			last_updated_by,

			last_updated_on

		)

	VALUES

		(

			 USER_ID,

             SOURCE_TYPE_ID,

             SOURCE_ID,

             UNREAD,

             NOTIFICATION_TYPE,

             NOTIFICATION_LEVEL,

             MESSAGE_TEMPLATE_ID,

             CREATED_BY,

             CREATED_ON,

             LAST_UPDATED_BY,

             LAST_UPDATED_ON

		);

		SELECT LAST_INSERT_ID() INTO NOTIFICATION_ID; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `save_ObjectPermissions`(

IN displayName varchar(5000) ,

IN dataObjectTypeId INT(11))
BEGIN

INSERT INTO permission_lookup

			(		

				name,

				permission_type_id,

				display_name,

				source_id,

				type,

				is_system

			)

		VALUES

			(concat('O_',displayName,'_', 'CREATE'),1,displayName,dataObjectTypeId,'O',0),

            (concat('O_',displayName,'_', 'EDIT'),2,displayName,dataObjectTypeId,'O',0),

            (concat('O_',displayName,'_','UPDATE'),3,displayName,dataObjectTypeId,'O',0),

            (concat('O_',displayName,'_', 'DELETE'),4,displayName,dataObjectTypeId,'O',0);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_Role_Permissions`(
IN ROLE_ID VARCHAR(255),
IN PERMISSIONS_ID LONGTEXT,
IN ACCESS_LEVEL INT)
BEGIN
	DECLARE strLen    INT DEFAULT 0;
	DECLARE SubStrLen INT DEFAULT 0;
    
    IF PERMISSIONS_ID IS NULL THEN

		SET PERMISSIONS_ID = '';

	END IF;
    
do_this:

  LOOP

    SET strLen = CHAR_LENGTH(PERMISSIONS_ID);

		INSERT INTO role_permission_xref
						(
							role_id,
							permission_id,
                            access_level
                         ) 
		VALUES		 	(
							ROLE_ID,
							SUBSTRING_INDEX(PERMISSIONS_ID, ',', 1),
                            ACCESS_LEVEL
						 );
                            
	 SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(PERMISSIONS_ID, ',', 1)) + 2;

     SET PERMISSIONS_ID = MID(PERMISSIONS_ID, SubStrLen, strLen);

    IF PERMISSIONS_ID = '' THEN

      LEAVE do_this;

    END IF;

  END LOOP do_this;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_SchedulerJobsByTime`()
BEGIN
	DECLARE finished INTEGER DEFAULT 0; 
    DECLARE schedulerId INT(11) DEFAULT -1;

	-- declare cursor for scheduler list
    DEClARE schedulerjobs 
    CURSOR FOR 
			SELECT SCI.scheduler_id  
			FROM  	schedulers_info SCI 
			INNER JOIN schedule_type_lookup STL ON SCI.schedule_type_id = STL.schedule_type_id
			WHERE SCI.start_time < NOW() AND SCI.is_active=1 AND SCI.is_delete=0;

	-- declare NOT FOUND handler
		DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;  
        
 -- Start Loop
	OPEN schedulerjobs;

	jobLoop: LOOP
    
		FETCH schedulerjobs INTO schedulerId;
        
		IF finished = 1 THEN 
			LEAVE jobLoop;
		END IF; 
        
        SET @SCHEDULER_ID=-1; 

		SET @EXECUTION_TIMSTAMP=-1;
        
        SET @SCHEDULER_TYPE=-1;
        
        SET @WEEK_DAYS=-1;
        
        SET @REPEAT_AFTER=-1;
        
        SET @REPEAT_AFTER_UNITS=-1;

		SET @JOB_STATUS=1;

		SET @JOB_PROCESS_STATUS=1;
        
        -- GET SCHEDULER  
		SELECT 
				SI.scheduler_id, 
                SI.start_time, 
                SI.schedule_type_id,
                SI.weekdays  ,
                SI.repeat_after ,
                SI.repeat_after_units  
		INTO 	@SCHEDULER_ID  , 
				@EXECUTION_TIMSTAMP, 
                @SCHEDULER_TYPE,  
                @WEEK_DAYS,  
                @REPEAT_AFTER, 
				@REPEAT_AFTER_UNITS  
		FROM  	schedulers_info SI WHERE SI.scheduler_id; 
         
         
         IF  @REPEAT_AFTER IS NULL AND @REPEAT_AFTER <> 0 THEN
			 
             SET @EXECUTION_TIMSTAMP = @EXECUTION_TIMSTAMP;
             
         ELSE
         
            CASE @REPEAT_AFTER_UNITS 
            
				WHEN 'mm'      THEN 
					-- Mintus
					 SET @EXECUTION_TIMSTAMP  = ADDTIME(@EXECUTION_TIMSTAMP, @REPEAT_AFTER);  
                     
				WHEN 'hh'        THEN 
					-- Mintus 
                  SET @EXECUTION_TIMSTAMP  = ADDTIME(@EXECUTION_TIMSTAMP, @REPEAT_AFTER);  
				
                WHEN 'dd'        THEN 
					-- HOURS
                  SET @EXECUTION_TIMSTAMP  = ADDTIME(@EXECUTION_TIMSTAMP, @REPEAT_AFTER);
                  
				WHEN 'MM'        THEN 
					-- HOURS
                  SET @EXECUTION_TIMSTAMP  = ADDTIME(@EXECUTION_TIMSTAMP, @REPEAT_AFTER); 

			END CASE; 

		END IF;
         
        INSERT 
			INTO job_execution_info
				(
					scheduler_id,
					execution_timestamp,
					status,
					is_process                
				)
			VALUES
				(
					 @SCHEDULER_ID,
					 @EXECUTION_TIMSTAMP,
					 @JOB_STATUS,
					 @JOB_PROCESS_STATUS
				);  
        
	END LOOP jobLoop;
    SELECT str;
	CLOSE schedulerjobs;
    

	

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_SMSNotificationProcessInfo`(

IN WORKFLOW_STEP_STAGE_ID INT(11),

IN USER_ID VARCHAR(255), 

IN SMS_BODY VARCHAR(500),

IN PROCESS_INDICATOR INT(11), 

IN CREATED_BY VARCHAR(50),

IN CREATED_ON DATETIME,

IN LAST_UPDATED_BY VARCHAR(50),

IN LAST_UPDATED_ON DATETIME)
BEGIN

	DECLARE strLen    INT DEFAULT 0;

	DECLARE SubStrLen INT DEFAULT 0;



	IF USER_ID IS NULL THEN

		SET USER_ID = '';

	END IF;

    

do_this:

	LOOP

    SET strLen = CHAR_LENGTH(USER_ID);

    

    INSERT INTO sms_notification_process_info

			(

				workflow_step_stage_id,

				user_id, 

				sms_body,

				process_indicator,

				created_by,

				created_on, 

				last_updated_by,

				last_updated_on

			)

		VALUES

			(

				 WORKFLOW_STEP_STAGE_ID,

				 SUBSTRING_INDEX(USER_ID, ',', 1), 

				 SMS_BODY,

				 PROCESS_INDICATOR,

				 CREATED_BY,

				 CREATED_ON, 

				 LAST_UPDATED_BY,

				 LAST_UPDATED_ON

			); 

	

    SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(USER_ID, ',', 1)) + 2;

    SET USER_ID = MID(USER_ID, SubStrLen, strLen);



    IF USER_ID = '' THEN

      LEAVE do_this;

    END IF;

  END LOOP do_this;       

            

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_Tag`(

		IN BACKGROUND_COLOR varchar(45),
		IN NAME varchar(45),
        IN APP_ID INT,
		OUT TAG_ID INT
        
)
BEGIN

INSERT INTO tag_info
				(
					background_color,
					name,
                    app_id
                ) 
                values
                (
					BACKGROUND_COLOR,
					NAME,
                    APP_ID
                );
SELECT LAST_INSERT_ID() INTO TAG_ID; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_User_Tag`(
	IN TAG_ID INT,
	IN SOURCE_ID INT(11),
	IN SOURCE_TYPE_ID INT(11),
    IN CREATED_BY VARCHAR(50),
	IN CREATED_ON DATETIME,
	IN LAST_UPDATED_BY VARCHAR(50),
	IN LAST_UPDATED_ON DATETIME
)
BEGIN

INSERT INTO user_tags
				(
					tag_id,
					source_id,
                    source_type_id,
					created_by,
                    created_on,
                    last_updated_by,
                    last_updated_on
                ) 
                values
                (
					TAG_ID,
					SOURCE_ID,
                    SOURCE_TYPE_ID,
                    CREATED_BY,
                    CREATED_ON,
                    LAST_UPDATED_BY,
                    LAST_UPDATED_ON
                );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Save_Watch_List`(
	IN SOURCE_ID INT,
	IN SOURCE_TYPE_ID INT,
    IN USER_ID VARCHAR(128),
    IN CREATED_BY VARCHAR(128),
    IN CREATED_ON DATETIME,
    IN LAST_UPDATED_BY VARCHAR(50),
    IN LAST_UPDATED_ON DATETIME,
    IN APP_ID INT(11)
)
BEGIN

INSERT INTO servicerequest_watch_list
				(
					source_id,
                    source_type_id,
                    user_id,
                    created_by,
                    created_on,
                    last_updated_by,
                    last_updated_on,
                    app_id
                ) 
                values
                (
					SOURCE_ID,
					SOURCE_TYPE_ID,
                    USER_ID,
                    CREATED_BY,
                    CREATED_ON,
                    LAST_UPDATED_BY,
                    LAST_UPDATED_ON,
                    APP_ID
                );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveAccount`(

IN orgTitle varchar(100),

IN orgWebisteUrl varchar(100),

IN OrgPrimaryIdentifier varchar(100),

IN OrgSecondaryIdentifier varchar(100),

IN OrgIPAddress varchar(255),

IN OrgCurrencyCode varchar(255),

IN profileImage varchar(500),

IN email varchar(50),

IN phoneNumber varchar(15),

IN faxNumber varchar(15),

IN contactPersonFirstName varchar(50),

IN contactPersonLastName varchar(50),

IN contactPersonEmail varchar(50),

IN addressLine1 varchar(45),

IN addressLine2 varchar(45),

IN city varchar(45),

IN state varchar(45),

IN countryCode varchar(45),

IN zipCode varchar(10),

IN createdBy varchar(128),

IN createdOn datetime,

IN lastUpdatedBy varchar(128),

IN lastUpdatedOn datetime,

OUT accountId INT(11))
BEGIN

SET @ORG_CODE = UUID();
INSERT INTO accounts_info

(

org_title,

org_webiste_url,

profile_image,

email,

phone_number,

fax_number,

contact_person_firstname,

contact_person_last_name,

contact_person_email,

address_line_1,

address_line_2,

city,

country_code,

state,

zipcode,

created_by,

last_updated_by,

created_on,

last_updated_on,

primary_database_identifier,

secondary_database_identifier,

org_code,

ip_address,

org_currency_code

)

VALUES

(

orgTitle,

orgWebisteUrl,

profileImage,

email ,

phoneNumber ,

faxNumber ,

contactPersonFirstName,

contactPersonLastName,

contactPersonEmail,

addressLine1 ,

addressLine2,

city,

countryCode ,

state ,

zipCode ,

createdBy ,

lastUpdatedBy,

createdOn ,

lastUpdatedOn,

OrgPrimaryIdentifier,

OrgSecondaryIdentifier,

@ORG_CODE,

OrgIPAddress,

OrgCurrencyCode

);



SELECT LAST_INSERT_ID() INTO accountId;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveContactRequests`(

	IN NAME varchar(100),

	IN EMAIL varchar(500),

    IN SUBJECT varchar(500),

    IN MESSAGE longtext,
    
    IN COMPANY varchar(120),
    
    IN PHONENUMBER varchar(15),

    OUT REQUEST_ID INT(11)

)
BEGIN

		INSERT INTO contact_requests
			(	
				name,
				email,
				subject,
				message,
                company,
                phone_number
			)

		VALUES
			(
				NAME,
				EMAIL,
				SUBJECT,
				MESSAGE,
                COMPANY,
                PHONENUMBER
			);

		SELECT LAST_INSERT_ID() INTO REQUEST_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveDataRecord`(

IN data_object_type_id int(11), 

IN name varchar(100),

IN description longtext,

IN field_values longtext,

IN created_by varchar(50),

IN created_on datetime,

IN last_updated_by varchar(50),

IN last_updated_on datetime, 

IN random_key varchar(50),

IN PROCESS_INDICATOR int(11),  

OUT data_object_record_id INT(11)

)
BEGIN



INSERT INTO data_object_record_info 

(

`data_object_type_id`,

`values`,

`name`,

`description`,

`created_by`,

`last_updated_by`,

`created_on`,

`last_updated_on`,

`random_key`,

`process_indicator_id` )

VALUES

(

data_object_type_id,

field_values,

name,

description,

created_by,

last_updated_by,

created_on,

last_updated_on,

random_key,

PROCESS_INDICATOR );

                    

SELECT LAST_INSERT_ID() INTO data_object_record_id;  

                  

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveDocument`(

IN APP_ID INT(11),

IN TYPE_ID INT(11),

IN NAME varchar(128),

IN DESCRIPTION varchar(500),

IN PATH varchar(500),

IN STREAM_DATA longblob,

IN CONFIG_JSON longtext,

IN CREATED_BY varchar(128),

IN CREATED_ON datetime,

IN LAST_UPDATED_BY varchar(128),

IN LAST_UPDATED_ON datetime,

OUT LAST_INSERTED_ID INT(11)

)
BEGIN

INSERT INTO document_template_info

(

`app_id`,

`name`,

`description`,

`file_type_id`,

`data`,

`path`,

`config_json`,

`created_by`,

`created_on`,

`last_updated_by`,

`last_updated_on`

)

VALUES

(

APP_ID,

NAME,

DESCRIPTION,

TYPE_ID,

STREAM_DATA,

PATH,

CONFIG_JSON,

CREATED_BY,

CREATED_ON,

LAST_UPDATED_BY,

LAST_UPDATED_ON

);



SELECT LAST_INSERT_ID() INTO LAST_INSERTED_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveField`(

IN service_request_type_id int(11),
 
IN name longtext,

IN display_name longtext,

IN type varchar(50),

IN readonly int(1),

IN `unique` int(1),

IN parent_field_id int(11),

IN cascading_parent_field_id int(11),

IN display_type varchar(50),

IN created_by varchar(50),

IN created_on datetime,

IN last_updated_by varchar(50),

IN last_updated_on datetime,

IN random_key varchar(50),

IN formula_expression varchar(200),

IN formula_result_type varchar(50),

IN relation_id int(11),

IN source_object_type_id int(11),

IN target_object_type_id int(11),

IN is_question bit(1),

IN expected_response longtext,

IN IS_PRIMARY bit(1),

OUT field_id INT(11)

)
BEGIN



IF EXISTS (SELECT 1 FROM field_info fi WHERE fi.name=name and fi.source_object_type_id=source_object_type_id) THEN

SET field_id=0;

ELSE

INSERT INTO field_info

(

service_request_type_id,

name,

display_name,

type,

readonly,

`unique`,

parent_field_id,

cascading_parent_field_id,

display_type,

created_by,

created_on,

last_updated_by,

last_updated_on,

random_key,

formula_expression,

formula_result_type,

relation_id,

source_object_type_id,

target_object_type_id,

is_question,

expected_response,

is_primary_key

)

VALUES

(

service_request_type_id,

name,

display_name,

type,

readonly,

`unique`,

parent_field_id,

cascading_parent_field_id,

display_type,

created_by,

created_on,

last_updated_by,

last_updated_on,

random_key,

formula_expression,

formula_result_type,

relation_id,

source_object_type_id,

target_object_type_id,

is_question,

expected_response,

IS_PRIMARY

);

SELECT LAST_INSERT_ID() INTO field_id;

END IF;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveObjectRelationsJSON`(IN APP_ID int,IN OBJECT_RELATIONS_JSON longtext)
BEGIN

UPDATE app_info ai SET ai.object_relations = OBJECT_RELATIONS_JSON  WHERE ai.app_id = APP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorDeleteQuestionnaireQuestions`(
IN QUESTIONS LONGTEXT,
IN SERVICE_REQUEST_TYPE_ID int(11),
IN IS_QUESTIONNAIRE BOOLEAN,
IN FIELD_TYPE VARCHAR(50),
IN CREATED_BY VARCHAR(50), 
IN CREATED_ON DATETIME,
IN LAST_UPDATED_BY VARCHAR(50), 
IN LAST_UPDATED_ON DATETIME  )
BEGIN

	DECLARE strLen    INT DEFAULT 0;
	DECLARE SubStrLen INT DEFAULT 0;
    DECLARE field_id INT DEFAULT 0;
IF QUESTIONS IS NULL THEN  SET QUESTIONS = '';    END IF;
            
	do_this: 
		LOOP 
            SET strLen = CHAR_LENGTH(QUESTIONS); 

	CASE  
		WHEN IS_QUESTIONNAIRE = true THEN  
        
            IF EXISTS (SELECT 1 FROM field_info fi WHERE fi.name = SUBSTRING_INDEX(QUESTIONS, ',', 1) 
							AND fi.source_object_type_id=SERVICE_REQUEST_TYPE_ID) THEN
				UPDATE  field_info uFI  
				SET    	uFI.is_deleted = 0,
						uFI.last_updated_by = LAST_UPDATED_BY,
						uFI.last_updated_on = LAST_UPDATED_ON
				WHERE   uFI.source_object_type_id =  SERVICE_REQUEST_TYPE_ID 
				AND 	 uFI.name = SUBSTRING_INDEX(QUESTIONS, ',', 1);
			ELSE
            
				INSERT INTO field_info (  
						`service_request_type_id`,
						`source_object_type_id`,
						`name`,
						`display_name`,
						`type`, 
						`created_by`,
						`created_on`,
						`last_updated_by`,
						`last_updated_on`
						)
				VALUES(
						SERVICE_REQUEST_TYPE_ID,
						SERVICE_REQUEST_TYPE_ID ,
						SUBSTRING_INDEX(QUESTIONS, ',', 1),
						SUBSTRING_INDEX(QUESTIONS, ',', 1),
						FIELD_TYPE, 
						CREATED_BY,
						CREATED_ON,
						LAST_UPDATED_BY,
						LAST_UPDATED_ON  
					);
          
            END IF;   
            
		ELSE 
        
			UPDATE  field_info uFI1  
			SET   	uFI1.is_deleted = 1,
					uFI1.last_updated_by = LAST_UPDATED_BY,
					uFI1.last_updated_on = LAST_UPDATED_ON
			WHERE    uFI1.source_object_type_id =  SERVICE_REQUEST_TYPE_ID 
            AND 	 uFI1.name = SUBSTRING_INDEX(QUESTIONS, ',', 1);
            
		END CASE;
	SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(QUESTIONS, ',', 1)) + 2; 
	SET QUESTIONS = MID(QUESTIONS, SubStrLen, strLen); 
            
	IF QUESTIONS = '' THEN  LEAVE do_this;  END IF; 
	END LOOP do_this;            
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorUpdate_Data_MapperInfo`(
SERVICE_REQUEST_TYPE_ID INT(11),
DATAMAPPER_NAME VARCHAR(45),
TYPE_LOOKUP_ID INT, 
CONFIG_JSON LONGTEXT,
PARSED_TEXT LONGTEXT,
STATUS BIT, 
CREATED_BY VARCHAR(50),
CREATED_ON DATETIME, 
UPDATED_BY VARCHAR(50),
UPDATED_ON DATETIME, 
DATA_MAPPER_ID INT(11),
OUT oDATA_MAPPER_ID INT(11)
)
BEGIN
IF EXISTS (SELECT STDM.data_mapper_id FROM servicerequest_type_data_mapper_info STDM WHERE  STDM.data_mapper_id = DATA_MAPPER_ID)

THEN
	UPDATE servicerequest_type_data_mapper_info STDM 
    SET 
			STDM.servicerequest_type_id = SERVICE_REQUEST_TYPE_ID,
            STDM.name = DATAMAPPER_NAME,
            STDM.type_id = TYPE_LOOKUP_ID,
			STDM.config_json = CONFIG_JSON,
            STDM.parsed_text = PARSED_TEXT,
			STDM.status = STATUS,
			STDM.last_updated_by = UPDATED_BY,
			STDM.last_updated_on = UPDATED_ON
	WHERE   STDM.data_mapper_id = DATA_MAPPER_ID;
    SELECT DATA_MAPPER_ID INTO oDATA_MAPPER_ID;

ELSE 

		INSERT INTO  servicerequest_type_data_mapper_info
				(
				servicerequest_type_id,
                name,
				type_id,
				config_json,
                parsed_text,
				status,
				created_by,
				created_on,
				last_updated_by,
				last_updated_on        
				)
			VALUES 
					(
					SERVICE_REQUEST_TYPE_ID,
                    DATAMAPPER_NAME,
					TYPE_LOOKUP_ID,
					CONFIG_JSON,
                    PARSED_TEXT,
					STATUS,
					CREATED_BY,
					CREATED_ON,
					UPDATED_BY,
					UPDATED_ON
					);
                    SELECT LAST_INSERT_ID() INTO oDATA_MAPPER_ID;
END IF;            
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorUpdate_DataSources`(
	IN DATASOURCE_ID  INT , 
    IN DATASOURCE_NAME  VARCHAR(45) ,
	IN SERVER_LOCATION  VARCHAR(255) ,
	IN APP_ID  INT(11)  ,
	IN DATABASE_TYPE_ID  INT  ,
	IN DBSCHEMA  VARCHAR(45)  ,  
	IN USER_NAME VARCHAR(45),
	IN PASSWORD LONGTEXT, 
    IN CONNECTION_STRING LONGTEXT, 
	IN IS_ACTIVE INT,
	IN IS_DELETE INT,
	IN CREATED_BY VARCHAR(255),
	IN CREATED_ON DATETIME,  
	IN LAST_UPDATED_BY VARCHAR(255), 
	IN LAST_UPDATED_ON DATETIME,
    IN QUERY_TYPE INT,
    OUT oDATASOURCE_ID INT(11)
)
BEGIN
	IF QUERY_TYPE = 1 THEN
			INSERT INTO  datasources
				(
					datasource_name,
                    server_location,
					app_id,
					data_base_type_id,
					`schema`,
					username,
                   
                    connection_string,
                    created_by,
					created_on,
					updated_by, 
					updated_on,
                    is_active,
					is_delete
				)
			VALUES 
				(
						DATASOURCE_NAME,
                        SERVER_LOCATION,
						APP_ID,
                        DATABASE_TYPE_ID,
                        DBSCHEMA,
						USER_NAME, 
						 
                        CONNECTION_STRING,
                         CREATED_BY,
						CREATED_ON,                       
						LAST_UPDATED_BY,
						LAST_UPDATED_ON,
                        IS_ACTIVE,
						IS_DELETE
				);
		SELECT LAST_INSERT_ID() INTO oDATASOURCE_ID;
	ELSE
		UPDATE datasources DSST
		SET 
				DSST.datasource_name = DATASOURCE_NAME,  
                DSST.server_location = SERVER_LOCATION,
				DSST.data_base_type_id = DATABASE_TYPE_ID,
				DSST.schema = DBSCHEMA, 
                DSST.username = USER_NAME, 
				DSST.updated_by = LAST_UPDATED_BY,
				DSST.updated_on = LAST_UPDATED_ON
		WHERE   
				DSST.datasource_id = DATASOURCE_ID 
		AND		DSST.app_id = APP_ID ;
        
		SELECT DATASOURCE_ID INTO oDATASOURCE_ID;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorUpdate_SchedulerInfo`(
	IN SCHEDULER_INFO_ID  INT(11)  ,
	IN APP_ID  INT(11)  ,
    IN SCHEDULER_NAME  VARCHAR(45)  ,  
	IN SCHEDULER_DESCRIPTION VARCHAR(128), 
	IN JOB_TYPE_ID  INT(11)  , 
    IN SERVICE_REQUEST_TYPE_ID  INT(11)  , 
	IN CONFIG_JSON LONGTEXT,    
	IN SCHEDULER_TYPE_ID  INT(11)  , 
    IN WEEKDAYS VARCHAR(45),
    IN OCCURANCE_NUMBER INT(11),
    IN REPEAT_AFTER DOUBLE,
	IN REPEAT_AFTER_UNITS VARCHAR(50),
    IN START_TIME TIMESTAMP,
    IN TIME_ZONE VARCHAR(128),
    IN DATA_SOURCE_TYPE_ID INT(11),
	IN CONNECTION_STRING LONGTEXT, 
	IN CREATED_BY VARCHAR(255),
	IN CREATED_ON DATETIME,  
	IN LAST_UPDATED_BY VARCHAR(255), 
	IN LAST_UPDATED_ON DATETIME, 
    OUT oSCHEDULER_INFO_ID INT(11)
)
BEGIN
	IF SCHEDULER_INFO_ID = 0 THEN
			INSERT INTO  schedulers_info
				(
					`name`,
                    `description`,
                    `job_type`,
                    `service_request_type_id`,                    
					`app_id`,
                    `config_json`, 
                    `schedule_type_id`,
                    `weekdays`,
                    `occurance_number`,
                    `repeat_after`,
                    `repeat_after_units`,
                    `start_time`,
                    `time_zone`,
                    `data_source_type_id`,
                    
                    `created_by`,
					`created_on`,
					`last_updated_by`, 
					`last_updated_on`
				)
			VALUES 
				(
					SCHEDULER_NAME,  
					SCHEDULER_DESCRIPTION,
					JOB_TYPE_ID, 
					SERVICE_REQUEST_TYPE_ID, 
                    APP_ID,
					CONFIG_JSON,    
					SCHEDULER_TYPE_ID, 
					WEEKDAYS,
					OCCURANCE_NUMBER,
					REPEAT_AFTER,
                    REPEAT_AFTER_UNITS,
					START_TIME,
                    TIME_ZONE,
                    DATA_SOURCE_TYPE_ID,
				 
					CREATED_BY,
					CREATED_ON,                       
					LAST_UPDATED_BY,
					LAST_UPDATED_ON 
				);
		SELECT LAST_INSERT_ID() INTO oSCHEDULER_INFO_ID;
	ELSE
		UPDATE schedulers_info SI
		SET 
				SI.name = SCHEDULER_NAME,  
                SI.description = SCHEDULER_DESCRIPTION,
				SI.job_type = JOB_TYPE_ID,
				SI.service_request_type_id = SERVICE_REQUEST_TYPE_ID, 
                SI.config_json = CONFIG_JSON,                 
                SI.schedule_type_id = SCHEDULER_TYPE_ID,  
                SI.weekdays = WEEKDAYS,
				SI.occurance_number = OCCURANCE_NUMBER,
				SI.repeat_after = REPEAT_AFTER, 
                SI.repeat_after_units = REPEAT_AFTER_UNITS,                 
				SI.start_time = START_TIME,  
                SI.time_zone = TIME_ZONE,  
                SI.data_source_type_id = DATA_SOURCE_TYPE_ID,
				SI.connection_string = CONNECTION_STRING,  
				SI.last_updated_by = LAST_UPDATED_BY,
				SI.last_updated_on = LAST_UPDATED_ON
		WHERE   
				SI.scheduler_id = SCHEDULER_INFO_ID 
		AND		SI.app_id = APP_ID ;
        
		SELECT SCHEDULER_INFO_ID INTO oSCHEDULER_INFO_ID;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorUpdate_User_Comments`( 
IN SOURCE_ID  INT,

IN SOURCE_TYPE_ID INT, 
 
IN COMMENTS VARCHAR(5000), 

IN CREATED_BY VARCHAR(255),

IN CREATED_ON DATETIME,

IN LAST_UPDATED_BY VARCHAR(255),

IN LAST_UPDATED_ON DATETIME ,

IN COMMENT_ID INT(11),

IN IS_DELETE INT,

OUT oCOMMENT_ID INT(11)
)
BEGIN
	IF EXISTS (SELECT UC.id FROM user_comments UC 
				WHERE  UC.id = COMMENT_ID
				AND   UC.created_by = CREATED_BY
				AND   UC.source_type_id = SOURCE_TYPE_ID   
				AND   UC.source_id = SOURCE_ID)

THEN
	UPDATE user_comments UC
    SET 
			UC.message = COMMENTS, 
			UC.last_updated_by = LAST_UPDATED_BY,
			UC.last_updated_on = LAST_UPDATED_ON
	WHERE   UC.id = COMMENT_ID
		AND 	UC.created_by = CREATED_BY
		AND     UC.source_type_id = SOURCE_TYPE_ID   
		AND     UC.source_id = SOURCE_ID;
        
    SELECT COMMENT_ID INTO COMMENT_ID;

ELSE 

		INSERT INTO  user_comments
				(
					source_id,
					source_type_id,
					message,
					created_by,
					created_on,
					last_updated_by, 
					last_updated_on,
					is_delete
				)
			VALUES 
				(
						SOURCE_ID,
						SOURCE_TYPE_ID,
						COMMENTS, 
						CREATED_BY,
						CREATED_ON,
						LAST_UPDATED_BY,
						LAST_UPDATED_ON,
						IS_DELETE
				);
		SELECT LAST_INSERT_ID() INTO oCOMMENT_ID;
END IF;            
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveORUpdate_User_Preference`(
IN USER_ID  VARCHAR(255),
 
IN SOURCE_TYPE_ID INT, 

IN GRIDVIEW_DISPLAY_TYPE INT(11), 

IN FIELD_ID INT(11),

IN SOURCE_TYPE  VARCHAR(10),

IN  USER_PREFERENCE_ID INT(11)
)
BEGIN

IF EXISTS (  
		SELECT UP.user_preference_id FROM user_preference UP
		WHERE  UP.user_id = USER_ID AND UP.source_type_id = SOURCE_TYPE_ID 
		AND    UP.source_type = SOURCE_TYPE 
        )

THEN

	UPDATE 
			user_preference UP 
	set 	UP.grid_view_display_type = GRIDVIEW_DISPLAY_TYPE ,
			UP.field_id = FIELD_ID ,
            UP.source_type=SOURCE_TYPE
    
	WHERE   UP.user_id = USER_ID 
	AND 	UP.source_type_id = SOURCE_TYPE_ID  
	AND     UP.source_type = SOURCE_TYPE ;

ELSE

INSERT INTO 
		user_preference
		(
		user_id, 
		source_type_id,
		grid_view_display_type,
        field_id,
        source_type
		)
    VALUES
		(
		USER_ID,
		SOURCE_TYPE_ID,
		GRIDVIEW_DISPLAY_TYPE,
        FIELD_ID,
        SOURCE_TYPE
		);

END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveOrUpdateApplicationAuthToken`(
IN AUTH_ID INT(11),

IN APPLICATION_NAME varchar(125),

IN AUTH_KEY longtext,

IN EXPIRES_ON datetime, 

IN CREATED_BY varchar(128),

IN CREATED_ON datetime,

IN IS_ACTIVE bit(1),

IN APP_ID int(11),

IN SERVICE_TYPE_ID int(11),

IN DATA_MAPPER_ID int(11),

IN ALLOWED_HOSTS longtext,

OUT LAST_INSERTED_ID INT(11))
BEGIN

IF EXISTS (SELECT AAK.auth_id FROM application_auth_keys AAK WHERE  AAK.auth_id = AUTH_ID)

THEN
	UPDATE application_auth_keys AAK 
    SET 
			AAK.application_name = APPLICATION_NAME,
			AAK.auth_key = AUTH_KEY,
            AAK.is_active = IS_ACTIVE,          
            AAK.data_mapper_id = DATA_MAPPER_ID,
            AAK.allowed_hosts = ALLOWED_HOSTS            
	WHERE   AAK.auth_id = AUTH_ID;
SELECT AUTH_ID INTO LAST_INSERTED_ID;

ELSE

INSERT INTO application_auth_keys	(
								application_name,

                                auth_key,

                                expires_on,                                                             

                                created_on,
                                
								created_by, 

                                is_active,
                                
								app_id,
                                
                                service_type_id,
                                
                                data_mapper_id,
                                
                                allowed_hosts                                
                                
                    )

					VALUES
                    (
								APPLICATION_NAME,

								AUTH_KEY,

								EXPIRES_ON,

								CREATED_ON , 
                                
								CREATED_BY ,

								IS_ACTIVE,

								APP_ID,
                                
                                SERVICE_TYPE_ID,
                                
                                DATA_MAPPER_ID,
                                
                                ALLOWED_HOSTS
                    );
                    

SELECT LAST_INSERT_ID() INTO LAST_INSERTED_ID;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveOrUpdateJobExecutionInfo`(
IN SCHEDULER_ID INT(11),
IN EXECUTION_TIME TIMESTAMP,
IN EXECUTION_STATUS INT 
)
BEGIN
	IF EXISTS (SELECT JEI.scheduler_id FROM job_execution_info JEI WHERE  JEI.scheduler_id = SCHEDULER_ID)
	THEN
		UPDATE job_execution_info JEI
		SET 
				JEI.scheduler_id = SCHEDULER_ID,
				JEI.execution_timestamp = EXECUTION_TIME,
				JEI.status = EXECUTION_STATUS			
		WHERE   STDM.data_mapper_id = DATA_MAPPER_ID; 

	ELSE 

			INSERT INTO  job_execution_info
					(
					scheduler_id,
					execution_timestamp,
					status 
					)
				VALUES 
						(
						SCHEDULER_ID,
						EXECUTION_TIME,
						EXECUTION_STATUS 
						);
					 
	END IF;     
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorUpdateTag`(
IN BACKGROUND_COLOR VARCHAR(45),
IN TAG_NAME VARCHAR(45),
IN APP_ID INT(11),
IN TAG_ID INT(11),
IN CREATED_BY VARCHAR(50),
IN CREATED_ON DATETIME,
IN LAST_UPDATED_BY VARCHAR(50),
IN LAST_UPDATED_ON DATETIME,
OUT oTAG_ID INT(11)

 )
BEGIN

IF EXISTS (SELECT TI.tag_id FROM tag_info TI WHERE  TI.tag_id = TAG_ID)

THEN

UPDATE  tag_info TI 

				SET

					TI.name = TAG_NAME,
                    TI.background_color = BACKGROUND_COLOR,
                    TI.created_by = CREATED_BY,
                    TI.created_on = CREATED_ON,
                    TI.last_updated_by = last_updated_by,
                    TI.last_updated_on = LAST_UPDATED_ON
                    
				WHERE TI.tag_id = TAG_ID AND TI.app_id = APP_ID ;   
                
SELECT TAG_ID INTO oTAG_ID; 
                
ELSE 

INSERT INTO tag_info
				(
					background_color,
					name,
                    app_id,
                    created_by,
                    created_on,
                    last_updated_by,
                    last_updated_on
                ) 
                values
                (
					BACKGROUND_COLOR,
					TAG_NAME,
                    APP_ID,
					CREATED_BY,
                    CREATED_ON,
                    LAST_UPDATED_BY,
                    LAST_UPDATED_ON
                );
                
 SELECT LAST_INSERT_ID() INTO oTAG_ID; 
END IF;    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveORUpdateUserTheme`(IN USER_ID VARCHAR(255),IN THEME_CONFIG LONGTEXT)
BEGIN

if exists (select UTC.user_id from user_theme_config_info UTC where UTC.user_id = USER_ID)

Then

update user_theme_config_info UTC set UTC.theme_config = THEME_CONFIG where UTC.user_id=USER_ID;

else

insert into user_theme_config_info(user_id, theme_config) values (USER_ID,THEME_CONFIG);

END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveorUpdateWatchList`(
IN WATCH_LIST_ID INT(11),
IN WATCH_NAME VARCHAR(45),
IN CSS_CLASS_NAME VARCHAR(45), 
IN SOURCE_OBJECT_TYPE_ID INT, 
IN IS_ACTIVE BIT,
IN IS_DELETE BIT, 
IN CREATED_BY VARCHAR(50),
IN CREATED_ON DATETIME, 
IN LAST_UPDATED_BY VARCHAR(50),
IN LAST_UPDATED_ON DATETIME,  
OUT oWATCH_LIST_ID INT(11)
)
BEGIN

IF EXISTS (SELECT WLI.watch_list_id FROM watch_list_info WLI WHERE  WLI.watch_list_id = WATCH_LIST_ID)
THEN
	UPDATE watch_list_info WLI 
    SET 
			WLI.name = WATCH_NAME,
            WLI.css_class_name = CSS_CLASS_NAME,
            WLI.source_object_type_id = SOURCE_OBJECT_TYPE_ID,
			WLI.is_active = IS_ACTIVE,
			WLI.is_delete = IS_DELETE,
			WLI.last_updated_by = LAST_UPDATED_BY,
			WLI.last_updated_on = LAST_UPDATED_ON
	WHERE   WLI.watch_list_id = WATCH_LIST_ID;
    SELECT WATCH_LIST_ID INTO oWATCH_LIST_ID;

ELSE 

		INSERT INTO  watch_list_info
				( 
                name,
                css_class_name,
				source_object_type_id,
				is_active,
				is_delete,
				created_by,
				created_on,
				last_updated_by,
				last_updated_on        
				)
			VALUES 
					(
					WATCH_NAME,
                    CSS_CLASS_NAME,
					SOURCE_OBJECT_TYPE_ID,
					IS_ACTIVE,
					IS_DELETE,
					CREATED_BY,
					CREATED_ON,
					LAST_UPDATED_BY,
					LAST_UPDATED_ON
					);
         SELECT LAST_INSERT_ID() INTO oWATCH_LIST_ID;
         
	IF oWATCH_LIST_ID <> 0 THEN
        INSERT INTO  user_watch_list_xref
				( 
					user_id,
					watch_list_id 
				)
		VALUES 
				(
					CREATED_BY ,
					oWATCH_LIST_ID					
				);
     END IF;
END IF;  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveReassignUser`(

IN workflow_step_stage_id int(11),

IN role_id varchar(50),

IN user_id varchar(50),

IN last_updated_by varchar(50),

IN last_updated_on datetime 

)
BEGIN

UPDATE workflow_step_stage_info WFSSI

SET

		WFSSI.role_id='',

        WFSSI.user_id=user_id,

        WFSSI.last_updated_by=last_updated_by,

        WFSSI.last_updated_on=last_updated_on

WHERE   

		WFSSI.workflow_step_stage_id=workflow_step_stage_id 

        and 

        WFSSI.role_id=role_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveReport`(
IN Name VARCHAR(100),
IN Description VARCHAR(100),
IN Report_Type_Id INT(11), 
IN Config_Json LONGTEXT, 
IN Created_By VARCHAR(128),
IN Created_On DATETIME,
IN Updated_By VARCHAR(128),
IN Updated_On DATETIME,
IN Data_Source_Id INT(11), 
IN Query_String LONGTEXT,
OUT ReportID INT(11),
IN IS_ACTIVE BIT(1))
BEGIN
INSERT INTO `report_info`
(`name`,
`description`,
`report_type_id`,
`config_json`,
`query_string`,
`datasource_id`,
`created_by`,
`created_on`,
`last_updated_by`,
`last_updated_on`,
`is_active`)
VALUES
(Name,
Description,
Report_Type_Id,
Config_Json,
Query_String,
Data_Source_Id,
Created_By,
Created_On,
Updated_By,
Updated_On,
IS_ACTIVE);

SELECT LAST_INSERT_ID() INTO ReportID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `SaveReportPreset`(
IN APP_ID INT(11),
IN REPORT_ID INT(11), 
IN PRESET_NAME VARCHAR(100),
IN QUERY_STRING LONGTEXT, 
IN IS_ACTIVE BIT(1),
IN IS_DEFAULT BIT(1),
IN CREATED_BY VARCHAR(128),
IN Created_On DATETIME,
IN UPDATED_BY VARCHAR(128),
IN UPDATED_ON DATETIME,
OUT PRESET_ID INT(11))
BEGIN

IF NOT EXISTS (SELECT 1 FROM report_presets_xref rpx WHERE LOWER(rpx.name) = LOWER(PRESET_NAME) AND rpx.report_id = REPORT_ID)
THEN

IF(IS_DEFAULT = 1)
THEN
SET SQL_SAFE_UPDATES=0;
UPDATE `report_presets_xref` rpx
SET rpx.is_default = 0 WHERE rpx.report_id = REPORT_ID;
SET SQL_SAFE_UPDATES=1;
END IF;

INSERT INTO `report_presets_xref`
(`name`,
`report_id`,
`query_string`,
`is_default`,
`is_active`,
`created_by`,
`created_on`,
`last_updated_by`,
`last_updated_on`)
VALUES
(PRESET_NAME,
Report_Id,
QUERY_STRING,
IS_DEFAULT,
IS_ACTIVE,
CREATED_BY,
Created_On,
UPDATED_BY,
UPDATED_ON);

SELECT LAST_INSERT_ID() INTO PRESET_ID; 
ELSE
SET PRESET_ID = 0;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveReportType`(
IN Name varchar(100),

IN Description varchar(100),

IN DataObjectTypeID INT(11), 

IN APP_ID int(11),

IN createdBy varchar(128),

IN createdOn datetime,

IN lastUpdatedBy varchar(128),

IN lastUpdatedOn datetime,

OUT ReportTypeID INT(11)
)
BEGIN
	INSERT INTO report_types

					(

								name,

                                description,

                                data_object_type_id,

                                app_id,                                

                                created_by,

                                last_updated_by,

                                created_on,

                                last_updated_on 

                    )

					VALUES

                    (

								Name,

								Description,

								DataObjectTypeID,

								APP_ID , 
                                
								createdBy ,

								lastUpdatedBy,

								createdOn ,					

								lastUpdatedOn 
                    );

                    

SELECT LAST_INSERT_ID() INTO ReportTypeID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveServiceExportListFormat`(

IN ServiceRequestTypeID int(11), 

IN ListName varchar(50),

IN Fields VARCHAR(500),

IN Status VARCHAR(1),

IN created_by varchar(50),

IN created_on datetime,

IN last_updated_by varchar(50),

IN last_updated_on datetime, 

OUT list_id INT(11))
BEGIN

INSERT INTO service_export_list_format 

(

	`service_type_id`,

	`list_name`,

	`fields`,

	`status`,

	`created_by`,

	`created_on`,

	`last_updated_by`,

	`last_updated_on`

)

VALUES

(

	ServiceRequestTypeID,

	ListName,

	Fields,

	Status,

	created_by,

	created_on,

	last_updated_by,

	last_updated_on

);

                    

SELECT LAST_INSERT_ID() INTO list_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveServiceRequestLifeCycleWorkflow`(

	IN SERVICEREQUEST_TYPE_ID INT(11),

    IN LIFECYCLE_EVENT_TYPE_ID INT(11), 

	IN WORKFLOW_ID INT(11),  

	IN CREATED_BY varchar(128),

	IN CREATED_ON datetime,

	IN LAST_UPDATED_BY varchar(128),

	IN LAST_UPDATED_ON datetime

)
BEGIN



	IF EXISTS(select * from `servicerequest_lifecycle_workflows_xref` SLWX where SLWX.servicerequest_type_id=SERVICEREQUEST_TYPE_ID and SLWX.lifecycle_event_type_id=LIFECYCLE_EVENT_TYPE_ID and SLWX.workflow_id=WORKFLOW_ID) THEN

		UPDATE 

				`servicerequest_lifecycle_workflows_xref` SRLWX

			SET 

				SRLWX.`servicerequest_type_id`= SERVICEREQUEST_TYPE_ID,

				SRLWX.`lifecycle_event_type_id`= LIFECYCLE_EVENT_TYPE_ID,

				SRLWX.`workflow_id`= WORKFLOW_ID, 

				SRLWX.`updated_by`= LAST_UPDATED_BY,

				SRLWX.`updated_on`= LAST_UPDATED_ON

			WHERE 

				SRLWX.`servicerequest_type_id`= SERVICEREQUEST_TYPE_ID AND

				SRLWX.`lifecycle_event_type_id`= LIFECYCLE_EVENT_TYPE_ID AND

				SRLWX.`workflow_id`= WORKFLOW_ID;

    ELSE 

		INSERT INTO servicerequest_lifecycle_workflows_xref 

			(

				`servicerequest_type_id`,

				`lifecycle_event_type_id`,

				`workflow_id`,

				`created_by`,

				`created_on`, 

				`last_updated_by`,

				`last_updated_on`

			)

			VALUES

			(

				SERVICEREQUEST_TYPE_ID,

				LIFECYCLE_EVENT_TYPE_ID,

				WORKFLOW_ID, 

				CREATED_BY,

				CREATED_ON,

				LAST_UPDATED_BY,

				LAST_UPDATED_ON

			);

	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveStep`(
 IN STEP_NAME VARCHAR(50),
IN SHORT_DESC VARCHAR(100),
IN STEP_DESCRIPTION VARCHAR(5000),
IN IMPLEMENTOR_CLASS VARCHAR(500),
IN NAMESPACE VARCHAR(200),
IN CUSTOM_PAGE_URL VARCHAR(45),
IN IS_AUTO BIT(1),
IN IS_GLOBAL BIT(1),
IN IS_DYNAMIC_VIEW BIT(1),
IN SERVICE_TYPE_ID INT,
IN CREATED_BY VARCHAR(50),
IN CREATED_ON DATETIME,
IN LAST_UPDATED_ON DATETIME,
IN LAST_UPDATED_BY VARCHAR(50),
IN IS_ACTIVE BIT(1),
IN IS_CUSTOM BIT(1),
IN SHOW_DOCUMENTS_LIST BIT(1),
IN SHOW_CONTACTS_LIST BIT(1),
IN SLA INT,
IN SLA_UNIT CHAR(1),
IN CSS_CLASS_NAME VARCHAR(50),
IN SHORT_NAME VARCHAR(15),
IN IS_DISABLE_SLA BIT(1),
IN LAYOUT_CONFIG LONGTEXT,
IN INSTRUCTIONS LONGTEXT,
IN STEP_CATEGORY_ID INT,
IN IS_QUESTIONNAIRE BIT(1),
IN IS_QUIZ BIT(1),
OUT STEP_ID INT

)
BEGIN
INSERT INTO  `step_info`
(`name`,
`short_description`,
`long_description`,
`implentor_class`,
`namespace`,
`page_url`,
`step_type`,
`is_global`,
`is_dynamic_view`,
`service_request_type_id`,
`created_by`,
`created_on`,
`last_updated_on`,
`last_updated_by`,
`is_active`,
`is_custom`,
`show_document`,
`show_contact`,
`sla`,
`sla_unit`,
`css_class_name`,
`short_name`,
`is_disable_sla`,
`layout_config`,
`instructions`,
`step_category_id`,
`is_questionnaire`,
`is_quiz`
)
VALUES 
(STEP_NAME,
SHORT_DESC,
STEP_DESCRIPTION,
IMPLEMENTOR_CLASS,
NAMESPACE,
CUSTOM_PAGE_URL,
IS_AUTO,
IS_GLOBAL,
IS_DYNAMIC_VIEW,
SERVICE_TYPE_ID,
CREATED_BY,
CREATED_ON,
LAST_UPDATED_ON,
LAST_UPDATED_BY,
IS_ACTIVE,
IS_CUSTOM,
SHOW_DOCUMENTS_LIST,
SHOW_CONTACTS_LIST,
SLA,
SLA_UNIT,
CSS_CLASS_NAME,
SHORT_NAME,
IS_DISABLE_SLA,
LAYOUT_CONFIG,
INSTRUCTIONS,
STEP_CATEGORY_ID,
IS_QUESTIONNAIRE,
IS_QUIZ
);

SELECT LAST_INSERT_ID() INTO STEP_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveUserGroup`(

IN userGroupTitle varchar(50),

IN userGroupDescription varchar(50),

IN userGroupImage varchar(255),

IN userGroupStatus bit(1),

IN userGroupDeleteStatus bit(1),

IN createdBy varchar(255),

IN lastUpdatedBy varchar(255),

IN createdOn datetime,

IN lastUpdatedOn datetime,

IN appId int(11),

OUT userGroupId varchar(255)

)
BEGIN

SELECT UUID() INTO userGroupId; 



INSERT INTO user_group_info

					(

							user_group_id,

                            name, 

                            description, 

                            image, 

                            status, 

                            is_deleted, 

                            created_by, 

                            last_updated_by, 

                            created_on, 

                            last_updated_on,
                            
							app_id
                    )

					VALUES

                    (

								userGroupId,

								userGroupTitle,

								userGroupDescription,

								userGroupImage,

								userGroupStatus,

								userGroupDeleteStatus ,

								createdBy ,

                                lastUpdatedBy,

                                createdOn,

                                lastUpdatedOn,
                                
                                appId

                    );

                    



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SaveViewTypeConfiguration`(

IN SERVICE_TYPE_ID INT(11),

IN VIEW_TYPE_ID INT(11),

IN CONFIG_JSON longtext,

IN USER_ID_VAL varchar(255)

)
BEGIN

DECLARE USERVALUE varchar(255) DEFAULT NULL;

START TRANSACTION;

CASE

WHEN USER_ID_VAL IS NULL

THEN

DELETE FROM service_type_view_xref

WHERE

service_request_type_id = SERVICE_TYPE_ID

AND view_type_id = VIEW_TYPE_ID

AND user_id IS NULL;

COMMIT;

ELSE

SET USERVALUE = USER_ID_VAL;

DELETE FROM service_type_view_xref

WHERE

service_request_type_id = SERVICE_TYPE_ID

AND view_type_id = VIEW_TYPE_ID

AND user_id = USER_ID_VAL;

COMMIT;

END CASE;



INSERT INTO service_type_view_xref (

service_request_type_id,

view_type_id,

user_id,

config_json)

VALUES(

SERVICE_TYPE_ID,

VIEW_TYPE_ID,

USERVALUE,

CONFIG_JSON);







END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SearchBeneficiary`(

IN SEARCH_TEXT varchar(50),

IN _PageIndex INT,

IN _PageSize INT,

IN SortBy varchar(150),

IN SortOrder varchar(5),

OUT _RecordCount INT

)
BEGIN



IF SortBy = '' THEN SET SortBy = 'FirstName'; END IF;

IF SortOrder = '' THEN SET SortOrder = 'ASC'; END IF;

SET @RowNumber:=0;



CREATE TEMPORARY TABLE Results

SELECT @RowNumber:=@RowNumber+1 AS RowNumber,

bi.`benificiary_id` BenificiaryId,

bi.`benificiary_type` BenificiaryType,

bi.`first_name` FirstName,

bi.`last_name` LastName,

bi.`middile_initial` MiddleInitial,

bi.`address_line_1` AddressLine1,

bi.`address_line_2` AddressLine2,

bi.`city` City,

bi.`state` State,

bi.`country_code` CountryCode,

bi.`zipcode` ZipCode,

bi.`phone_number` PhoneNumber,

bi.`fax_number` FaxNumber,

bi.`email` Email,

bi.`date_of_birth` DateOfBirth,

bi.`gender` Gender,

bi.`additional_fields` AdditionalFields,

bi.`org_title` OrgTitle,

bi.`created_by` CreatedBy,

concat(c.FirstName,' ', c.LastName) CreatedByName,

concat(l.FirstName,' ', l.LastName) LastUpdatedByName,

bi.`last_updated_by` LastUpdatedBy,

bi.`created_on` CreatedOn,

bi.`last_updated_on` LastUpdatedOn,

bi.`is_deleted` IsDeleted

FROM

benificiary_info bi,

aspnetusers c,

aspnetusers l

WHERE

bi.first_name LIKE CONCAT('%', SEARCH_TEXT , '%') or

bi.last_name LIKE CONCAT('%', SEARCH_TEXT , '%') or

bi.email LIKE CONCAT('%', SEARCH_TEXT , '%')



group by

bi.benificiary_id;





SET _RecordCount =(SELECT COUNT(*) FROM Results);







CASE WHEN

_PageSize <> -1 THEN

SET @t1 =CONCAT("SELECT * FROM Results

WHERE RowNumber BETWEEN ",_PageIndex + 1," AND ",_PageSize," ORDER BY ",SortBy," ",SortOrder);

PREPARE stmt FROM @t1;

EXECUTE stmt;

DEALLOCATE PREPARE stmt;



WHEN

_PageSize = -1

THEN

SET @t1 =CONCAT("SELECT * FROM Results"," ORDER BY ",SortBy," ",SortOrder);

SELECT @t1;

PREPARE stmt FROM @t1;

EXECUTE stmt;

DEALLOCATE PREPARE stmt;



END CASE;

DROP TEMPORARY TABLE Results;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SearchDataRecordsByFieldId`(

IN OBJECT_TYPE_ID INT,

IN FIELD_ID INT,

IN SEARCH_TEXT VARCHAR(50),

IN FIELD_ID_1 INT,

IN SEARCH_TEXT_1 VARCHAR(50)

)
BEGIN

	

  #  SELECT * FROM data_object_record_info dori

# where dori.values like '%asdf%';



SELECT 

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    

	dori.name 'Name',

	dori.description 'Description',

	dotl.object_prefix 'Prefix',

	dori.image_url 'ImageUrl', 

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',
    
	dori.created_on 'CreatedOn',

    dori.last_updated_on 'LastUpdatedOn',
    
    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori
    
	JOIN

	data_object_type_lookup dotl ON (dotl.data_object_type_id = dori.data_object_type_id)
    
    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id = OBJECT_TYPE_ID 

    AND dori.is_deleted =0

    AND dori.process_indicator_id =0  

    AND (

    CASE 

		WHEN FIELD_ID = -1 THEN dori.name LIKE CONCAT('%',SEARCH_TEXT, '%') 

		WHEN FIELD_ID = -0 THEN dori.description LIKE CONCAT('%',SEARCH_TEXT, '%') 

		WHEN FIELD_ID_1 <> -1 THEN (dori.values LIKE CONCAT('%','"',FIELD_ID,'":',SEARCH_TEXT, '%') OR  dori.values LIKE CONCAT('%','"',FIELD_ID,'":"',SEARCH_TEXT, '%') 
        OR  dori.values LIKE CONCAT('%','"',FIELD_ID_1,'":"',SEARCH_TEXT_1, '%') OR  dori.values LIKE CONCAT('%','"',FIELD_ID_1,'":"',SEARCH_TEXT_1, '%'))
        
        ELSE  

			(dori.values LIKE CONCAT('%','"',FIELD_ID,'":',SEARCH_TEXT, '%') OR  dori.values LIKE CONCAT('%','"',FIELD_ID,'":"',SEARCH_TEXT, '%'))

	END );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SearchDataRecordsByObjectTypeId`(

IN OBJECT_TYPE_ID INT,

IN FIELD_ID INT,

IN SEARCH_TEXT VARCHAR(50)

)
BEGIN

	

  #  SELECT * FROM data_object_record_info dori

# where dori.values like '%asdf%';



SELECT 

    dori.data_object_record_id 'DataRecordId',

    dori.data_object_type_id 'DataObjectTypeId',

    dori.assigned_to 'AssignedTo',

    dori.is_active 'IsActive',

    dori.`values` `Values`,

    dori.created_by 'CreatedBy',

    dori.last_updated_by 'LastUpdatedBy',

    CONCAT(cu.FirstName, cu.LastName) 'CreatedByName',

    CONCAT(lu.FirstName, lu.LastName) 'LastUpdatedByName'

FROM

    data_object_record_info dori

    LEFT JOIN aspnetusers cu ON (cu.Id = dori.created_by)

    LEFT JOIN aspnetusers lu ON (lu.Id = dori.last_updated_by)

WHERE

    dori.data_object_type_id = OBJECT_TYPE_ID 

    AND (dori.values LIKE CONCAT('%','"',FIELD_ID,'":',SEARCH_TEXT, '%') OR 

        dori.values LIKE CONCAT('%','"',FIELD_ID,'":"',SEARCH_TEXT, '"%'));

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SearchField`(
IN SEARCH_TEXT varchar(50),
IN SOURCE_TYPE_ID INT)
BEGIN


SET @RELATIONFIELDS =(select GROUP_CONCAT(f.target_object_type_id) from field_info f where f.source_object_type_id =SOURCE_TYPE_ID and f.target_object_type_id  is not null);
SELECT 

    fi.field_id FieldId,

    fi.service_request_type_id ServiceRequestTypeId,

    fi.name FieldName,

    fi.type FieldType,

    fi.display_name DisplayName,

    fi.readonly Readonly,

    fi.`unique` `Unique`,

    COALESCE(fi.parent_field_id, 0) ParentFieldId,

    flvx.lookup_value_id `LookupId`,

    lvi.name AS `LookupName`,

    lvi.is_global AS `IsGlobal`,

    flvx.is_multi AS `IsMulti`,

    lvi.values AS `Values`,

    COALESCE(fi.relation_id, 0) 'RelationId',

    COALESCE(fi.source_object_type_id, -1) 'SourceObjectTypeId',

    COALESCE(fi.target_object_type_id, -1) 'TargetObjectTypeId',

    dorl.relation_type 'RelationType'

FROM

    field_info fi
WHERE
fi.source_object_type_id in (SOURCE_TYPE_ID,@RELATIONFIELDS) and
fi.name LIKE CONCAT('%', SEARCH_TEXT , '%');    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SetAsDefaultWorkflow`(IN SERVICE_TYPE_ID int(11),IN WORKFLOW_ID int(11))
BEGIN

UPDATE workflow_info WI 
SET 
    WI.is_default = b'0'
WHERE
    WI.service_request_type_id = SERVICE_TYPE_ID;
        
UPDATE workflow_info WI 
SET 
    WI.is_default = b'1'
WHERE
    WI.service_request_type_id = SERVICE_TYPE_ID
        AND WI.workflow_id = WORKFLOW_ID; 
        
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `SuspendAccount`(

IN accountId INT(11),

IN accountStatus bit(1),

IN comments varchar(200),

IN ResumeOn datetime,

IN createdBy varchar(128),

IN createdOn datetime,

IN lastUpdatedBy varchar(128),

IN lastUpdatedOn datetime

)
BEGIN

	UPDATE 

			`accounts_info` 

    SET 

			`is_suspended`= accountStatus ,

            `last_updated_by`=lastUpdatedBy,

            `last_updated_on`=lastUpdatedOn

    WHERE 

			`accounts_id`= accountId;

    

	IF EXISTS(select * from `accounts_status` where `account_id`= accountId) THEN

		UPDATE 

			`accounts_status` 

		SET 

			`status`= accountStatus,

            `comments`=comments,

			`resume_on`=ResumeOn, 

            `updated_by`=lastUpdatedBy,

            `updated_on`=lastUpdatedOn

		WHERE 

			`account_id`= accountId;

    ELSE 

        INSERT INTO `accounts_status`

                                (

									`account_id`,

									`status`,

									`comments`,

									`resume_on`,                                

									`created_by`, 

									`created_on` 

								) 

                                VALUES

                                (

									accountId,

									accountStatus,

                                    comments,

                                    ResumeOn,

									createdBy,

									createdOn

								);

    END IF;

    

    

    

    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_App_Details`(
    IN APP_ID int,

	IN APP_NAME varchar(100),

	IN DESCRIPTION varchar(100),
    
    IN CATEGORY_ID int(11)
    
)
BEGIN
  
   UPDATE APP_INFO  AI, APP_CATEGORIES_XREF ACX 
 
   SET 
  
   AI.name=APP_NAME, AI.DESCRIPTION=DESCRIPTION, ACX.CATEGORY_ID=CATEGORY_ID
  
   WHERE AI.APP_ID = APP_ID AND ACX.APP_ID = APP_ID;  
   
   
   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Update_Batch`(
IN BATCH_ID INT(11),
IN RECORDS_COUNT INT(11),
IN PARSE_ERRORS LONGTEXT,
IN UPDATED_BY VARCHAR(128),
IN UPDATED_ON DATETIME
)
BEGIN

	UPDATE 
			batch_info BI
	SET		
			BI.no_of_records = RECORDS_COUNT,
			BI.errors=PARSE_ERRORS,
            BI.last_updated_by = UPDATED_BY,
            BI.last_updated_on = UPDATED_ON
	WHERE
			BI.batch_id = BATCH_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_DataObjectType`(

	IN labelname varchar(50),

	IN displayName varchar(5000),

	IN pluralLabel varchar(50),

    IN description varchar(5000),

	IN cssClassName varchar(50),

    IN appId int(11),

    IN isEditable int(1),

	IN isActive int(1),

    IN created_on datetime,

	IN created_by varchar(50),

	IN last_updated_on datetime, 

	IN last_updated_by varchar(50),

    IN dataObjectTypeId INT(11),

	OUT outDataObjectTypeId INT(11)

    )
BEGIN

	IF EXISTS (SELECT 1 FROM data_object_type_lookup DOTL WHERE data_object_type_id != dataObjectTypeId and (DOTL.name=labelname || DOTL.plural_label=pluralLabel) and app_id=appId) THEN 

		SET outDataObjectTypeId=0;

	ELSE

    UPDATE data_object_type_lookup

					SET 

						name = labelname,

						display_name = displayName,

						plural_label =pluralLabel ,

						description = description,

						css_class_name =cssClassName ,

						app_id = appId,

						is_editable =isEditable ,

						is_active = isActive,

						created_on = created_on,

						last_updated_on =last_updated_on ,

						created_by =created_by ,

						last_updated_by =last_updated_by

					WHERE

						app_id = appId

					AND

						data_object_type_id = dataObjectTypeId;

			set outDataObjectTypeId = dataObjectTypeId;

    END IF;	

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_JobInfo`(
IN SCHEDULER_ID INT(11),
IN LAST_RUN_TIME DATETIME,
IN LAST_RUN_RESULTS LONGTEXT,
IN JOB_STATUS INT(1),
IN IS_PROCESS INT(1) 
)
BEGIN

IF EXISTS (SELECT iJEI.scheduler_id FROM job_execution_info iJEI WHERE  iJEI.scheduler_id = SCHEDULER_ID)
THEN	
	UPDATE  job_execution_info JEI
    SET
			JEI.last_run_time = LAST_RUN_TIME,
            JEI.last_run_results = LAST_RUN_RESULTS,
            JEI.status = JOB_STATUS,
            JEI.is_process = IS_PROCESS
	WHERE 
			JEI.scheduler_id = SCHEDULER_ID;
ELSE
	INSERT INTO  job_execution_info
				(
					`scheduler_id`,
                    `execution_timestamp`,
					`last_run_time`,
                    `last_run_results`,
                    `status`,
                    `is_process` 
				)
			VALUES 
				(
					SCHEDULER_ID,  
                    LAST_RUN_TIME,
					LAST_RUN_TIME,
					LAST_RUN_RESULTS, 
					JOB_STATUS, 
                    IS_PROCESS 
				);
END IF;  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_NotificationStatus`(

IN NOTIFICATION_ID INT(11), 

IN SOURCE_ID INT(11), 

IN SOURCE_TYPE_ID INT(11), 

IN NOTIFICATION_STATUS INT(1),

IN NOTIFICATION_UNREAD_STATUS INT(1),

IN LAST_UPDATED_BY varchar(50),

IN LAST_UPDATED_ON datetime

)
BEGIN

	UPDATE notification_info NI

    SET NI.unread = NOTIFICATION_UNREAD_STATUS,

		NI.status = NOTIFICATION_STATUS,

		NI.last_updated_by=LAST_UPDATED_BY,

        NI.last_updated_on=LAST_UPDATED_ON

    WHERE 

		CASE WHEN NOTIFICATION_ID = 0 THEN

			NI.source_id=SOURCE_ID AND NI.source_type_id=SOURCE_TYPE_ID

        ELSE

			NI.notification_id = NOTIFICATION_ID

        END;   

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_ObjectData`(
IN OLD_DATA_OBJECT_RECORD_ID INT,
IN NEW_DATA_OBJECT_RECORD_ID INT,
IN FIELD_VALUES LONGTEXT,
IN ACTION_TYPE_ID INT,
IN lastUpdatedBy varchar(255), 
IN lastUpdatedOn datetime 
)
BEGIN
	
	IF OLD_DATA_OBJECT_RECORD_ID <> -1  THEN  
    
		SET @OLD_DATA_OBJECT_VALUES=-1;
        SET @OLD_DATA_OBJECT_NAME=-1;
        SET @OLD_DATA_OBJECT_DESCRIPTION=-1;
		SET @PARENT_CHILD_IDS=-1;
		SET @TARGET_OBJECT_TYPE_ID=-1;
		SET @SOURCE_OBJECT_TYPE_ID=-1;
		 
		SELECT 
				DORI.values,
                DORI.name,
				DORI.description 
		INTO 
                @OLD_DATA_OBJECT_VALUES,
                @OLD_DATA_OBJECT_NAME,
                @OLD_DATA_OBJECT_DESCRIPTION
                
		FROM 	data_object_record_info DORI 
		WHERE 	DORI.data_object_record_id=NEW_DATA_OBJECT_RECORD_ID;
		
		SELECT 
				DORI1.data_object_type_id 
		INTO 
                @SOURCE_OBJECT_TYPE_ID 
		FROM 	data_object_record_info DORI1 
		WHERE 	DORI1.data_object_record_id=OLD_DATA_OBJECT_RECORD_ID; 
	 
		SELECT 
				GROUP_CONCAT(DORL.target_object_id) INTO @TARGET_OBJECT_TYPE_ID
		FROM  	data_object_relation_lookup DORL
		WHERE 	DORL.source_object_id = @SOURCE_OBJECT_TYPE_ID ;
		
		SELECT 
				GROUP_CONCAT(DORI2.data_object_record_id) INTO @PARENT_CHILD_IDS 
		FROM 	data_object_record_info DORI2
		WHERE 	FIND_IN_SET(DORI2.data_object_type_id, @TARGET_OBJECT_TYPE_ID) 
		AND 	(	DORI2.`values` LIKE CONCAT('%','_',@SOURCE_OBJECT_TYPE_ID,'_r":',OLD_DATA_OBJECT_RECORD_ID, '%')
					OR
					DORI2.`values` LIKE CONCAT('%','_',@SOURCE_OBJECT_TYPE_ID,'_r":','"',OLD_DATA_OBJECT_RECORD_ID,'"', '%')
                );
        
        CASE  
		WHEN ACTION_TYPE_ID = 1 THEN   -- 1 Means Update 
       
			IF @OLD_DATA_OBJECT_VALUES <> -1 THEN
			
				UPDATE 
						data_object_record_info UDORI 
				SET 	UDORI.values= FIELD_VALUES, 
						UDORI.name= @OLD_DATA_OBJECT_NAME, 
						UDORI.description= @OLD_DATA_OBJECT_DESCRIPTION, 
						UDORI.process_indicator_id=0, -- 0 Means Active
						UDORI.last_updated_by=lastUpdatedBy,
						UDORI.last_updated_on=lastUpdatedOn
				WHERE 	UDORI.data_object_record_id=OLD_DATA_OBJECT_RECORD_ID;
				
				UPDATE 
						data_object_record_info UDORI1 
				SET 	UDORI1.process_indicator_id=-1, -- -1 Means Closed
						UDORI1.last_updated_by=lastUpdatedBy,
						UDORI1.last_updated_on=lastUpdatedOn
				WHERE 	UDORI1.data_object_record_id=NEW_DATA_OBJECT_RECORD_ID; 
				
                select @PARENT_CHILD_IDS;
				UPDATE 
						data_object_record_info UDORI2 
				SET 	UDORI2.process_indicator_id=0, -- 0 Means Active
						UDORI2.last_updated_by=lastUpdatedBy,
						UDORI2.last_updated_on=lastUpdatedOn
				WHERE 	FIND_IN_SET(UDORI2.data_object_record_id, @PARENT_CHILD_IDS);  
			
			END IF;
		ELSE 
			
				UPDATE 
						data_object_record_info UDORI 
				SET 	UDORI.is_deleted = 1, -- 1 Means Deleted
						UDORI.last_updated_by=lastUpdatedBy,
						UDORI.last_updated_on=lastUpdatedOn
				WHERE 	UDORI.data_object_record_id=OLD_DATA_OBJECT_RECORD_ID; 
                
				UPDATE 
						data_object_record_info UDORI2 
				SET 	UDORI2.is_deleted = 1, -- 0 Means Deleted
						UDORI2.last_updated_by=lastUpdatedBy, 
						UDORI2.last_updated_on=lastUpdatedOn
				WHERE 	FIND_IN_SET(UDORI2.data_object_record_id, @PARENT_CHILD_IDS);  

		END CASE; 
	ELSE
		CASE  
		WHEN ACTION_TYPE_ID = 1 THEN   -- 1 Means Update 
			UPDATE 
					data_object_record_info UDORI 
			SET 	UDORI.process_indicator_id=0, -- 0 Means Active
					UDORI.last_updated_by=lastUpdatedBy,
					UDORI.last_updated_on=lastUpdatedOn
			WHERE 	UDORI.data_object_record_id=NEW_DATA_OBJECT_RECORD_ID;
		ELSE
			UPDATE 
					data_object_record_info UDORID 
			SET 	UDORID.is_deleted = 1, -- 1 Means Deleted
					UDORID.last_updated_by=lastUpdatedBy,
					UDORID.last_updated_on=lastUpdatedOn
			WHERE 	UDORID.data_object_record_id=NEW_DATA_OBJECT_RECORD_ID; 
        END CASE; 
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_RuleInfo`(

IN WORKFLOW_ID INT,

IN PARENT_WORKFLOW_ID INT,

IN LAST_UPDATED_ON VARCHAR(255),

IN LAST_UPDATED_BY VARCHAR(255))
BEGIN

  IF EXISTS (SELECT * FROM rule_info RIF WHERE RIF.workflow_id=PARENT_WORKFLOW_ID) THEN

   UPDATE rule_info RI

		SET RI.workflow_id = WORKFLOW_ID, 

			RI.last_updated_by=LAST_UPDATED_BY,

            RI.last_updated_on=LAST_UPDATED_ON

		WHERE RI.workflow_id = PARENT_WORKFLOW_ID; 

  END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_ServiceRequestInfoStatus`(
IN SERVICE_REQUEST_ID INT(11),
IN SERVICE_REQUEST_STATUS INT(1),
IN LAST_UPDATED_BY VARCHAR(128)  
)
BEGIN

SET @EXISTING_STAGED_RECORDS_COUNT = 0;
 
	SELECT 
			COUNT( WSSI.workflow_step_stage_id ) 
	INTO  
			@EXISTING_STAGED_RECORDS_COUNT
	FROM 	
			workflow_step_stage_info WSSI 
	WHERE   WSSI.service_request_id = SERVICE_REQUEST_ID AND WSSI.process_indicator = 1;
			 	 	
             
	IF @EXISTING_STAGED_RECORDS_COUNT = 0
	THEN
		UPDATE servicerequest_info SRI
		SET 
				SRI.status = 0,
				SRI.last_updated_by = LAST_UPDATED_BY
		WHERE       
				SRI.service_request_id = SERVICE_REQUEST_ID; 
	ELSE
		UPDATE servicerequest_info SRI
		SET 
				SRI.status = 1,
				SRI.last_updated_by = LAST_UPDATED_BY
		WHERE      
				SRI.service_request_id = SERVICE_REQUEST_ID; 
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_ServiceRequestTypeInfo`(
IN SERVICE_REQUEST_TYPE_ID INT(11),

IN SERVICE_REQUEST_TYPE_NAME varchar(100),
 
IN SERVICE_REQUEST_TYPE_DESCRIPTION varchar(100),

IN SERVICE_REQUEST_TYPE_CSSCLASS varchar(100),
 
IN ISACTIVE INT 
)
BEGIN
UPDATE  servicerequest_type_info SRTI

				SET 
                SRTI.name = SERVICE_REQUEST_TYPE_NAME,
                SRTI.description = SERVICE_REQUEST_TYPE_DESCRIPTION,
				SRTI.css_class_name = SERVICE_REQUEST_TYPE_CSSCLASS,
                SRTI.is_active = ISACTIVE
WHERE           SRTI.service_request_type_id = SERVICE_REQUEST_TYPE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_Step_Layout`(IN SERVICE_REQUEST_TYPE_ID INT(11),IN STEP_ID INT(11),IN LAYOUT_CONFIG LONGTEXT)
BEGIN
IF STEP_ID = -1 THEN
UPDATE servicerequest_type_info sti
SET 
    sti.layout_config_json = LAYOUT_CONFIG
WHERE
    sti.service_request_type_id = SERVICE_REQUEST_TYPE_ID;
    
ELSE

UPDATE step_info si
SET 
    si.layout_config = LAYOUT_CONFIG
WHERE
    si.service_request_type_id = SERVICE_REQUEST_TYPE_ID
        AND si.step_id = STEP_ID;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_UnReadNotification`(

IN NOTIFICATION_ID INT(11), 

IN READ_STATUS INT(1),

IN LAST_UPDATED_BY varchar(50),

IN LAST_UPDATED_ON datetime

)
BEGIN

	

	UPDATE notification_info NI

    SET NI.unread = READ_STATUS,

		NI.last_updated_by=LAST_UPDATED_BY,

        NI.last_updated_on=LAST_UPDATED_ON

    WHERE NI.notification_id = NOTIFICATION_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `Update_WatchList_Report_Config`(
IN WATCH_LIST_ID INT(11),
IN REPORT_CONFIG LONGTEXT,
IN LAST_UPDATED_ON DATETIME,
IN LAST_UPDATED_BY VARCHAR(128)
)
BEGIN
	 UPDATE watch_list_info WLI
	 SET 	WLI.report_config = REPORT_CONFIG, 

			WLI.last_updated_by=LAST_UPDATED_BY,

            WLI.last_updated_on=LAST_UPDATED_ON

	 WHERE WLI.watch_list_id = WATCH_LIST_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `Update_WorkflowVersionDetails`(

IN WORKFLOW_ID INT,

IN PARENT_WORKFLOW_ID INT,

IN VERSION_NOTES VARCHAR(255),

IN VERSION_NAME VARCHAR(255),

IN REQUESTED_BY VARCHAR(255),

IN APPROVER_ID VARCHAR(255), 

IN LAST_UPDATED_ON VARCHAR(255),

IN LAST_UPDATED_BY VARCHAR(255)

)
BEGIN

UPDATE 

		workflow_info WFI 

SET		WFI.parent_workflow_id = PARENT_WORKFLOW_ID,

		WFI.is_default_version=0,

		WFI.is_approved=0,

		WFI.version_notes = VERSION_NOTES,

        WFI.version_name = VERSION_NAME,

        WFI.requested_by = REQUESTED_BY,

        WFI.approver = APPROVER_ID,

        WFI.last_updated_on = LAST_UPDATED_ON,

        WFI.last_updated_by = LAST_UPDATED_BY

WHERE 	WFI.workflow_id = WORKFLOW_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateAccount`(

IN orgTitle varchar(100),

IN orgWebisteUrl varchar(100),

IN email varchar(50),

IN phoneNumber varchar(15),

IN faxNumber varchar(15),

IN contactPersonFirstName varchar(50),

IN contactPersonLastName varchar(50),

IN contactPersonEmail varchar(50),

IN addressLine1 varchar(45),

IN addressLine2 varchar(45),

IN city varchar(45),

IN state varchar(45),

IN countryCode varchar(45),

IN zipCode varchar(10), 

IN lastUpdatedBy varchar(128),

IN lastUpdatedOn datetime,

IN accountId INT(11))
BEGIN

 

	UPDATE  accounts_info AI

				SET

								AI.org_title=orgTitle,

                                AI.org_webiste_url=orgWebisteUrl,

                                AI.email=email,

                                AI.phone_number=phoneNumber,

                                AI.fax_number=faxNumber,

                                AI.contact_person_firstname=contactPersonFirstName,

                                AI.contact_person_last_name=contactPersonLastName,

                                AI.contact_person_email=contactPersonEmail,

                                AI.address_line_1=addressLine1,

                                AI.address_line_2=addressLine2,

                                AI.city=city,

                                AI.country_code=countryCode,

                                AI.state=state,

                                AI.zipcode=zipCode, 

                                AI.last_updated_by=lastUpdatedBy,

                                AI.last_updated_on=lastUpdatedOn

				WHERE           AI.accounts_id=accountId;      

	 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateCustomViewConfiguration`(

IN SERVICE_TYPE_ID int,

IN STEP_ID int,

IN SOURCE_TYPE varchar(20),

IN LAYOUT_CONFIG longtext)
BEGIN



CASE WHEN SOURCE_TYPE = 'STEP' THEN

UPDATE step_info 

	SET layout_config = LAYOUT_CONFIG  

WHERE 

	service_request_type_id = SERVICE_TYPE_ID

	AND 

	step_id = STEP_ID;

ELSE 

	UPDATE servicerequest_type_info  

    SET layout_config_json = LAYOUT_CONFIG 

    WHERE 

		service_request_type_id = SERVICE_TYPE_ID;



END CASE;

commit;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateDataRecord`(

IN data_object_type_id int(11), 

IN name varchar(100),

IN description longtext,

IN field_values longtext,

IN last_updated_by varchar(50),

IN last_updated_on datetime, 

IN random_key varchar(50),

IN data_object_record_id INT(11),

IN ACTION_TYPE_ID INT,

IN Record_Id varchar(100)
)
BEGIN

CASE  
		WHEN ACTION_TYPE_ID = 3 THEN   -- 3 Means UpdateObjectRecordID 

			UPDATE 
						data_object_record_info UDORI 
				SET 	UDORI.record_id = Record_Id,  
						UDORI.last_updated_by = last_updated_by,
						UDORI.last_updated_on = last_updated_on
				WHERE 	UDORI.data_object_record_id = data_object_record_id; 
			
		ELSE 
						
			UPDATE  data_object_record_info dori

				SET

				dori.data_object_type_id = data_object_type_id,

				dori.`values` = field_values,

				dori.`name` = name,

				dori.description = description,

				dori.last_updated_by = last_updated_by,

				dori.last_updated_on = last_updated_on,

				dori.random_key = random_key

				WHERE dori.data_object_record_id = data_object_record_id; 
				 

		END CASE; 
                  

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateDocumentTemplate`(

	IN DOCUMENT_ID INT(11),

	IN APP_ID INT(11),

    IN TYPE_ID INT(11), 

	IN NAME varchar(128), 

    IN DESCRIPTION varchar(500), 
    
    IN CONFIG_JSON longtext,

	IN PATH varchar(500), 

	IN STREAM_DATA BLOB,

	IN LAST_UPDATED_BY varchar(128),

	IN LAST_UPDATED_ON datetime

)
BEGIN



IF STREAM_DATA IS NULL THEN

   UPDATE document_template_info DTI

SET 

    DTI.name = NAME,

    DTI.description = DESCRIPTION,

    DTI.file_type_id = TYPE_ID,

    DTI.path = PATH,
    
     DTI.config_json = CONFIG_JSON,

    DTI.last_updated_by = LAST_UPDATED_BY,

    DTI.last_updated_on = LAST_UPDATED_ON

WHERE

    DTI.app_id = APP_ID

        AND DTI.document_id = DOCUMENT_ID;

ELSE

   UPDATE document_template_info DTIN

SET 

    DTIN.name = NAME,

    DTIN.description = DESCRIPTION,

    DTIN.file_type_id = TYPE_ID,

    DTIN.data = STREAM_DATA,

    DTIN.path = PATH,

    DTIN.last_updated_by = LAST_UPDATED_BY,

    DTIN.last_updated_on = LAST_UPDATED_ON

WHERE

    DTIN.app_id = APP_ID

        AND DTIN.document_id = DOCUMENT_ID;

END IF;



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateEmailNotificationsProcessInfoIndicator`(IN PROCESSIND BIT(1),IN NOTIFICATIONIDS Text)
BEGIN



DECLARE strLen    INT DEFAULT 0;

	DECLARE SubStrLen INT DEFAULT 0;



	IF NOTIFICATIONIDS IS NULL THEN

		SET NOTIFICATIONIDS = '';

	END IF;



do_this:

  LOOP

    SET strLen = CHAR_LENGTH(NOTIFICATIONIDS);

    

    UPDATE email_notification_process_info 

SET 

    process_indicator = PROCESSIND

WHERE

    notification_id = SUBSTRING_INDEX(NOTIFICATIONIDS, ',', 1); 

		

	

    SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(NOTIFICATIONIDS, ',', 1)) + 2;

    SET NOTIFICATIONIDS = MID(NOTIFICATIONIDS, SubStrLen, strLen);



    IF NOTIFICATIONIDS = '' THEN

      LEAVE do_this;

    END IF;

  END LOOP do_this;

   



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateField`(

IN service_request_type_id int(11),

IN name longtext,

IN display_name longtext,

IN type varchar(50),

IN readonly int(1),

IN `unique` int(1),

IN parent_field_id int(11),

IN cascading_parent_field_id int(11),

IN display_type varchar(50),

IN last_updated_by varchar(50),

IN last_updated_on datetime,

IN random_key varchar(50),

IN formula_expression varchar(200),

IN formula_result_type varchar(50),

IN relation_id int(11),

IN source_object_type_id int(11),

IN target_object_type_id int(11),

IN field_id INT(11),

IN relation_type varchar(5),

IN IS_PRIMARY bit(1), 

IN is_question bit(1),

IN expected_response longtext,

OUT Output_field_id INT(11)

)
BEGIN

DECLARE return_status INT DEFAULT 1;

/*Check - Does the field is relation type or not*/

IF EXISTS (SELECT 1 FROM field_info fi WHERE fi.field_id!=field_id and fi.name=name and fi.source_object_type_id=source_object_type_id) THEN

SET Output_field_id=0;

ELSE

IF ((select count(1) from field_info fi where fi.field_id = field_id and fi.type ='relation') > 0) THEN

-- call IsRequiredToDeleteRelationsAndFields(service_request_type_id, field_id, relation_type, source_object_type_id, target_object_type_id,'true' , @return_status);

SELECT @return_status INTO return_status ;

IF return_status = 1 THEN

call DeleteRelation(service_request_type_id, field_id, relation_id, source_object_type_id, target_object_type_id);

call DeleteRelatedFields(service_request_type_id, field_id, source_object_type_id, target_object_type_id);

call SaveField(service_request_type_id, name, display_name, type, readonly, `unique`,parent_field_id, last_updated_by, last_updated_on, last_updated_by, last_updated_on, random_key,formula_expression, 0, source_object_type_id, null,is_question,expected_response, @field_id);

SELECT @field_id INTO Output_field_id;

ELSE

UPDATE field_info fi

set

fi.service_request_type_id = service_request_type_id,

fi.name = name,

fi.display_name = display_name,

fi.type = type,

fi.readonly = readonly,

fi.`unique` = `unique`,

fi.parent_field_id = parent_field_id,

fi.cascading_parent_field_id = cascading_parent_field_id,

fi.display_type = display_type,

fi.last_updated_by = last_updated_by,

fi.last_updated_on = last_updated_on,

fi.random_key = random_key,

fi.formula_expression = formula_expression,

fi.formula_result_type= formula_result_type,

fi.relation_id = relation_id,

fi.source_object_type_id = source_object_type_id,

fi.target_object_type_id = target_object_type_id,

fi.is_primary_key = IS_PRIMARY,

fi.is_question= is_question,

fi.expected_response = expected_response

WHERE

fi.field_id = field_id;

set Output_field_id = field_id;

END IF;



ELSE



UPDATE field_info fi

set

fi.service_request_type_id = service_request_type_id,

fi.name = name,

fi.display_name = display_name,

fi.type = type,

fi.readonly = readonly,

fi.`unique` = `unique`,

fi.parent_field_id = parent_field_id,

fi.cascading_parent_field_id = cascading_parent_field_id,

fi.display_type = display_type,

fi.last_updated_by = last_updated_by,

fi.last_updated_on = last_updated_on,

fi.random_key = random_key,

fi.formula_expression = formula_expression,

fi.formula_result_type=formula_result_type,

fi.relation_id = relation_id,

fi.source_object_type_id = source_object_type_id,

fi.target_object_type_id = target_object_type_id,

fi.is_primary_key = IS_PRIMARY,

fi.is_question= is_question,

fi.expected_response = expected_response

WHERE

fi.field_id = field_id;

set Output_field_id = field_id;



END IF;

SELECT Output_field_id;

END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateNotificationsProcessInfoIndicator`(

IN PROCESSIND BIT(1),

IN NOTIFICATIONIDS Text,

IN NOTIFICATION_TYPE INT

)
BEGIN



DECLARE strLen    INT DEFAULT 0;

	DECLARE SubStrLen INT DEFAULT 0;



	IF NOTIFICATIONIDS IS NULL THEN

		SET NOTIFICATIONIDS = '';

	END IF;



do_this:

  LOOP

    SET strLen = CHAR_LENGTH(NOTIFICATIONIDS);

    

    CASE WHEN NOTIFICATION_TYPE = 1 THEN -- emails

    

		UPDATE email_notification_process_info 

		SET 

			process_indicator = PROCESSIND

		WHERE

			notification_id = SUBSTRING_INDEX(NOTIFICATIONIDS, ',', 1); 

	ELSE

    

		UPDATE sms_notification_process_info 

		SET 

			process_indicator = PROCESSIND

		WHERE

			notification_id = SUBSTRING_INDEX(NOTIFICATIONIDS, ',', 1); 

	END CASE;

	

    SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(NOTIFICATIONIDS, ',', 1)) + 2;

    SET NOTIFICATIONIDS = MID(NOTIFICATIONIDS, SubStrLen, strLen);



    IF NOTIFICATIONIDS = '' THEN

      LEAVE do_this;

    END IF;

  END LOOP do_this;

   



END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateReport`(
IN ReportID INT(11),
IN Name VARCHAR(100),
IN Description VARCHAR(100),
IN ReportTypeID INT(11),
IN config_json LONGTEXT,  
IN lastUpdatedBy VARCHAR(128),
IN lastUpdatedOn DATETIME,
IN Query_String LONGTEXT,
IN IS_ACTIVE BIT(1)
)
BEGIN
UPDATE  report_info RT
SET
	RT.name = Name,
	RT.description = Description,
	RT.report_type_id = ReportTypeID,
	RT.config_json = config_json, 
	RT.query_string = Query_String,                         
	RT.last_updated_by = lastUpdatedBy,
	RT.last_updated_on = lastUpdatedOn,
    RT.is_active = IS_ACTIVE
WHERE           
    RT.report_id = ReportID;      
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`xprocdev`@`localhost` PROCEDURE `UpdateReportPreset`(
IN PRESET_ID INT(11),
IN PRESET_NAME VARCHAR(100),
IN REPORT_ID INT(11),
IN IS_DEFAULT BIT(1),
IN IS_ACTIVE BIT(1),
IN QUERY_STRING LONGTEXT,
IN UPDATED_BY VARCHAR(128),
IN UPDATED_ON DATETIME,
OUT OUTPUT_PRESET_ID INT(11)
)
BEGIN
DECLARE Record_Count BIGINT(11);

IF(IS_DEFAULT = 1)
THEN
SET SQL_SAFE_UPDATES=0;
UPDATE `report_presets_xref` rpx
SET rpx.is_default = 0 WHERE rpx.report_id = REPORT_ID;
SET SQL_SAFE_UPDATES=1;
END IF;


IF EXISTS (SELECT 1 FROM report_presets_xref rp WHERE rp.preset_id != PRESET_ID AND LOWER(rp.name) = LOWER(PRESET_NAME) AND rp.report_id = REPORT_ID)
THEN

SET OUTPUT_PRESET_ID = 0;

ELSE
SET SQL_SAFE_UPDATES=0;

UPDATE `report_presets_xref` rep
SET
rep.name = PRESET_NAME,
rep.report_id = REPORT_ID,
rep.query_string = QUERY_STRING,
rep.is_default = IS_DEFAULT,
rep.is_active = IS_ACTIVE,
rep.last_updated_by = UPDATED_BY,
rep.last_updated_on = UPDATED_ON
WHERE rep.preset_id = PRESET_ID;

SET OUTPUT_PRESET_ID = PRESET_ID;

SET SQL_SAFE_UPDATES=1;
END IF;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateReportType`(

IN ReportTypeID INT(11),

IN Name varchar(100),

IN Description varchar(100),

IN DataObjectTypeID INT(11),

IN config_json longtext,  

IN lastUpdatedBy varchar(128),

IN lastUpdatedOn datetime )
BEGIN

UPDATE  report_types RT 

				SET

								RT.name = Name,

                                RT.description = Description,

                                RT.data_object_type_id = DataObjectTypeID,

                                RT.config_json = config_json, 
                                
                                RT.last_updated_by = lastUpdatedBy,

                                RT.last_updated_on = lastUpdatedOn

				WHERE           RT.report_type_id = ReportTypeID;      
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateStep`(
IN STEP_NAME VARCHAR(50),
IN SHORT_DESC VARCHAR(100),
IN STEP_DESCRIPTION VARCHAR(5000),
IN IMPLEMENTOR_CLASS VARCHAR(500),
IN NAMESPACE VARCHAR(200),
IN CUSTOM_PAGE_URL VARCHAR(45),
IN IS_AUTO BIT(1),
IN IS_GLOBAL BIT(1),
IN IS_DYNAMIC_VIEW BIT(1),
IN SERVICE_TYPE_ID INT,
IN CREATED_BY VARCHAR(50),
IN CREATED_ON DATETIME,
IN LAST_UPDATED_ON DATETIME,
IN LAST_UPDATED_BY VARCHAR(50),
IN IS_ACTIVE BIT(1),
IN IS_CUSTOM BIT(1),
IN SHOW_DOCUMENTS_LIST BIT(1),
IN SHOW_CONTACTS_LIST BIT(1),
IN SLA INT,
IN SLA_UNIT CHAR(1),
IN CSS_CLASS_NAME VARCHAR(50),
IN SHORT_NAME VARCHAR(15),
IN IS_DISABLE_SLA BIT(1),
IN LAYOUT_CONFIG LONGTEXT,
IN INSTRUCTIONS LONGTEXT,
IN STEP_CATEGORY_ID INT,
IN IS_QUESTIONNAIRE BIT(1),
IN IS_QUIZ BIT(1),
IN STEP_ID INT,
OUT OUT_STEP_ID INT
)
BEGIN
UPDATE  `step_info` AS si
SET `name` = STEP_NAME,
`short_description` = SHORT_DESC,
`long_description` = STEP_DESCRIPTION,
`implentor_class` = IMPLEMENTOR_CLASS,
`namespace` = NAMESPACE,
`page_url` = CUSTOM_PAGE_URL,
`step_type` = IS_AUTO,
`is_global` = IS_GLOBAL,
`is_dynamic_view` = IS_DYNAMIC_VIEW,
`service_request_type_id` = SERVICE_TYPE_ID,
`created_by` = CREATED_BY,
`created_on` = CREATED_ON,
`last_updated_on` = LAST_UPDATED_ON,
`last_updated_by` = LAST_UPDATED_BY,
`is_active` = IS_ACTIVE,
`is_custom` = IS_CUSTOM,
`show_document` = SHOW_DOCUMENTS_LIST,
`show_contact` = SHOW_CONTACTS_LIST,
`sla` = SLA,
`sla_unit` = SLA_UNIT,
`css_class_name` = CSS_CLASS_NAME,
`short_name` = SHORT_NAME,
`is_disable_sla` = IS_DISABLE_SLA,
`step_category_id` = STEP_CATEGORY_ID,
`instructions` = INSTRUCTIONS,
`is_questionnaire` = IS_QUESTIONNAIRE,
`is_quiz` = IS_QUIZ
WHERE si.step_id = STEP_ID;

SELECT STEP_ID INTO OUT_STEP_ID; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateTag`(

IN TAG_ID INT,
IN BACKGROUND_COLOR varchar(45),
IN NAME varchar(45),
IN APP_ID INT

 )
BEGIN

UPDATE  tag_info TI 

				SET

								TI.name = Name,

                                TI.background_color = BACKGROUND_COLOR

				WHERE           TI.tag_id = TAG_ID AND TI.app_id = APP_ID ;   
                
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateUserApps`(IN AppId INT(11),IN UserId varchar(255),IN IsDefault bit(1))
BEGIN

UPDATE `users_app_xref` 

SET 

    `is_default` = 0

WHERE

    `user_id` = UserId;

IF IsDefault = 1 then

UPDATE `users_app_xref` SET `is_default`= IsDefault WHERE `user_id`= UserId and app_id =AppId;

End IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`superadmin`@`localhost` PROCEDURE `UpdateUserGroup`(

IN userGroupTitle varchar(50),

IN userGroupDescription varchar(50), 

IN lastUpdatedBy varchar(255), 

IN lastUpdatedOn datetime,

IN userGroupId varchar(255)

)
BEGIN

	UPDATE  user_group_info UG

				SET

								UG.name=userGroupTitle,

                                UG.description=userGroupDescription, 

                                UG.last_updated_by=lastUpdatedBy, 

                                UG.last_updated_on=lastUpdatedOn

				WHERE           UG.user_group_id=userGroupId;    

END$$
DELIMITER ;
